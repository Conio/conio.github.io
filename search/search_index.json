{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Conio SDK","text":"<p>Conio SDK provides a set of Android and iOS native APIs for Conio services to let you create native applications with Crypto Wallets and Crypto Trading functionalities.</p>"},{"location":"#overview","title":"Overview","text":"<ul> <li>Installation<ul> <li>iOS </li> <li>Android</li> </ul> </li> <li>Configuration<ul> <li>iOS </li> <li>Android</li> </ul> </li> <li>Services</li> </ul>"},{"location":"#old","title":"Old","text":"<p>Old docs</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<ul> <li>iOS</li> <li>Android</li> </ul>"},{"location":"CHANGELOG/#ios","title":"iOS","text":""},{"location":"CHANGELOG/#220-06-03-2025","title":"2.2.0 - 06-03-2025","text":""},{"location":"CHANGELOG/#fixed","title":"Fixed","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li><code>BuyActivity</code> model properties: <code>cryptoCurrency</code>, <code>cryptoAmount</code>, <code>fiatAmount</code> and <code>serviceFee</code></li> <li><code>SellActivity</code> model properties: <code>cryptoCurrency</code>, <code>cryptoAmount</code>, <code>fiatAmount</code> and <code>serviceFee</code></li> <li><code>TransferActivity.miningFee</code> model property</li> <li><code>CryptocurrencyMetadata.ConioInfo</code> model properties: <code>active</code> and <code>maintenance</code></li> <li><code>AskResult.cryptoCurrency</code> model property</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li><code>Transaction</code> model properties: <code>fiatAmount</code>, <code>fiatCurrency</code> and <code>serviceFee</code></li> <li><code>TradingSummaryResult.Stats.tradedCryptoAmount</code> model property</li> <li>unnecessary <code>PermissionType</code> enum cases</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Made <code>BuyActivity.transaction</code> model property optional</li> <li>Made <code>SellActivity.transaction</code> model property optional</li> <li>Made <code>Transaction</code> model properties required (non-null)</li> <li>Renamed <code>Transaction.cryptoAmount</code> property in <code>netCryptoAmount</code></li> <li>Renamed <code>MempoolStatus</code> model into <code>TransactionInclusionInfo</code></li> <li>Renamed <code>BtcSpeedUpFeesResult.transactionMempoolStatus</code> property into <code>currentTransactionStatus</code></li> <li>Renamed <code>BtcSpeedUpFeesResult.SpeedUpFee.mempoolStatus</code> property into <code>inclusionInfo</code></li> <li>Replaced <code>BtcSpeedUpFeesResult.SpeedUpFee.cryptoAmount</code> property with <code>grossCryptoAmount</code> and <code>netCryptoAmount</code></li> <li>Replaced <code>BtcTransactionFeesResult.TransactionFee.cryptoAmount</code> property with <code>grossCryptoAmount</code> and <code>netCryptoAmount</code></li> <li>Replaced <code>CryptocurrencyMetadata.ConioInfo.cryptoType</code> with <code>chainType</code></li> <li><code>TransferResult.grossAmount</code> and <code>TransferResult.serviceFee</code> model property type from <code>FiatAmount</code> to <code>CryptoAmount</code></li> </ul>"},{"location":"CHANGELOG/#217-27-02-2025","title":"2.1.7 - 27-02-2025","text":""},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Missing <code>mfa</code> property to <code>SendParams</code></li> </ul>"},{"location":"CHANGELOG/#216-26-02-2025","title":"2.1.6 - 26-02-2025","text":""},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Email Mfa Challenge error parsing</li> </ul>"},{"location":"CHANGELOG/#215-10-01-2025","title":"2.1.5 - 10-01-2025","text":""},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>No stored session after login with user that need to accept the new T&amp;C</li> </ul>"},{"location":"CHANGELOG/#214-09-12-2024","title":"2.1.4 - 09-12-2024","text":""},{"location":"CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>Swift Lint build issue</li> </ul>"},{"location":"CHANGELOG/#213-29-11-2024","title":"2.1.3 - 29-11-2024","text":""},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Replaced <code>SignupParams.LegalAcceptance</code> and <code>LegalAcceptancesParams.LegalAcceptance</code> models with unified <code>LegalAcceptance</code> model</li> <li>Replaced <code>SignupParams.LegalAcceptanceType</code> and <code>LegalAcceptancesParams.LegalAcceptanceType</code> models with unified <code>LegalAcceptanceType</code> model</li> </ul>"},{"location":"CHANGELOG/#fixed_5","title":"Fixed","text":"<ul> <li>Added missing <code>LegalAcceptancesResult.Acceptance.type</code></li> </ul>"},{"location":"CHANGELOG/#212-22-10-2024","title":"2.1.2 - 22-10-2024","text":""},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Update ConioSDK</li> </ul>"},{"location":"CHANGELOG/#211-04-10-2024","title":"2.1.1 - 04-10-2024","text":""},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Update Fetch Historical Prices</li> </ul>"},{"location":"CHANGELOG/#210-18-09-2024","title":"2.1.0 - 18-09-2024","text":""},{"location":"CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>Transfer Service</li> </ul>"},{"location":"CHANGELOG/#201-07-08-2024","title":"2.0.1 - 07-08-2024","text":""},{"location":"CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li>Update ConioSDK</li> </ul>"},{"location":"CHANGELOG/#200-13-06-2024","title":"2.0.0 - 13-06-2024","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Trading Info Service</li> <li>Btc Transaction Management Service</li> <li>Trading Buy Service</li> <li>Trading Sell Service</li> <li>Trading Price Service</li> <li>Swap Service</li> </ul>"},{"location":"CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li>User Service</li> <li>Wallet Service</li> </ul>"},{"location":"CHANGELOG/#070-07-06-2022","title":"0.7.0 - 07-06-2022","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Model <code>CryptoSellParams</code> to replace <code>SellParams</code></li> <li><code>ConioError.onNetwork</code> to wrap network communication errors</li> </ul>"},{"location":"CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li><code>SellParams</code> deprecated</li> <li>Factory init used to create/refresh an ask with all user available amount</li> </ul>"},{"location":"CHANGELOG/#fixed_6","title":"Fixed","text":"<ul> <li>Always throw <code>ConioError.unauthorized</code> on session expired</li> </ul>"},{"location":"CHANGELOG/#0610-09-02-2022","title":"0.6.10 - 09-02-2022","text":""},{"location":"CHANGELOG/#changed_8","title":"Changed","text":"<ul> <li>Update legal acceptances</li> </ul>"},{"location":"CHANGELOG/#069-08-02-2022","title":"0.6.9 - 08-02-2022","text":""},{"location":"CHANGELOG/#changed_9","title":"Changed","text":"<ul> <li>Error mapping as <code>unauthorized</code> on 401 status code</li> </ul>"},{"location":"CHANGELOG/#068-28-01-2022","title":"0.6.8 - 28-01-2022","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Transaction speedup</li> <li>Reset password flow APIs</li> <li>KYC create applicant params public init</li> <li>KYC trigger check params public init</li> <li>User data handling APIs</li> <li>User permissions map update</li> </ul>"},{"location":"CHANGELOG/#changed_10","title":"Changed","text":"<ul> <li>Updated model: withdrawal transaction, available fee</li> </ul>"},{"location":"CHANGELOG/#fixed_7","title":"Fixed","text":"<ul> <li>Signup B2B wallet encrypt with hashed password</li> <li>Bad cancellables store in operations</li> <li>Missing password hash on B2B signup</li> </ul>"},{"location":"CHANGELOG/#062-17-11-2021","title":"0.6.2 - 17-11-2021","text":""},{"location":"CHANGELOG/#changed_11","title":"Changed","text":"<ul> <li>Wallet service <code>walletPDFActivities</code>, <code>limit</code> in <code>PDFActivitiesParams</code> now optional</li> </ul>"},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li>User service <code>getLegalAcceptances</code> , new <code>preContractualInfoUrl</code> param in <code>LegalAcceptances</code> response</li> </ul>"},{"location":"CHANGELOG/#060-02-11-2021","title":"0.6.0 - 02-11-2021","text":""},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li>User service <code>changeEmail</code></li> </ul>"},{"location":"CHANGELOG/#050-11-10-2021","title":"0.5.0 - 11-10-2021","text":""},{"location":"CHANGELOG/#changed_12","title":"Changed","text":"<ul> <li>Data serialization and mapping</li> <li>Code refactor and optimizations</li> </ul>"},{"location":"CHANGELOG/#040-13-09-2021","title":"0.4.0 - 13-09-2021","text":""},{"location":"CHANGELOG/#fixed_8","title":"Fixed","text":"<ul> <li>Wrong mapping for <code>rangeFrom</code> property in <code>ServiceFee</code></li> </ul>"},{"location":"CHANGELOG/#changed_13","title":"Changed","text":"<ul> <li>Update <code>rangeFrom</code> type from <code>UInt64?</code> to <code>FiatAmount?</code> in <code>ServiceFee</code></li> </ul>"},{"location":"CHANGELOG/#033-07-09-2021","title":"0.3.3 - 07-09-2021","text":""},{"location":"CHANGELOG/#changed_14","title":"Changed","text":"<ul> <li>Rename <code>tradedFiat</code> to <code>weightedBidBalance</code> in <code>TradingInfo.swift</code> as per docs specifications</li> </ul>"},{"location":"CHANGELOG/#032-20-07-2021","title":"0.3.2 - 20-07-2021","text":""},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li>Bitcoin network <code>privateMainnet</code> and <code>privateTestnet</code></li> </ul>"},{"location":"CHANGELOG/#031-19-07-2021","title":"0.3.1 - 19-07-2021","text":""},{"location":"CHANGELOG/#fixed_9","title":"Fixed","text":"<ul> <li>Avoid using app bundle identifier during keychain init</li> </ul>"},{"location":"CHANGELOG/#030-14-07-2021","title":"0.3.0 - 14-07-2021","text":""},{"location":"CHANGELOG/#changed_15","title":"Changed","text":"<ul> <li>Added missing filters params in <code>ActivitiesParams</code> to correctly get wallet activities</li> <li>Refactor on SDK errors: <code>ConioError</code> is now the only error type throwable (check operation section)</li> </ul>"},{"location":"CHANGELOG/#020-06-07-2021","title":"0.2.0 - 06-07-2021","text":""},{"location":"CHANGELOG/#changed_16","title":"Changed","text":"<ul> <li>SDK configuration object <code>ConioConfiguration</code> has no default value and must be explicitly initialized</li> </ul>"},{"location":"CHANGELOG/#fixed_10","title":"Fixed","text":"<ul> <li>Fix wrong privacy policies url mapping in <code>GetLegalAcceptancesOperation</code></li> <li>Avoid build error on Xcode 12.4 in <code>OpenAPIConioBuilder</code></li> </ul>"},{"location":"CHANGELOG/#016-25-06-2021","title":"0.1.6 - 25-06-2021","text":""},{"location":"CHANGELOG/#changed_17","title":"Changed","text":"<ul> <li>Explicit fees represented as intervals</li> <li><code>WiretransferPayeeInfo</code> in <code>CreatedBid</code> has now two dedicated properties representing standard and custom wire transfer payee info</li> <li><code>CreatedBid</code> now contains net cost amount <code>fiatAmount</code> and gross amount <code>grossFiatAmount</code></li> <li>All fiat amounts are now represented as <code>Decimal</code></li> </ul>"},{"location":"CHANGELOG/#015-15-06-2021","title":"0.1.5 - 15-06-2021","text":""},{"location":"CHANGELOG/#changed_18","title":"Changed","text":"<ul> <li><code>Models</code> update</li> <li><code>Bid</code>, <code>Ask</code> e <code>Transaction</code> properties linked to amount/balance now are declared with type <code>UInt64</code></li> </ul>"},{"location":"CHANGELOG/#added_7","title":"Added","text":"<ul> <li><code>ConioError</code> entity to map operation errors</li> </ul>"},{"location":"CHANGELOG/#014-10-06-2021","title":"0.1.4 - 10-06-2021","text":""},{"location":"CHANGELOG/#changed_19","title":"Changed","text":"<ul> <li><code>Models</code> update</li> <li><code>Bid</code>, <code>Ask</code>, <code>WalletBalances</code> e <code>SimpleActivity</code> properties now have public control access</li> <li><code>Bid</code>, <code>Ask</code>, <code>WalletBalances</code> e <code>SimpleActivity</code> properties linked to amount/balance now are declared with type <code>UInt64</code></li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li>Removed <code>SwiftyRSA</code> from dependencies included in <code>ConioSDK</code></li> </ul>"},{"location":"CHANGELOG/#013-03-06-2021","title":"0.1.3 - 03-06-2021","text":""},{"location":"CHANGELOG/#fixed_11","title":"Fixed","text":"<ul> <li>Correzione errore signup operation</li> </ul>"},{"location":"CHANGELOG/#010-12-04-2021","title":"0.1.0 - 12-04-2021","text":""},{"location":"CHANGELOG/#added_8","title":"Added","text":"<ul> <li>Rilascio versione 0.1.0</li> </ul>"},{"location":"CHANGELOG/#android","title":"Android","text":""},{"location":"CHANGELOG/#212-27-02-2025","title":"2.1.2 - 27-02-2025","text":""},{"location":"CHANGELOG/#fixed_12","title":"Fixed","text":"<ul> <li>Email Mfa Challenge error parsing</li> </ul>"},{"location":"CHANGELOG/#211-05-12-2024","title":"2.1.1 - 05-12-2024","text":""},{"location":"CHANGELOG/#fixed_13","title":"Fixed","text":"<ul> <li>deadlock on <code>UserService.signup</code> and <code>UserService.login</code></li> </ul>"},{"location":"CHANGELOG/#added_9","title":"Added","text":"<ul> <li>Mining fees in transfer activity</li> </ul>"},{"location":"CHANGELOG/#210-17-10-2024","title":"2.1.0 - 17-10-2024","text":""},{"location":"CHANGELOG/#added_10","title":"Added","text":"<ul> <li>Swap Services</li> <li>Transfer Services</li> </ul>"},{"location":"CHANGELOG/#changed_20","title":"Changed","text":"<ul> <li><code>FetchHistoricalPricesParams</code> fields used to specify the timeframe to a pre-defined timestamp set</li> </ul>"},{"location":"CHANGELOG/#100-16-07-2024","title":"1.0.0 - 16-07-2024","text":""},{"location":"CHANGELOG/#changed_21","title":"Changed","text":"<p>First multicrypto SDK release</p>"},{"location":"CHANGELOG/#0811-7-06-2022","title":"0.8.11 - 7-06-2022","text":""},{"location":"CHANGELOG/#added_11","title":"Added","text":"<ul> <li><code>ConioException.OnNetwork</code> to wrap network communication errors</li> </ul>"},{"location":"CHANGELOG/#fixed_14","title":"Fixed","text":"<ul> <li>Always throw <code>ConioException.Unauthorized</code> on session expired</li> </ul>"},{"location":"CHANGELOG/#083-24-03-2022","title":"0.8.3 - 24-03-2022","text":""},{"location":"CHANGELOG/#fixed_15","title":"Fixed","text":"<ul> <li>Initialization error caused by unusable KeyStore keys</li> </ul>"},{"location":"CHANGELOG/#080-9-03-2022","title":"0.8.0 - 9-03-2022","text":""},{"location":"CHANGELOG/#changed_22","title":"Changed","text":"<ul> <li>Minimum Android version supported to Android 6.0 (Android Sdk Version: 23)</li> <li>Improved performance</li> <li><code>SellParams</code> deprecated</li> </ul>"},{"location":"CHANGELOG/#added_12","title":"Added","text":"<ul> <li>Factory method <code>CreateOrRefreshAskParams.withAll</code> to request an Ask with the maximum sellable amount</li> <li>Model <code>CryptoChangeEmailParams</code> to replace <code>ChangeEmailParams</code></li> <li>Model <code>CryptoSellParams</code> to replace <code>SellParams</code></li> </ul>"},{"location":"CHANGELOG/#0718-8-02-2022","title":"0.7.18 - 8-02-2022","text":""},{"location":"CHANGELOG/#changed_23","title":"Changed","text":"<ul> <li>Solved retro-compatibility with OkHttp 3.x</li> <li>Removed appsync dependency</li> </ul>"},{"location":"CHANGELOG/#0716-4-02-2022","title":"0.7.16 - 4-02-2022","text":""},{"location":"CHANGELOG/#changed_24","title":"Changed","text":"<ul> <li>Downgraded OkHttp to 3.14.9</li> </ul>"},{"location":"CHANGELOG/#0715-3-02-2022","title":"0.7.15 - 3-02-2022","text":""},{"location":"CHANGELOG/#changed_25","title":"Changed","text":"<ul> <li>Improved concurrencly on service layer</li> <li>Updated OkHttp to 4.9.0</li> </ul>"},{"location":"CHANGELOG/#0713-24-01-2022","title":"0.7.13 - 24-01-2022","text":""},{"location":"CHANGELOG/#fixed_16","title":"Fixed","text":"<ul> <li>Compatibility issue below Api level 26</li> </ul>"},{"location":"CHANGELOG/#079-26-11-2021","title":"0.7.9 - 26-11-2021","text":""},{"location":"CHANGELOG/#changed_26","title":"Changed","text":"<ul> <li>Legal text copies on the <code>LegalAcceptances</code> model</li> </ul>"},{"location":"CHANGELOG/#078-17-11-2021","title":"0.7.8 - 17-11-2021","text":""},{"location":"CHANGELOG/#changed_27","title":"Changed","text":"<ul> <li>Wallet service <code>activityListPdf</code>, <code>limit</code> in <code>ActivityListPdfParams</code> now nullable</li> </ul>"},{"location":"CHANGELOG/#added_13","title":"Added","text":"<ul> <li>User service <code>getLegalAcceptances</code> , new <code>preContractualInfoUrl</code> param in <code>LegalAcceptances</code> response</li> </ul>"},{"location":"CHANGELOG/#074-02-11-2021","title":"0.7.4 - 02-11-2021","text":""},{"location":"CHANGELOG/#added_14","title":"Added","text":"<ul> <li>User service <code>changeEmail</code></li> </ul>"},{"location":"CHANGELOG/#072-20-10-2021","title":"0.7.2 - 20-10-2021","text":""},{"location":"CHANGELOG/#added_15","title":"Added","text":"<ul> <li>API to get activities in PDF format</li> </ul>"},{"location":"CHANGELOG/#070-11-10-2021","title":"0.7.0 - 11-10-2021","text":""},{"location":"CHANGELOG/#changed_28","title":"Changed","text":"<ul> <li>Data serialization and mapping</li> <li>Code refactor and optimizations</li> </ul>"},{"location":"CHANGELOG/#062-03-08-2021","title":"0.6.2 - 03-08-2021","text":""},{"location":"CHANGELOG/#fixed_17","title":"Fixed","text":"<ul> <li>Security issue</li> </ul>"},{"location":"CHANGELOG/#061-29-07-2021","title":"0.6.1 - 29-07-2021","text":""},{"location":"CHANGELOG/#changed_29","title":"Changed","text":"<ul> <li>Refactor on SDK errors: <code>ConioException</code> as the operations result error type</li> </ul>"},{"location":"CHANGELOG/#060-28-07-2021","title":"0.6.0 - 28-07-2021","text":""},{"location":"CHANGELOG/#changed_30","title":"Changed","text":"<ul> <li>Refactor on SDK errors: <code>ConioException</code> is now the only error type throwable (check operation section)</li> </ul>"},{"location":"CHANGELOG/#054-26-07-2021","title":"0.5.4 - 26-07-2021","text":""},{"location":"CHANGELOG/#fixed_18","title":"Fixed","text":"<ul> <li>Made <code>cro</code>, <code>iban</code> and <code>chargedAt</code> fields of <code>Ask</code> class optional</li> <li>Made <code>paidAt</code> field of <code>Ask</code> class non-optional</li> </ul>"},{"location":"CHANGELOG/#053-20-07-2021","title":"0.5.3 - 20-07-2021","text":""},{"location":"CHANGELOG/#added_16","title":"Added","text":"<ul> <li>Bitcoin network <code>privateMainnet</code> and <code>privateTestnet</code></li> </ul>"},{"location":"CHANGELOG/#051-14-07-2021","title":"0.5.1 - 14-07-2021","text":""},{"location":"CHANGELOG/#fixed_19","title":"Fixed","text":"<ul> <li>Fix factory methods of <code>TimeFrame</code> class</li> </ul>"},{"location":"CHANGELOG/#050-06-07-2021","title":"0.5.0 - 06-07-2021","text":""},{"location":"CHANGELOG/#changed_31","title":"Changed","text":"<ul> <li>SDK configuration object <code>ConioConfiguration</code> has no default value and must be explicitly initialized</li> </ul>"},{"location":"CHANGELOG/#048-25-06-2021","title":"0.4.8 - 25-06-2021","text":""},{"location":"CHANGELOG/#changed_32","title":"Changed","text":"<ul> <li>Explicit fees represented as intervals</li> <li><code>WiretransferPayeeInfo</code> in <code>CreatedBid</code> has now two dedicated properties representing standard and custom wire transfer payee info</li> <li><code>CreatedBid</code> now contains net cost amount <code>fiatAmount</code> and gross amount <code>grossFiatAmount</code></li> <li>All fiat amounts are now represented as <code>BigDecimal</code></li> </ul>"},{"location":"CHANGELOG/#removed_2","title":"Removed","text":"<ul> <li>Removed <code>type</code> property from <code>ServiceFee</code> entity</li> <li>Renamed <code>id</code> property of model entities:<ul> <li><code>CreatedAsk.id</code> -&gt; <code>CreatedAsk.askId</code></li> <li><code>CreatedBid.id</code> -&gt; <code>CreatedBid.bidId</code></li> <li><code>SimpleActivity.id</code>  -&gt; <code>SimpleActivity.activityId</code></li> <li><code>ActivityDetails.id</code> -&gt; <code>ActivityDetails.activityId</code></li> </ul> </li> </ul>"},{"location":"CHANGELOG/#added_17","title":"Added","text":"<ul> <li><code>ConioError</code>:<ul> <li>INVALID_CRYPTO_PROOF,</li> <li>CRYPTO_PROOF_EXPIRED</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#047-01-06-2021","title":"0.4.7 - 01-06-2021","text":""},{"location":"CHANGELOG/#added_18","title":"Added","text":"<ul> <li>Aggiunta di <code>weightedBidBalance</code> alle <code>TradingInfo</code>: controvalore investito</li> </ul>"},{"location":"CHANGELOG/#modified","title":"modified","text":"<ul> <li>Modifica alle <code>TradingFees</code>: supporto fasce di commissioni</li> </ul>"},{"location":"CHANGELOG/#042-13-04-2021","title":"0.4.2 - 13-04-2021","text":""},{"location":"CHANGELOG/#added_19","title":"Added","text":"<ul> <li>Rilascio versione 0.4.2</li> </ul>"},{"location":"CHANGELOG/#041-12-04-2021","title":"0.4.1 - 12-04-2021","text":""},{"location":"CHANGELOG/#added_20","title":"Added","text":"<ul> <li>Rilascio versione 0.4.1</li> </ul>"},{"location":"Configuration/Android/","title":"Android Configuration","text":"<p>To use the Conio SDK, you need to create an instance of the <code>Conio</code> class, providing an Android <code>Context</code> and a  <code>ConioConfiguration</code>.</p> <p>The <code>ConioConfiguration</code> allow you to specify the execution environment of the Conio SDK (e.g. test or production) and can be created with the url of the Conio Back-end and with the related Bitcoin Network.</p> <pre><code>val configuration = ConioConfiguration(\n    // required\n\n    baseUrl = \"https://example.test.com\",\n    bitcoinNetwork = BitcoinNetwork.Testnet, // or BitcoinNetwork.Mainnet for production enviroment\n\n    // optional\n\n    // http headers added to each request, usefull for debug purpose\n    headers = mapOf(\"header_key\" to \"header_value\"),\n)\n\nval conio = Conio(configuration, context)\n</code></pre>"},{"location":"Configuration/iOS/","title":"iOS Configuration","text":"<p><code>ConioB2BSDK</code> is divided into multiple services, each one providing a different set of APIs.</p> <p>Each service is independent and can be initialized through a <code>ServiceConfiguration</code> configuration using its own factory.</p> <pre><code>let conioConfig = ConioConfiguration.makeTestConfiguration(baseUrl: ...)\nlet userService = UserServiceFactory().makeServiceUsingConfiguration(conioConfig)\n\n// User Service ready to be used\nuserService\n    .login(with: ...)\n    .asPublisher()\n    .sink { ... }\n// ...  \n</code></pre> <p>Otherwise, <code>ConioB2BServiceFactory</code> factory leverages on a single <code>ServiceFactory</code> to make the requested <code>Service</code>.</p> <pre><code>let conioConfig = ConioConfiguration.makeTestConfiguration(baseUrl: ...)\nlet userService = ConioB2BServiceFactory.makeServiceUsingFactory(UserServiceFactory(), serviceConfiguration: conioConfig)\nlet walletService = ConioB2BServiceFactory.makeServiceUsingFactory(WalletServiceFactory(), serviceConfiguration: conioConfig)\nlet activitiesService = ConioB2BServiceFactory.makeServiceUsingFactory(ActivitiesServiceFactory(), serviceConfiguration: conioConfig)\n// ...  \n</code></pre>"},{"location":"Configuration/iOS/#usage","title":"Usage","text":"<p>The single <code>Service</code> API is initialized with its specific <code>Params</code> parameters (if necessary) and the output can be read through its <code>OperationResult</code> result.</p> <pre><code>// ...\nlet params = LoginParams\n    .make(\n        username: ...,\n        password: ...,\n        cryptoRequest: ...\n    )\n\nuserService\n    .login(with: params)\n    .asPublisher()\n    .sink { result in\n        switch result {\n        case .success:\n            // ...\n        case .failure(let error):\n            // ...\n        }\n    }\n    .store(in: ...)\n// ...  \n</code></pre> <p>Each API is returned as <code>ServiceConsumer</code> and can be consumed in three different ways:</p> <ul> <li><code>asPublisher()</code>, used to handle the result in a declarative way leveraging on Combine;</li> <li><code>asCallback()</code>, used to handle the result in closure/lambda style as self-contained block;</li> <li><code>run()</code>, used to execute the API without handling the result.</li> </ul> <pre><code>// asPublisher()\nlet cancellable = userService\n    .logout()\n    .asPublisher()\n    .sink { result in \n        // ...\n    }\n\n// asCallback()\nuserService\n    logout()\n    .asCallback { result in\n        // ...        \n    }\n\n// run()\nuserService\n    .logout()\n    .run()  \n</code></pre>"},{"location":"Features/","title":"Service categories","text":"<p>The Conio SDK provides a suite of modular services tailored to specific functionalities. These include wallet management, trading capabilities, and secure authentication. Each module offers the flexibility to integrate cryptocurrency features seamlessly into existing mobile applications.</p>"},{"location":"Features/#user-service","title":"User Service","text":"<p>The <code>UserService</code> contains all the APIs used to manage a Conio user.</p> <ul> <li>Login</li> <li>Signup</li> <li>Logout</li> <li>FetchLegalAcceptances</li> <li>FetchPermissions</li> <li>AcceptNewLegalAcceptances</li> </ul>"},{"location":"Features/#wallet-service","title":"Wallet Service","text":"<p>The <code>WalletService</code> contains all the APIs that provides information about the user wallet, such balance and mnemonic.</p> <ul> <li>FetchBalances</li> <li>FetchMnemonic</li> </ul>"},{"location":"Features/#activities-service","title":"Activities Service","text":"<p>The <code>ActivitiesService</code> contains all the API that provides information about wallet transactions.</p> <ul> <li>FetchActivities</li> <li>FetchActivity</li> </ul>"},{"location":"Features/#trading-price-service","title":"Trading Price Service","text":"<p>The <code>TradingPriceService</code> contains all the APIs that provides cryptocurrencies trading price information. It provides methods for fetching current or historical crypto prices and tradable metadata, including cryptocurrency ids.</p> <ul> <li>FetchPrice</li> <li>FetchHistoricalPrice</li> <li>FetchAllPrices</li> <li>FetchTradableCryptocurrenciesMetadata</li> </ul>"},{"location":"Features/#trading-info-service","title":"Trading Info Service","text":"<p>The <code>TradingInfoService</code> contains all the APIs used to manage a Conio user trading profile and information.</p> <ul> <li>FetchTradingFees</li> <li>FetchTradingSummary</li> <li>FetchTradingLimits</li> <li>FetchTradingReport</li> </ul>"},{"location":"Features/#btc-transaction-service","title":"BTC Transaction Service","text":"<p>The <code>BtcTransactionService</code> contains all the APIs responsible for managing Bitcoin transactions, including sending bitcoin, receiving bitcoin and speeding up transactions.</p> <ul> <li>FetchAddress</li> <li>SendBitcoin</li> <li>SpeedUpTransaction</li> <li>FetchTransactionAvailableFees</li> <li>FetchSpeedUpAvailableFees</li> </ul>"},{"location":"Features/#buy-service","title":"Buy Service","text":"<p>The <code>BuyService</code> contains all the APIs designed to facilitate the purchase of cryptocurrencies through trading operations. It provides methods for creating, updating, fetching and finalizing bid quotations.</p> <ul> <li>CreateBid</li> <li>UpdateBid</li> <li>FetchBid</li> <li>Buy</li> </ul>"},{"location":"Features/#sell-service","title":"Sell Service","text":"<p>The <code>SellService</code> contains all the APIs designed to facilitate the sale of cryptocurrencies through trading operations. It provides methods for creating, updating, fetching and finalizing ask quotations.</p> <ul> <li>CreateAsk</li> <li>UpdateAsk</li> <li>FetchAsk</li> <li>Sell</li> </ul>"},{"location":"Features/#swap-service","title":"Swap Service","text":"<p>The <code>SwapService</code> contains all the APIs designed to facilitate the cryptocurrency swap functionality. It provides methods for creating, updating, fetching and finalizing swap quotations between cryptos.</p> <ul> <li>CreateSwap</li> <li>UpdateSwap</li> <li>FetchSwap</li> <li>Swap</li> </ul>"},{"location":"Features/#transfer-service","title":"Transfer Service","text":"<p>The <code>TransferService</code> contains all the APIs designed to facilitate the cryptocurrency amount transferring from an On-Chain Wallet to an Off-Chain Wallet of the same cryptocurrency and viceversa. It provides methods for creating, updating, fetching and finalizing transfer cryptocurrency between On-Chain and Off-Chain Wallet.</p> <ul> <li>CreateTransfer</li> <li>UpdateTransfer</li> <li>FetchTransfer</li> <li>Transfer</li> </ul>"},{"location":"Features/CryptoRequest/","title":"Crypto Request","text":""},{"location":"Features/CryptoRequest/#description","title":"Description","text":"<p>Some features of the Conio SDK are protected by a mechanism called Crypto Request, which adds an additional layer of security to the transmission of certain parameters through a cryptographic signature.</p> <p>Requests utilizing this mechanism can be identified by the presence of the <code>cryptoRequest</code> property, of type <code>[Service]CryptoRequest</code>, in the constructor or factory method of the object passed as a parameter to the operation.</p>"},{"location":"Features/CryptoRequest/#generation","title":"Generation","text":"<p>Each <code>[Service]CryptoRequest</code> type requires a <code>cryptoProof</code> parameter, which is a byte array. This is generated by applying an <code>RSA</code> signature to the <code>SHA256</code> hash of an ordered concatenation (using the \"|\" separator) of the service specific parameters, as detailed in the following section:</p> <pre><code>DATA_TO_SIGN := &lt;pipe-separated concatenation of the service specific parameters&gt;\nNFC := &lt;string-to-byte array conversion algorithm implementation&gt;\nSHA256 := &lt;SHA256 hashing algorithm implementation&gt;\nRSA_SIGN := &lt;RSA signing algorithm implementation&gt;\n\nCRYPTO_PROOF = RSA_SIGN(SHA256(NFC(DATA_TO_SIGN)))\n</code></pre>"},{"location":"Features/CryptoRequest/#error","title":"Error","text":"<p>The execution of a service with an invalid <code>cryptoProof</code> generates the error <code>InvalidCryptoProof</code>. The possible causes of this error are:</p> <ul> <li>The <code>cryptoProof</code> was signed with an incorrect private key.</li> <li>The plain message does not match the service-specific format.</li> <li>The algorithm for generating the crypto proof was not followed correctly (check the generation algorithm above).</li> </ul>"},{"location":"Features/Errors/","title":"Common errors","text":"<p>List of common errors that can be returned by any service:</p> <ul> <li><code>OnNetwork</code>: there is no internet connection or the base url provided as configuration is wrong.</li> <li><code>OutdatedSdk</code>: this Conio SDK version can no longer be used, you need to update it to a newer version.</li> <li><code>Unauthorized</code>: the service launched requires authentication, but there is no valid session.</li> <li><code>UnderMaintenance</code>: the Conio services are under maintenance.</li> <li><code>Unknown</code>: an unexpected error.</li> </ul>"},{"location":"Features/ActivitiesService/FetchActivities/","title":"Fetch Activities","text":""},{"location":"Features/ActivitiesService/FetchActivities/#overview","title":"Overview","text":"<p><code>fetchActivities</code> API is used to retrieve the paginated list of Wallet activities. It allows client to filter activity by cryptocurrency, the type of activities and timeframe.</p>"},{"location":"Features/ActivitiesService/FetchActivities/#params","title":"Params","text":"<p>The <code>FetchActivitiesParams</code> used to initialize and perform <code>fetchActivities</code> API.</p> <ul> <li>crypto id: filter to retrieve only activities of a specific crypto currency</li> <li>activities types: filter to retrieve only specific activities types</li> <li>time frame: filter to retrieve activities created in a specific time frame</li> <li>pagination limit: the maximum activities number to fetch</li> <li>page: identifier of a specific activity page</li> </ul>"},{"location":"Features/ActivitiesService/FetchActivities/#result","title":"Result","text":"<p>The <code>ActivitiesResult</code> contains the list of activities and an identifier to fetch the next page.</p> <ul> <li>activities: the Wallet activities matching the information specified in params</li> <li>next page: the identifier of the next activities page, that can be used to call again <code>fetchActivities</code> with the same filters to retrive more activities.</li> </ul>"},{"location":"Features/ActivitiesService/FetchActivities/#code","title":"Code","text":""},{"location":"Features/ActivitiesService/FetchActivities/#ios","title":"iOS","text":"<pre><code>let params = FetchActivitiesParams\n    .makeUsingAllActivityTypes(\n        cryptoId: \"cETH\",\n        timeFrame: .makeUsingLasYear(),\n        paginationLimit: 6\n    )\n\nactivitiesService\n    .fetchActivities(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/ActivitiesService/FetchActivities/#android","title":"Android","text":"<pre><code>import kotlin.time.Duration.Companion.days\n\nval params = FetchActivitiesParams(\n    cryptoId = \"cETH\",\n    timeFrame = TimeFrame(\n        fromTimeInMillis = TimeFrame.now() - 365.days.inWholeMilliseconds\n    ),\n    paginationLimit = 6\n)\n\nconio.activityService\n    .fetchActivities(params)\n    .asFlow()\n    .collect {\n        // ...\n    }\n</code></pre>"},{"location":"Features/ActivitiesService/FetchActivity/","title":"Fetch Activity","text":""},{"location":"Features/ActivitiesService/FetchActivity/#overview","title":"Overview","text":"<p><code>fetchActivity</code> API fetches a specific Wallet activity. It allows client to specify an activity identifier to query and retrieve the related activity.</p>"},{"location":"Features/ActivitiesService/FetchActivity/#params","title":"Params","text":"<p>The <code>FetchActivityParams</code> used to initialize and perform <code>fetchActivity</code> API.</p> <ul> <li>activity id: the activity unique identifier</li> </ul>"},{"location":"Features/ActivitiesService/FetchActivity/#result","title":"Result","text":"<p>The <code>ActivityResult</code> contains.</p> <ul> <li>activity: the Wallet activity related to the identifier specified in params</li> </ul>"},{"location":"Features/ActivitiesService/FetchActivity/#code","title":"Code","text":""},{"location":"Features/ActivitiesService/FetchActivity/#ios","title":"iOS","text":"<pre><code>let params = FetchActivityParams.make(activityId: ...)\n\nactivitiesService\n    .fetchActivities(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/ActivitiesService/FetchActivity/#android","title":"Android","text":"<pre><code>val params = FetchActivityParams(\n    activityId = \"...\"\n)\n\nconio.activityService\n    .fetchActivity(params)\n    .asFlow()\n    .collect {\n        // ...\n    }\n</code></pre>"},{"location":"Features/BtcTransactionManagementService/FetchAddress/","title":"Fetch Address","text":""},{"location":"Features/BtcTransactionManagementService/FetchAddress/#overview","title":"Overview","text":"<p><code>fetchAddress</code> API is used to retrieve the BTC wallet address. It allows client to fetch the BTC Wallet address and URI data.</p>"},{"location":"Features/BtcTransactionManagementService/FetchAddress/#result","title":"Result","text":"<p>The <code>BtcAddressResult</code> BTC wallet address data.</p> <ul> <li>address: the alphanumeric unique BTC wallet address</li> <li>uri: the Uniform Resource Identifier used to facilitate payments as per BIP-21</li> </ul>"},{"location":"Features/BtcTransactionManagementService/FetchAddress/#code","title":"Code","text":""},{"location":"Features/BtcTransactionManagementService/FetchAddress/#ios","title":"iOS","text":"<pre><code>btcTransactionManagementService\n    .fetchAddress()\n    .asPublisher\n    .sink { result in \n        // ...\n    }\n</code></pre>"},{"location":"Features/BtcTransactionManagementService/FetchAddress/#android","title":"Android","text":"<pre><code>conio.btcTransactionService\n    .fetchAddress()\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/","title":"Fetch Speed Up Available Fees","text":""},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#overview","title":"Overview","text":"<p><code>fetchSpeedUpAvailableFees</code> API fetches the available speed up fees for accelerating a BTC transaction. It allows client to obtain fee information based on the transaction hash identifier for which it wants to accelerate.</p>"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#params","title":"Params","text":"<p>The <code>FetchSpeedUpAvailableFeesParams</code> used to initialize and perform <code>fetchSpeedUpAvailableFees</code> API.</p> <ul> <li>transaction hash: the transaction hash to use for retrieving available speed up fees</li> </ul>"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#result","title":"Result","text":"<p>The <code>BtcSpeedUpFeesResult</code> BTC available speed up fees data.</p> <ul> <li>available fees: the speedup available fees list with details</li> <li>transaction mempool status: the actual mempool status compared to the transaction</li> </ul>"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#code","title":"Code","text":""},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#ios","title":"iOS","text":"<pre><code>let params = FetchSpeedUpAvailableFeesParams.make(transactionHash: ...)\n\nbtcTransactionManagementService\n    .fetchSpeedUpAvailableFees(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#android","title":"Android","text":"<pre><code>val params = FetchSpeedUpAvailableFeesParams(\n    transactionHash = \"...\",\n)\n\nconio.btcTransactionService\n    .fetchSpeedUpAvailableFees(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/","title":"Fetch Transaction Available Fees","text":""},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#overview","title":"Overview","text":"<p><code>fetchTransactionAvailableFees</code> API fetches the BTC available transaction fees. It allows client to obtain fee information based on the transaction crypto amount, transaction speed type and recipient wallet address.</p>"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#params","title":"Params","text":"<p>The <code>FetchTransactionAvailableFeesParams</code> used to initialized and perform <code>fetchTransactionAvailableFees</code> API.</p> <ul> <li>btc amount: the transaction BTC crypto amount. It can be a specific amount or the whole wallet spendable balance</li> <li>transaction speeds: the transaction speeds types use to retrieve available fees</li> <li>destination address: the BTC recipient wallet address</li> </ul>"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#result","title":"Result","text":"<p>The <code>BtcTransactionFeesResult</code> BTC available transaction fees data.</p> <ul> <li>available fees: the transaction available fees list with details</li> </ul>"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#code","title":"Code","text":""},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#ios","title":"iOS","text":"<pre><code>let params = FetchTransactionAvailableFeesParams\n    .makeForAllSpeeds(\n        destinationAddress: ...,\n        amount: .cryptoAmount(value: ...)\n    )\n\nbtcTransactionManagementService\n    .fetchTransactionAvailableFees(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#android","title":"Android","text":"<pre><code>// val amount = AmountParams.Max\nval amount = AmountParams.Crypto(\n    value = CryptoAmount(...)\n)\n\n// val speeds = TransactionSpeed.Type.all\nval speeds = setOf(\n    TransactionSpeed.Type.SpeedOne,  // Fastest\n    TransactionSpeed.Type.SpeedFive, // Slowest\n    ...\n)\n\nval params = FetchTransactionAvailableFeesParams(\n    destinationAddress = \"...\",\n    btcAmount = amount,\n    transactionSpeeds = speeds,\n)\n\nconio.btcTransactionService\n    .fetchTransactionAvailableFees(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/","title":"Send Bitcoin","text":""},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#overview","title":"Overview","text":"<p><code>send</code> API is used to send Bitcoin to a recipient. It allows client to send Bitcoin to a recipient based on the wallet destination address, the BTC amount to send and the fee per byte to be paid for the transaction.</p>"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#params","title":"Params","text":"<p>The <code>SendParams</code> used to initialized and perform <code>send</code> API.</p> <ul> <li>destination address: the recipient BTC wallet address</li> <li>btc amount: the BTC amount to send. It can be a specific amount or the whole wallet spendable balance</li> <li>fee per byte: the fee per byte to be paid for the send transaction</li> </ul>"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#result","title":"Result","text":"<p>The <code>SendTransactionResult</code> executed BTC send transaction data.</p> <ul> <li>hash: the transaction hash identifier</li> <li>activity id: the Conio services transaction activity identifier</li> </ul>"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#code","title":"Code","text":""},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#ios","title":"iOS","text":"<pre><code>let params = SendParams\n    .makeSendingExactAmount(\n        cryptoAmountValue: ...,\n        destinationAddress: ...,\n        feePerByte: ...\n    )\nbtcTransactionManagementService\n    .send(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#android","title":"Android","text":"<pre><code>// val amount = AmountParams.Max\nval amount = AmountParams.Crypto(\n    value = CryptoAmount(...)\n)\n\nval params = SendParams(\n    destinationAddress = \"...\",\n    btcAmount = amount,\n    feePerByte = CryptoAmount(...)\n)\n\nconio.btcTransactionService\n    .send(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/","title":"Speed Up Transaction","text":""},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#overview","title":"Overview","text":"<p><code>speedUp</code> API is used to accelerate a pending Bitcoin transaction by increasing its fees. It allows client to speed up the transaction based on the transaction hash identifier and the new fee per byte to be paid for the transaction.</p>"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#params","title":"Params","text":"<p>The <code>SpeedUpParams</code> used to initialized and perform <code>speedUp</code> API.</p> <ul> <li>transaction hash: the transaction hash to use for submit speed up</li> <li>fee per byte: the new fee per byte to be paid for submit speed up</li> </ul>"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#result","title":"Result","text":"<p>The <code>SpeededUpTransactionResult</code> speeded up BTC transaction data.</p> <ul> <li>hash: the transaction hash identifier</li> <li>activity id: the Conio services transaction activity identifier</li> </ul>"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#code","title":"Code","text":""},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#ios","title":"iOS","text":"<pre><code>let params = SpeedUpParams\n    .make(\n        transactionHash: ...,\n        feePerByte: ...\n    )\nbtcTransactionManagementService\n    .speedUp(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#android","title":"Android","text":"<pre><code>val params = SpeedUpParams(\n    transactionHash = \"...\",\n    feePerByte = CryptoAmount(...)\n)\n\nconio.btcTransactionService\n    .speedUp(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/SwapService/CreateSwap/","title":"Create Swap","text":""},{"location":"Features/SwapService/CreateSwap/#overview","title":"Overview","text":"<p><code>createSwap</code> API is used to create swap quotation details between two specified cryptocurrencies. It allows client to specify the source cryptocurrency, the destination cryptocurrency and the source cryptocurrency amount to exchange.</p>"},{"location":"Features/SwapService/CreateSwap/#params","title":"Params","text":"<p>The <code>CreateSwapParams</code> used to initialized and perform <code>createSwap</code> API.</p> <ul> <li>source crypto id: the source cryptocurrency identifier used to create the swap operation</li> <li>destination crypto id: the destination cryptocurrency identifier used to create the swap operation</li> <li>source amount: the source cryptocurrency amount used to create the swap</li> </ul>"},{"location":"Features/SwapService/CreateSwap/#result","title":"Result","text":"<ul> <li>Swap Result</li> </ul>"},{"location":"Features/SwapService/CreateSwap/#code","title":"Code","text":""},{"location":"Features/SwapService/CreateSwap/#ios","title":"iOS","text":"<pre><code>let params = CreateSwapParams\n    .make(\n        sourceCryptoId: \"cBTC\",\n        destinationCryptoId: \"cETH\",\n        sourceCryptoAmount: .max\n    )\n\nswapService\n    .createSwap(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/SwapService/CreateSwap/#android","title":"Android","text":"<pre><code>// val amount = AmountParams.Max\nval amount = AmountParams.Crypto(\n    value = CryptoAmount(...)\n)\n\nval params = CreateSwapParams(\n    sourceCryptoId = \"...\",\n    destinationCryptoId = \"...\",\n    sourceAmount = amount\n)\n\nconio.swapService\n    .createSwap(params)\n    .asFlow()\n    .collect {\n        // ...\n    }\n</code></pre>"},{"location":"Features/SwapService/FetchSwap/","title":"Fetch Swap","text":""},{"location":"Features/SwapService/FetchSwap/#overview","title":"Overview","text":"<p><code>fetchSwap</code> API is used to retrieve information about a specific swap. It allows client to specify the swap identifier to fetch the specific swap quotation with information such as the source cryptocurrency, source cryptocurrency amount, destination cryptocurrency, fiat amount and fees.</p>"},{"location":"Features/SwapService/FetchSwap/#params","title":"Params","text":"<p>The <code>FetchSwapParams</code> used to initialized and perform <code>fetchSwap</code> API.</p> <ul> <li>swap id: the existing swap identifier used to retrieve the specific swap quotation</li> </ul>"},{"location":"Features/SwapService/FetchSwap/#result","title":"Result","text":"<ul> <li>Swap Result</li> </ul>"},{"location":"Features/SwapService/FetchSwap/#code","title":"Code","text":""},{"location":"Features/SwapService/FetchSwap/#ios","title":"iOS","text":"<pre><code>let params = FetchSwapParams.make(swapId: ...) \n\nswapService\n    .fetchSwap(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/SwapService/FetchSwap/#android","title":"Android","text":"<pre><code>val params = FetchSwapParams(\n    swapId = \"...\"\n)\n\nconio.swapService\n    .fetchSwap(params)\n    .asFlow()\n    .collect {\n        // ...\n    }\n</code></pre>"},{"location":"Features/SwapService/Swap/","title":"Swap","text":""},{"location":"Features/SwapService/Swap/#overview","title":"Overview","text":"<p><code>swap</code> API is used to execute and finalize the exchange between two specified cryptocurrencies based on a specified swap quotation and crypto signature request. It allows client to specify the swap identifier and the signature request to execute and finalize swap operation.</p>"},{"location":"Features/SwapService/Swap/#params","title":"Params","text":"<p>The <code>SwapParams</code> used to initialized and perform <code>swap</code> API.</p> <ul> <li>swap id: the existing swap quotation identifier used to execute and finalize the swap operation</li> <li>crypto request: the crypto signature used to validate the swap operation</li> <li>wait until paid: prevent the service to complete until the swap is not in <code>paid</code> status (or in another end status, like <code>finalized</code> or <code>error</code>)</li> </ul>"},{"location":"Features/SwapService/Swap/#result","title":"Result","text":"<p>The SwapResult with the updated <code>status</code>. If the <code>status</code> is different from <code>paid</code> or <code>finalized</code>, the transaction can still end with an error (use the Fetch Swap service to keep checking the status).</p>"},{"location":"Features/SwapService/Swap/#code","title":"Code","text":""},{"location":"Features/SwapService/Swap/#ios","title":"iOS","text":"<pre><code>let cryptoRequest = SwapParams.CryptoRequest\n    .make(\n        proofId: ...,\n        expiration: ...,\n        cryptoProof: ...\n    )      \n\nlet params = SwapParams\n    .make(\n        swapId: ...,\n        cryptoRequest: cryptoRequest\n    )\n\nswapService\n    .swap(with: params)\n    .asPublisher()\n    .sink { result in\n        // ..,\n    }\n</code></pre>"},{"location":"Features/SwapService/Swap/#android","title":"Android","text":"<pre><code>val cryptoRequest = SwapCryptoRequest(\n    cryptoProof = ...,\n    proofId = ...,\n    expiration = ...,\n)\n\nval params = SwapParams(\n    swapId = \"...\",\n    cryptoRequest = cryptoRequest\n)\n\nconio.swapService\n    .swap(params)\n    .asFlow()\n    .collect {\n        // ...\n    }\n</code></pre>"},{"location":"Features/SwapService/SwapResult/","title":"Swap Result","text":""},{"location":"Features/SwapService/SwapResult/#overview","title":"Overview","text":"<p>The <code>SwapResult</code> quotation with updated data used execute a swap operation.</p>"},{"location":"Features/SwapService/SwapResult/#properties","title":"Properties","text":"<ul> <li>swap id: the swap unique identifier</li> <li>source cryptocurrency: the swap source <code>Cryptocurrency</code></li> <li>destination cryptocurrency: the swap destination <code>Cryptocurrency</code></li> <li>status: the swap updated operation status</li> <li>fiat amount: the swap updated fiat amount</li> <li>source crypto amount: the swap updated source crypto amount</li> <li>destination crypto amount: the swap updated destination crypto amount</li> <li>source service fees: the updated Conio service fee applied to the swap quotation</li> <li>source mining fees: the update blockchain mining fees applied to the swap quotation</li> <li>source cryptocurrency exchange rate: the swap source cryptocurrency current exchange rate</li> <li>destination cryptocurrency exchange rate: the swap destination cryptocurrency current exchange rate</li> </ul>"},{"location":"Features/SwapService/UpdateSwap/","title":"Update Swap","text":""},{"location":"Features/SwapService/UpdateSwap/#overview","title":"Overview","text":"<p><code>updateSwap</code> API is used to update an existing swap quotation for exchange two specified cryptocurrencies. It allows client to specify the new source crypto amount it is willing to update the swap quotation given its identifier.</p>"},{"location":"Features/SwapService/UpdateSwap/#params","title":"Params","text":"<p>The <code>UpdateSwapParams</code> used to initialized and perform <code>updateSwap</code> API.</p> <ul> <li>swap id: the existing swap identifier used to update the selected swap quotation</li> <li>source amount: the new swap source crypto amount used to update the selected swap quotation</li> </ul>"},{"location":"Features/SwapService/UpdateSwap/#result","title":"Result","text":"<ul> <li>Swap Result</li> </ul>"},{"location":"Features/SwapService/UpdateSwap/#code","title":"Code","text":""},{"location":"Features/SwapService/UpdateSwap/#ios","title":"iOS","text":"<pre><code>let params = UpdateSwapParams\n    .make(\n        swapId: ..., \n        newSourceAmount: ...\n    )\n\nswapService\n    .updateSwap(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/SwapService/UpdateSwap/#android","title":"Android","text":"<pre><code>// val amount = AmountParams.Max\nval amount = AmountParams.Crypto(\n    value = CryptoAmount(...)\n)\n\nval params = UpdateSwapParams(\n    swapId = \"...\",\n    sourceAmount = amount\n)\n\nconio.swapService\n    .updateSwap(params)\n    .asFlow()\n    .collect {\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingBuyService/BidResult/","title":"Bid Result","text":""},{"location":"Features/TradingBuyService/BidResult/#overview","title":"Overview","text":"<p>The <code>BidResult</code> purchase quotation with updated data used to execute a purchase operation.</p>"},{"location":"Features/TradingBuyService/BidResult/#properties","title":"Properties","text":"<ul> <li>bid id: the bid unique identifier</li> <li>status: the updated bid status</li> <li>purchased fiat amount: the bid updated purchased fiat amount</li> <li>purchased amount: the bid updated purchased crypto amount</li> <li>amount to pay: the bid updated amount to pay with fees</li> <li>service fees: the updated service fees applied to the bid</li> </ul>"},{"location":"Features/TradingBuyService/Buy/","title":"Buy","text":""},{"location":"Features/TradingBuyService/Buy/#overview","title":"Overview","text":"<p><code>buy</code> API is used to execute the cryptocurrency purchase based on a specified bid quotation and crypto signature request. It allows client to specify the bid identifier and the signature request to execute and finalize purchase operation.</p>"},{"location":"Features/TradingBuyService/Buy/#params","title":"Params","text":"<p>The <code>BuyParams</code> used to initialized and perform <code>buy</code> API.</p> <ul> <li>bid id: the existing bid identifier used to execute and finalize the purchase operation</li> <li>crypto request: the crypto signature used to validate the purchase operation</li> </ul>"},{"location":"Features/TradingBuyService/Buy/#result","title":"Result","text":"<p>Success or error.</p>"},{"location":"Features/TradingBuyService/Buy/#code","title":"Code","text":""},{"location":"Features/TradingBuyService/Buy/#ios","title":"iOS","text":"<pre><code>let cryptoRequest = BuyParams.CryptoRequest\n    .make(\n        proofId: ...,\n        expiration: ...,\n        cryptoProof: ...\n    )      \n\nlet params = BuyParams\n    .make(\n        bidId: ...,\n        cryptoRequest: cryptoRequest\n    )\n\ntradingBuyService\n    .buy(with: params)\n    .asPublisher()\n    .sink { result in\n        // ..,\n    }\n</code></pre>"},{"location":"Features/TradingBuyService/Buy/#android","title":"Android","text":"<pre><code>val cryptoRequest = BidCryptoRequest(\n    cryptoProof = ...,\n    proofId = ...,\n    expiration = ...,\n)\n\nval params = BuyParams(\n    bidId = \"...\",\n    cryptoRequest = cryptoRequest\n)\n\nconio.buyService\n    .buy(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingBuyService/CreateBid/","title":"Create Bid","text":""},{"location":"Features/TradingBuyService/CreateBid/#overview","title":"Overview","text":"<p><code>createBid</code> API is used to create a bid for purchasing a cryptocurrency. It allows client to specify either the amount as crypto amount or fiat amount it is willing to create the bid.</p>"},{"location":"Features/TradingBuyService/CreateBid/#params","title":"Params","text":"<p>The <code>CreateBidParams</code> used to initialized and perform <code>createBid</code> API.</p> <ul> <li>crypto id: the cryptocurrency identifier used to create the bid quotation</li> <li>fiat currency: the bid fiat currency</li> <li>amount: the bid amount intended either as fiat amount or cryptocurrency amount</li> </ul>"},{"location":"Features/TradingBuyService/CreateBid/#result","title":"Result","text":"<ul> <li>BidResult</li> </ul>"},{"location":"Features/TradingBuyService/CreateBid/#code","title":"Code","text":""},{"location":"Features/TradingBuyService/CreateBid/#ios","title":"iOS","text":"<pre><code>let params = CreateBidParams.makeBTC(amount: ...)\n\ntradingBuyService\n    .createBid(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingBuyService/CreateBid/#android","title":"Android","text":"<pre><code>// val amount = AmountParams.Max\nval amount = AmountParams.Crypto(\n    value = CryptoAmount(...)\n)\n\nval params = CreateBidParams(\n    cryptoId = \"...\",\n    amount = amount\n)\n\nconio.buyService\n    .createBid(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingBuyService/FetchBid/","title":"Fetch Bid","text":""},{"location":"Features/TradingBuyService/FetchBid/#overview","title":"Overview","text":"<p><code>fetchBid</code> API is used to retrieve information about a specific cryptocurrency bid. It allows client to specify the bid identifier to fetch the specific purchase quotation with information such as crypto amount and fiat amount.</p>"},{"location":"Features/TradingBuyService/FetchBid/#params","title":"Params","text":"<p>The <code>FetchBidParams</code> used to initialize and perform <code>fetchBid</code> API.</p> <ul> <li>bid id: the existing bid identifier used to retrieve the specific bid quotation</li> </ul>"},{"location":"Features/TradingBuyService/FetchBid/#result","title":"Result","text":"<ul> <li>BidResult</li> </ul>"},{"location":"Features/TradingBuyService/FetchBid/#code","title":"Code","text":""},{"location":"Features/TradingBuyService/FetchBid/#ios","title":"iOS","text":"<pre><code>let params = FatchBidParams.make(bidId: ...)\n\ntradingBuyService\n    .fetchBid(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingBuyService/FetchBid/#android","title":"Android","text":"<pre><code>val params = FetchBidParams(\n    bidId = \"...\"\n)\n\nconio.buyService\n    .fetchBid(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingBuyService/UpdateBid/","title":"Update Bid","text":""},{"location":"Features/TradingBuyService/UpdateBid/#overview","title":"Overview","text":"<p><code>updateBid</code> API is used to update an existing bid for purchasing a cryptocurrency. It allows client to specify either the amount as crypto amount or fiat amount it is willing to update the bid, given its identifier.</p>"},{"location":"Features/TradingBuyService/UpdateBid/#params","title":"Params","text":"<p>The <code>UpdateBidParams</code> used to initialized and perform <code>updateBid</code> API.</p> <ul> <li>bid id: the existing bid identifier used to update the selected bid</li> <li>new amount: the new bid amount intended either as fiat amount or cryptocurrency amount</li> </ul>"},{"location":"Features/TradingBuyService/UpdateBid/#result","title":"Result","text":"<ul> <li>BidResult</li> </ul>"},{"location":"Features/TradingBuyService/UpdateBid/#code","title":"Code","text":""},{"location":"Features/TradingBuyService/UpdateBid/#ios","title":"iOS","text":"<pre><code>let params = UpdateBidParams\n    .make(\n        bidId: ..., \n        newAmount: ...\n    )\ntradingBuyService\n    .updateBid(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingBuyService/UpdateBid/#android","title":"Android","text":"<pre><code>// val amount = AmountParams.Max\nval amount = AmountParams.Crypto(\n    value = CryptoAmount(...)\n)\n\nval params = UpdateBidParams(\n    bidId = \"...\",\n    newAmount = amount\n)\n\nconio.buyService\n    .updateBid(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingInfoService/FetchTradingFees/","title":"Fetch Trading Fees","text":""},{"location":"Features/TradingInfoService/FetchTradingFees/#overview","title":"Overview","text":"<p><code>fetchTradingFees</code> API is used to retrieve the trading fees linked to Conio user. It allows client to fetch the trading fees involved in the Conio user trading operations.</p>"},{"location":"Features/TradingInfoService/FetchTradingFees/#result","title":"Result","text":"<p>The <code>TradingFeesResult</code> trading fees involved in the Conio user trading operations.</p> <ul> <li>buy service fees: the buy trading fees list</li> <li>sell service fees: the sell trading fees list</li> <li>swap service fees: the swap trading fees list</li> <li>transfer service fees: the transfer trading fees list</li> </ul>"},{"location":"Features/TradingInfoService/FetchTradingFees/#code","title":"Code","text":""},{"location":"Features/TradingInfoService/FetchTradingFees/#ios","title":"iOS","text":"<pre><code>tradingInfoService\n    .fetchTradingFees()\n    .asPublisher()\n    .sink { result in \n        ...\n    }\n</code></pre>"},{"location":"Features/TradingInfoService/FetchTradingFees/#android","title":"Android","text":"<pre><code>conio.tradingInfoService\n    .fetchTradingFees()\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingInfoService/FetchTradingLimits/","title":"Fetch Trading Limits","text":""},{"location":"Features/TradingInfoService/FetchTradingLimits/#overview","title":"Overview","text":"<p><code>fetchTradingLimits</code> API is used to retrieve the trading limits linked to Conio user. It allows client to fetch the trading limits involved in the Conio user trading operations.</p>"},{"location":"Features/TradingInfoService/FetchTradingLimits/#parameters","title":"Parameters","text":"<p>The <code>FetchTradingLimitsParams</code> used to initialized and perform <code>fetchTradingLimits</code> API.</p> <ul> <li>fiat currency: The fiat currency used to fetch trading limits</li> </ul>"},{"location":"Features/TradingInfoService/FetchTradingLimits/#result","title":"Result","text":"<p>The <code>TradingLimitsResult</code> trading limits info involved in the Conio user trading operations.</p> <ul> <li>sell limits: the crypto trading sell limits</li> <li>buy limits: the crypto trading buy limits</li> </ul>"},{"location":"Features/TradingInfoService/FetchTradingLimits/#code","title":"Code","text":""},{"location":"Features/TradingInfoService/FetchTradingLimits/#ios","title":"iOS","text":"<pre><code>let params = FetchTradingLimitsParams.make()\n\ntradingInfoService\n    .fetchTradingLimits(with: params)\n    .asPublisher()\n    .sink { result in \n        ...\n    }\n</code></pre>"},{"location":"Features/TradingInfoService/FetchTradingLimits/#android","title":"Android","text":"<pre><code>conio.tradingInfoService\n    .fetchTradingLimits()\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingInfoService/FetchTradingReport/","title":"Fetch Trading Report","text":""},{"location":"Features/TradingInfoService/FetchTradingReport/#overview","title":"Overview","text":"<p><code>fetchTradingReport</code> API is used to retrieve the trading financial report linked to Conio user. It allows client to either specify the exact year or the last year trading effective time to fetch the trading report involved in the Conio user trading operations.</p>"},{"location":"Features/TradingInfoService/FetchTradingReport/#parameters","title":"Parameters","text":"<p>The <code>FetchTradingReportParams</code> used to initialized and perform <code>fetchTradingReport</code> API.</p> <ul> <li>period: the trading report period of time either as exact year or last year</li> </ul>"},{"location":"Features/TradingInfoService/FetchTradingReport/#result","title":"Result","text":"<p>The <code>TradingReportResult</code> trading report info involved in the Conio user trading operations.</p> <ul> <li>pdf: the trading report in PDF format</li> </ul>"},{"location":"Features/TradingInfoService/FetchTradingReport/#code","title":"Code","text":""},{"location":"Features/TradingInfoService/FetchTradingReport/#ios","title":"iOS","text":"<pre><code>let params = FetchTradingReportParams.make(period: .lastYear)\n\ntradingInfoService\n    .fetchTradingReport(with: params)\n    .asPublisher()\n    .sink { result in \n        ...\n    }\n</code></pre>"},{"location":"Features/TradingInfoService/FetchTradingReport/#android","title":"Android","text":"<pre><code>// val reportPeriod = FetchTradingReportParams.ReportPeriod.LastYear\nval reportPeriod = FetchTradingReportParams.ReportPeriod(\"2023\")\n\nval params = FetchTradingReportParams(\n    period = reportPeriod\n)\n\nconio.tradingInfoService\n    .fetchTradingReport(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingInfoService/FetchTradingSummary/","title":"Fetch Trading Summary","text":""},{"location":"Features/TradingInfoService/FetchTradingSummary/#overview","title":"Overview","text":"<p><code>fetchTradingSummary</code> API is used to retrieve the trading stats and info linked to Conio user. It allows client to fetch the trading info involved in the Conio user trading operations.</p>"},{"location":"Features/TradingInfoService/FetchTradingSummary/#parameters","title":"Parameters","text":"<p>The <code>FetchTradingSummaryParams</code> used to initialized and perform <code>fetchTradingSummary</code> API.</p> <ul> <li>fiat currency: The fiat currency used to fetch trading limits</li> </ul>"},{"location":"Features/TradingInfoService/FetchTradingSummary/#result","title":"Result","text":"<p>The <code>TradingSummaryResult</code> trading stats and info involved in the Conio user trading operations.</p> <ul> <li>buy info: the trading buy stats</li> <li>sell info: the trading sell stats</li> </ul>"},{"location":"Features/TradingInfoService/FetchTradingSummary/#code","title":"Code","text":""},{"location":"Features/TradingInfoService/FetchTradingSummary/#ios","title":"iOS","text":"<pre><code>let params = FetchTradingSummaryParams.make()\n\ntradingInfoService\n    .fetchTradingSummary(with: params)\n    .asPublisher()\n    .sink { result in \n        ...\n    }\n</code></pre>"},{"location":"Features/TradingInfoService/FetchTradingSummary/#android","title":"Android","text":"<pre><code>conio.tradingInfoService\n    .fetchTradingSummary()\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingPriceService/FetchAllPrices/","title":"Fetch All Prices","text":""},{"location":"Features/TradingPriceService/FetchAllPrices/#overview","title":"Overview","text":"<p><code>fetchAllUnitPrices</code> API is used to retrieve information about all tradable cryptocurrencies current unit prices values.</p>"},{"location":"Features/TradingPriceService/FetchAllPrices/#params","title":"Params","text":"<p>The <code>FetchAllUnitPricesParams</code> used to initialized and perform <code>fetchAllUnitPrices</code> API.</p> <ul> <li>fiat currency: the fiat currency used to fetch the pricing information</li> </ul>"},{"location":"Features/TradingPriceService/FetchAllPrices/#result","title":"Result","text":"<p>The <code>UnitPricesResult</code> data with all tradable cryptocurrencies current unit prices values.</p> <ul> <li>current prices: the current unit prices data and values <code>CurrentPrice</code> list</li> </ul>"},{"location":"Features/TradingPriceService/FetchAllPrices/#code","title":"Code","text":""},{"location":"Features/TradingPriceService/FetchAllPrices/#ios","title":"iOS","text":"<pre><code>let params = FetchAllUnitPricesParams.makeEuro()\n\ntradingPriceService\n    .fetchAllUnitPrices(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingPriceService/FetchAllPrices/#android","title":"Android","text":"<pre><code>conio.tradingPriceService\n    .fetchAllUnitPrices()\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/","title":"Fetch Historical Prices","text":""},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#overview","title":"Overview","text":"<p><code>fetchHistoricalPrices</code> API is used to retrieve information about a specific cryptocurrency past time interval price value. It allows client to specify the cryptocurrency, the time frame and the time interval to fetch the cryptocurrency historical price points, analytics and time interval.</p>"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#params","title":"Params","text":"<p>The <code>FetchHistoricalPricesParams</code> used to initialized and perform <code>fetchHistoricalPrices</code> API.</p> <ul> <li>crypto id: the cryptocurrency identifier used to retrieve the specific cryptocurrency historical price data</li> <li>time frame: the available time frames used to retrieve the specific cryptocurrency historical price data</li> <li>fiat currency: the fiat currency used to retrieve historical price data</li> </ul>"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#result","title":"Result","text":"<p>The <code>HistoricalPricesResult</code> data with cryptocurrency historical prices values. </p> <ul> <li>cryptocurrency: the Wallet <code>Cryptocurrency</code></li> <li>price points: the cryptocurrency historical price points</li> <li>price analytics: the cryptocurrency historical analytics</li> </ul>"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#code","title":"Code","text":""},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#ios","title":"iOS","text":"<pre><code>let params = FetchHistoricalPricesParams\n    .make(\n        cryptoId: ...,\n        timeFrame: .max,\n    )\n\ntradingPriceService\n    .fetchHistoricalPrices(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#android","title":"Android","text":"<pre><code>val timeFrame = FetchHistoricalPricesParams.TimeFrame.Max\n\nval params = FetchHistoricalPricesParams(\n    cryptoId = ...,\n    timeFrame = timeFrame,\n)\n\nconio.tradingPriceService\n    .fetchHistoricalPrices(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingPriceService/FetchPrice/","title":"Fetch Price","text":""},{"location":"Features/TradingPriceService/FetchPrice/#overview","title":"Overview","text":"<p><code>fetchPrice</code> API is used to retrieve information about a specific cryptocurrency current price value. It allows client to specify either the cryptocurrency current unit price or a specific cryptocurrency amount to fetch the current buy, sell and raw prices values.</p>"},{"location":"Features/TradingPriceService/FetchPrice/#params","title":"Params","text":"<p>The <code>FetchPriceParams</code> used to initialized and perform <code>fetchPrice</code> API.</p> <ul> <li>crypto id: the cryptocurrency unique identifier used to fetch the current price</li> <li>type: the price type intended either as cryptocurrency current unit price or current price for a specific cryptocurrency amount</li> </ul>"},{"location":"Features/TradingPriceService/FetchPrice/#result","title":"Result","text":"<p>The <code>PriceResult</code> data with cryptocurrency current price values. </p> <ul> <li>current price: the current price data and values <code>CurrentPrice</code></li> </ul>"},{"location":"Features/TradingPriceService/FetchPrice/#code","title":"Code","text":""},{"location":"Features/TradingPriceService/FetchPrice/#ios","title":"iOS","text":"<pre><code>let params = FetchPriceParams.makeUnitCurrenPrice(cryptoId: \"cADA\")\n\ntradingPriceService\n    .fetchPrice(params: params)\n    .asPublisher()\n    .sink { result in \n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingPriceService/FetchPrice/#android","title":"Android","text":"<pre><code>val params = FetchPriceParams(\n    cryptoId = ...,\n    amount = CryptoAmount(...), // default null\n)\n\nconio.tradingPriceService\n    .fetchPrice(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/","title":"Fetch Tradable Crypto Metadata","text":""},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#overview","title":"Overview","text":"<p><code>fetchTradableCryptoMetadata</code> API is used to retrieve metadata about all tradable cryptocurrencies. It allows client to fetch the tradable cryptocurrencies metadata with information such as cryptocurrency short name, image, symbol, slug, supply, market data and more.</p>"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#params","title":"Params","text":"<p>The <code>FetchTradableCryptoMetadataParams</code> used to initialize and perform <code>fetchTradableCryptoMetadata</code> API.</p> <ul> <li>language code: The ISO language code and ISO country code (language_COUNTRY) used to retrieve tradable cryptocurrencies descriptions</li> </ul>"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#result","title":"Result","text":"<p>The <code>TradableCryptoMetadataResult</code> data with all tradable cryptocurrencies metadata.</p> <ul> <li>metadata: the tradable cryptocurrencies <code>CryptoCurrencyMetadata</code> list</li> </ul>"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#code","title":"Code","text":""},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#ios","title":"iOS","text":"<pre><code>let params = FetchTradableCryptoMetadataParams.makeItalian()\n\ntradingPriceService\n    .fetchTradableCryptoMetadata()\n    .asPublisher()\n    .sink { result in \n        // ...\n    }\n\n</code></pre>"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#android","title":"Android","text":"<pre><code>// val language = Language.Italian\nval language = Language.English\n\nval params = FetchCryptoCurrenciesMetadataParams(\n    language = language\n)\n\nconio.tradingPriceService\n    .fetchCryptoCurrenciesMetadata(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingSellService/AskResult/","title":"Ask Result","text":""},{"location":"Features/TradingSellService/AskResult/#overview","title":"Overview","text":"<p>The <code>AskResult</code> selling quotation with updated data used execute a sell operation.</p>"},{"location":"Features/TradingSellService/AskResult/#properties","title":"Properties","text":"<ul> <li>ask id: the ask unique identifier</li> <li>status: the updated ask status</li> <li>sold fiat amount: the ask updated sold net fiat amount</li> <li>amount to withdraw: the updated ask amount to withdraw from balance with fees</li> <li>service fee: the updated Conio service fees applied to the ask</li> <li>mining fee: the ask updated mining fee</li> </ul>"},{"location":"Features/TradingSellService/CreateAsk/","title":"Create Ask","text":""},{"location":"Features/TradingSellService/CreateAsk/#overview","title":"Overview","text":"<p><code>createAsk</code> API is used to create an ask for selling a cryptocurrency. It allows client to specify either the amount as crypto amount, fiat amount or max sellable amount it is willing to create the ask.</p>"},{"location":"Features/TradingSellService/CreateAsk/#params","title":"Params","text":""},{"location":"Features/TradingSellService/CreateAsk/#_1","title":"Create Ask","text":"<p>The <code>CreateAskParams</code> used to initialized and perform <code>createAsk</code> API.</p> <ul> <li>crypto id: the cryptocurrency identifier used to create the ask quotation</li> <li>fiat currency: the ask fiat currency</li> <li>amount: the ask amount intended either as fiat amount, cryptocurrency amount or max sellable amount</li> </ul>"},{"location":"Features/TradingSellService/CreateAsk/#result","title":"Result","text":"<ul> <li>AskResult</li> </ul>"},{"location":"Features/TradingSellService/CreateAsk/#code","title":"Code","text":""},{"location":"Features/TradingSellService/CreateAsk/#ios","title":"iOS","text":"<pre><code>let params = CreateAskParams.makeBTC(amount: ...)\n\ntradingSellService\n    .createAsk(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingSellService/CreateAsk/#android","title":"Android","text":"<pre><code>// val amount = AmountParams.Max\nval amount = AmountParams.Crypto(\n    value = CryptoAmount(...)\n)\n\nval params = CreateAskParams(\n    cryptoId = \"...\",\n    amount = amount,\n)\n\nconio.sellService\n    .createAsk(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingSellService/FetchAsk/","title":"Fetch Ask","text":""},{"location":"Features/TradingSellService/FetchAsk/#overview","title":"Overview","text":"<p><code>fetchAsk</code> API is used to retrieve information about a specific ask. It allows client to specify the ask identifier to fetch the specific selling quotation with information such as crypto amount, fiat amount and fees.</p>"},{"location":"Features/TradingSellService/FetchAsk/#params","title":"Params","text":"<p>The <code>FetchAskParams</code> used to initialized and perform <code>fetchAsk</code> API.</p> <ul> <li>ask id: the existing ask identifier used to retrieve the specific ask</li> </ul>"},{"location":"Features/TradingSellService/FetchAsk/#result","title":"Result","text":"<ul> <li>AskResult</li> </ul>"},{"location":"Features/TradingSellService/FetchAsk/#code","title":"Code","text":""},{"location":"Features/TradingSellService/FetchAsk/#ios","title":"iOS","text":"<pre><code>let params = FatchAskParams.make(askId: ...)\n\ntradingSellService\n    .fetchAsk(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingSellService/FetchAsk/#android","title":"Android","text":"<pre><code>val params = FetchAskParams(\n    askId = \"...\",\n)\n\nconio.sellService\n    .fetchAsk(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingSellService/Sell/","title":"Sell","text":""},{"location":"Features/TradingSellService/Sell/#overview","title":"Overview","text":"<p><code>sell</code> API is used to execute the cryptocurrency selling based on a specified ask quotation and crypto signature request. It allows client to specify the ask identifier and the signature request to execute and finalize selling operation.</p>"},{"location":"Features/TradingSellService/Sell/#params","title":"Params","text":"<p>The <code>SellParams</code> used to initialized and perform <code>sell</code> API.</p> <ul> <li>ask id: the existing ask quotation identifier used to execute and finalize the sell operation</li> <li>crypto request: the crypto signature used to validate the sell operation</li> <li>wait until paid: prevent the service to complete until the ask is not in <code>paid</code> status (or in another end status, like <code>charged</code> or <code>error</code>)</li> </ul>"},{"location":"Features/TradingSellService/Sell/#result","title":"Result","text":"<p>The AskResult with the updated <code>status</code>. If the <code>status</code> is different from <code>paid</code> or <code>charged</code>, the transaction can still end with an error (use the Fetch Ask service to keep checking the status).</p>"},{"location":"Features/TradingSellService/Sell/#code","title":"Code","text":""},{"location":"Features/TradingSellService/Sell/#ios","title":"iOS","text":"<pre><code>let cryptoRequest = SellParams.CryptoRequest\n    .make(\n        proofId: ...,\n        expiration: ...,\n        cryptoProof: ...\n    )\n\nlet params = SellParams\n    .make(\n        askId: ...,\n        cryptoRequest: cryptoRequest\n    )\n\ntradingSellService\n    .sell(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingSellService/Sell/#android","title":"Android","text":"<pre><code>val cryptoRequest = SellCryptoRequest(\n    cryptoProof = ...,\n    proofId = ...,\n    expiration = ...,\n)\n\nval params = SellParams(\n    askId = \"...\",\n    cryptoRequest = cryptoRequest,\n)\n\nconio.sellService\n    .sell(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingSellService/UpdateAsk/","title":"Update Ask","text":""},{"location":"Features/TradingSellService/UpdateAsk/#overview","title":"Overview","text":"<p><code>updateAsk</code> API is used to update an existing ask for selling a cryptocurrency. It allows client to specify either the amount as crypto amount, fiat amount or max sellable amount it is willing to update the ask given its identifier.</p>"},{"location":"Features/TradingSellService/UpdateAsk/#params","title":"Params","text":"<p>The <code>UpdateAskParams</code> used to initialized and perform <code>updateAsk</code> API.</p> <ul> <li>ask id: the existing ask identifier used to update the selected ask</li> <li>amount: the new ask amount intended either as fiat amount, cryptocurrency amount or max sellable amount</li> </ul>"},{"location":"Features/TradingSellService/UpdateAsk/#result","title":"Result","text":"<ul> <li>AskResult</li> </ul>"},{"location":"Features/TradingSellService/UpdateAsk/#code","title":"Code","text":""},{"location":"Features/TradingSellService/UpdateAsk/#ios","title":"iOS","text":"<pre><code>let params = UpdateAskParams\n    .make(\n        askId: ..., \n        newAmount: ...\n    )\n\ntradingSellService\n    .updateAsk(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TradingSellService/UpdateAsk/#android","title":"Android","text":"<pre><code>// val amount = AmountParams.Max\nval amount = AmountParams.Crypto(\n    value = CryptoAmount(...)\n)\n\nval params = UpdateAskParams(\n    askId = \"...\",\n    amount = amount,\n)\n\nconio.sellService\n    .updateAsk(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/TransferService/CreateTransfer/","title":"Create Transfer","text":""},{"location":"Features/TransferService/CreateTransfer/#overview","title":"Overview","text":"<p><code>createTransfer</code> API is used to create cryptocurrency amount transfer quotation details from On-Chain Wallet to the same cryptocurrency Off-Chain Wallet or viceversa. It allows client to specify the source cryptocurrency either On-Chain or Off-Chain, the destination same cryptocurrency either Off-Chain or On-Chain and the source cryptocurrency amount to transfer.</p>"},{"location":"Features/TransferService/CreateTransfer/#params","title":"Params","text":"<p>The <code>CreateTransferParams</code> used to initialized and perform <code>createTransfer</code> API.</p> <ul> <li>source crypto: the source cryptocurrency used to create the transfer quotation</li> <li>destination crypto: the destination cryptocurrency used to create the transfer quotation</li> <li>source amount: the source cryptocurrency amount used to create the transfer quotation</li> </ul>"},{"location":"Features/TransferService/CreateTransfer/#result","title":"Result","text":"<ul> <li>TransferResult</li> </ul>"},{"location":"Features/TransferService/CreateTransfer/#code","title":"Code","text":""},{"location":"Features/TransferService/CreateTransfer/#ios","title":"iOS","text":"<pre><code>let params = CreateTransferParams\n    .make(\n        sourceCrypto: .onChainBtc,\n        destinationCrypto: .offChainBtc,\n        sourceCryptoAmount: .max\n    )\n\ntransferService\n    .createTransfer(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TransferService/CreateTransfer/#android","title":"Android","text":"<pre><code>// val amount = AmountParams.Max\nval amount = AmountParams.Crypto(\n    value = CryptoAmount(...)\n)\n\nval params = CreateTransferParams(\n    sourceCryptoId = \"...\",\n    destinationCryptoId = \"...\",\n    sourceAmount = amount\n)\n\nconio.transferService\n    .createTransfer(params)\n    .asFlow()\n    .collect {\n        // ...\n    }\n</code></pre>"},{"location":"Features/TransferService/FetchTransfer/","title":"Fetch Transfer","text":""},{"location":"Features/TransferService/FetchTransfer/#overview","title":"Overview","text":"<p><code>fetchTransfer</code> API is used to retrieve information about a specific transfer. It allows client to specify the transfer identifier to fetch the specific transfer quotation with information such as the source cryptocurrency, source cryptocurrency amount, destination cryptocurrency, gross crypto amount and fees.</p>"},{"location":"Features/TransferService/FetchTransfer/#params","title":"Params","text":"<p>The <code>FetchTransferParams</code> used to initialized and perform <code>fetchTransfer</code> API.</p> <ul> <li>transfer id: the existing transfer identifier used to retrieve the specific transfer quotation</li> </ul>"},{"location":"Features/TransferService/FetchTransfer/#result","title":"Result","text":"<ul> <li>TransferResult</li> </ul>"},{"location":"Features/TransferService/FetchTransfer/#code","title":"Code","text":""},{"location":"Features/TransferService/FetchTransfer/#ios","title":"iOS","text":"<pre><code>let params = FetchTransferParams.make(transferId: ...) \n\ntransferService\n    .fetchTransfer(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TransferService/FetchTransfer/#android","title":"Android","text":"<pre><code>val params = FetchTransferParams(\n    transferId = \"...\",\n)\n\nconio.transferService\n    .fetchTransfer(params)\n    .asFlow()\n    .collect {\n        // ...\n    }\n</code></pre>"},{"location":"Features/TransferService/Transfer/","title":"Transfer","text":""},{"location":"Features/TransferService/Transfer/#overview","title":"Overview","text":"<p><code>transfer</code> API is used to execute and finalize the transfer operation of a cryptocurrency amount from On-Chain Wallet to the same cryptocurrency Off-Chain Wallet or viceversa. It allows client to specify the transfer identifier and the signature request to execute and finalize transfer operation.</p>"},{"location":"Features/TransferService/Transfer/#params","title":"Params","text":"<p>The <code>TransferParams</code> used to initialized and perform <code>transfer</code> API.</p> <ul> <li>transfer id: the existing transfer quotation identifier used to execute and finalize the transfer quotation</li> <li>crypto request: the crypto signature used to validate the transfer quotation</li> <li>wait until paid: prevent the service to complete until the transfer is not in <code>paid</code> status (or in another end status, like <code>finalized</code> or <code>error</code>)</li> </ul>"},{"location":"Features/TransferService/Transfer/#result","title":"Result","text":"<p>The TransferResult with the updated <code>status</code>. If the <code>status</code> is different from <code>paid</code> or <code>finalized</code>, the transaction can still end with an error (use the Fetch Transfer service to keep checking the status).</p>"},{"location":"Features/TransferService/Transfer/#code","title":"Code","text":""},{"location":"Features/TransferService/Transfer/#ios","title":"iOS","text":"<pre><code>let cryptoRequest = TransferParams.CryptoRequest\n    .make(\n        proofId: ...,\n        expiration: ...,\n        cryptoProof: ...\n    )      \n\nlet params = TransferParams\n    .make(\n        transferId: ...,\n        cryptoRequest: cryptoRequest\n    )\n\ntransferService\n    .transfer(with: params)\n    .asPublisher()\n    .sink { result in\n        // ..,\n    }\n</code></pre>"},{"location":"Features/TransferService/Transfer/#android","title":"Android","text":"<pre><code>val cryptoRequest = TransferCryptoRequest(\n    cryptoProof = ...,\n    proofId = \"...\",\n    expiration = ...,\n)\n\nval params = TransferParams(\n    transferId = \"...\",\n    cryptoRequest = cryptoRequest \n)\n\nconio.transferService\n    .transfer(params)\n    .asFlow()\n    .collect {\n        // ...\n    }\n</code></pre>"},{"location":"Features/TransferService/TransferResult/","title":"Transfer Result","text":""},{"location":"Features/TransferService/TransferResult/#overview","title":"Overview","text":"<p>The <code>TransferResult</code> quotation with updated data used execute a transfer operation.</p>"},{"location":"Features/TransferService/TransferResult/#properties","title":"Properties","text":"<ul> <li>transfer id: the transfer unique identifier</li> <li>source cryptocurrency: the transfer source <code>Cryptocurrency</code></li> <li>destination cryptocurrency: the transfer destination <code>Cryptocurrency</code></li> <li>status: the transfer updated operation status</li> <li>gross amount: the transfer updated crypto amount</li> <li>service fees: the updated Conio service fee applied to the transfer quotation</li> <li>mining fees: the update blockchain mining fees applied to the transfer quotation</li> <li>exchange rate: the transfer cryptocurrency current exchange rate</li> </ul>"},{"location":"Features/TransferService/UpdateTransfer/","title":"Update Transfer","text":""},{"location":"Features/TransferService/UpdateTransfer/#overview","title":"Overview","text":"<p><code>updateTransfer</code> API is used to update an existing transfer quotation for transfer a cryptocurrency amount from On-Chain Wallet to the same cryptocurrency Off-Chain Wallet or viceversa. It allows client to specify the new source crypto amount it is willing to update the transfer quotation given its identifier.</p>"},{"location":"Features/TransferService/UpdateTransfer/#params","title":"Params","text":"<p>The <code>UpdateTransferParams</code> used to initialized and perform <code>updateTransfer</code> API.</p> <ul> <li>transfer id: the existing transfer identifier used to update the selected transfer quotation</li> <li>source amount: the new transfer source crypto amount used to update the selected transfer quotation</li> </ul>"},{"location":"Features/TransferService/UpdateTransfer/#result","title":"Result","text":"<ul> <li>TransferResult</li> </ul>"},{"location":"Features/TransferService/UpdateTransfer/#code","title":"Code","text":""},{"location":"Features/TransferService/UpdateTransfer/#ios","title":"iOS","text":"<pre><code>let params = UpdateTransferParams\n    .make(\n        transferId: ...,\n        newSourceAmount: ...\n    )\n\ntransferService\n    .updateTransfer(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/TransferService/UpdateTransfer/#android","title":"Android","text":"<pre><code>// val amount = AmountParams.Max\nval amount = AmountParams.Crypto(\n    value = CryptoAmount(...)\n)\n\nval params = UpdateTransferParams(\n    transferId = \"...\",\n    sourceAmount = amount\n)\n\nconio.transferService\n    .updateTransfer(params)\n    .asFlow()\n    .collect {\n        // ...\n    }\n</code></pre>"},{"location":"Features/UserService/AcceptNewLegalAcceptances/","title":"Accept New Legal Acceptances","text":""},{"location":"Features/UserService/AcceptNewLegalAcceptances/#overview","title":"Overview","text":"<p><code>acceptNewLegalAcceptances</code> API is used to mark as accepted the new legal acceptances. It allows client to mark as accepted possible new legal acceptances and let user continue operate on Conio services.</p>"},{"location":"Features/UserService/AcceptNewLegalAcceptances/#parameters","title":"Parameters","text":"<p>The <code>AcceptNewLegalAcceptancesParams</code> used to initialized and perform <code>acceptNewLegalAcceptances</code> API.</p> <ul> <li>credentials: the username and password used to execute the signup</li> <li>acceptances: the new legal acceptances user preferences</li> </ul>"},{"location":"Features/UserService/AcceptNewLegalAcceptances/#result","title":"Result","text":"<p>Success or error.</p>"},{"location":"Features/UserService/AcceptNewLegalAcceptances/#code","title":"Code","text":""},{"location":"Features/UserService/AcceptNewLegalAcceptances/#ios","title":"iOS","text":"<pre><code>let acceptences = LegalAcceptancesParams.makeAllAccepted()\nlet params = AcceptNewLegalAcceptancesParams\n    .make(\n        username: ...,\n        password: ...,\n        legalAcceptances: acceptances\n    )\nuserService\n    .acceptNewLegalAcceptances(with: params)\n    .asPublisher()\n    .sink { result in \n        ...\n    }\n</code></pre>"},{"location":"Features/UserService/AcceptNewLegalAcceptances/#android","title":"Android","text":"<pre><code>val acceptances = listOf(\n    Acceptance(AcceptanceType.AppImprovement, isAccepted = true),\n    Acceptance(AcceptanceType.ClientSupport, isAccepted = true),\n)\n\nval credentials = Credentials(\n    username = \"...\" // user unique identifier,\n    password = \"...\"\n)\n\nval params = AcceptNewLegalAcceptancesParams(\n    acceptances = B2BModelAcceptances.acceptedAcceptances,\n    credentials = credentials\n)\n\nconio.userService\n    .acceptNewLegalAcceptances(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/UserService/FetchLegalAcceptances/","title":"Fetch Legal Acceptances","text":""},{"location":"Features/UserService/FetchLegalAcceptances/#overview","title":"Overview","text":"<p><code>fetchLegalAcceptances</code> API fetches the acceptances, terms and conditions and privacy policies information.</p>"},{"location":"Features/UserService/FetchLegalAcceptances/#parameters","title":"Parameters","text":"<p>The <code>FetchLegalAcceptancesParams</code> used to initialized and perform <code>fetchLegalAcceptances</code> API.</p> <ul> <li>language: the legal acceptances language translation</li> </ul>"},{"location":"Features/UserService/FetchLegalAcceptances/#result","title":"Result","text":"<p>The <code>LegalAcceptancesResult</code> acceptances, terms and conditions and privacy policies information.</p> <ul> <li>terms and conditions url: the T&amp;C url</li> <li>privacy policies url: the privacy policies url</li> <li>acceptances: the acceptances list</li> </ul>"},{"location":"Features/UserService/FetchLegalAcceptances/#code","title":"Code","text":""},{"location":"Features/UserService/FetchLegalAcceptances/#ios","title":"iOS","text":"<pre><code>let params = FetchLegalAcceptancesParams.makeItalian()\n\nuserService\n    .fetchLegalAcceptances(with: params)\n    .asPublisher()\n    .sink { result in \n        ...\n    }\n</code></pre>"},{"location":"Features/UserService/FetchLegalAcceptances/#android","title":"Android","text":"<pre><code>val params = FetchLegalAcceptancesParams(\n    language = Language.English,\n)\n\nconio.userService\n    .fetchLegalAcceptances(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/UserService/FetchPermissions/","title":"Fetch User Permissions","text":""},{"location":"Features/UserService/FetchPermissions/#overview","title":"Overview","text":"<p><code>fetchPermissions</code> API is used to retrieve the service permissions list the user can currently use.</p>"},{"location":"Features/UserService/FetchPermissions/#result","title":"Result","text":"<p>The <code>PermissionsResult</code> contains the <code>PermissionType</code> list. If a service permission is not on the list means that the related service can not be completed without an error.</p> <ul> <li>types: the available permission types list</li> </ul>"},{"location":"Features/UserService/FetchPermissions/#code","title":"Code","text":""},{"location":"Features/UserService/FetchPermissions/#ios","title":"iOS","text":"<pre><code>userService\n    .fetchPermissions()\n    .asPublisher()\n    .sink { result in \n        ...\n    }\n</code></pre>"},{"location":"Features/UserService/FetchPermissions/#android","title":"Android","text":"<pre><code>conio.userService\n    .fetchPermissions()\n    .asFlow()\n    .collect { result -&gt;\n\n    }\n</code></pre>"},{"location":"Features/UserService/Login/","title":"Login","text":""},{"location":"Features/UserService/Login/#overview","title":"Overview","text":"<p><code>login</code> API executes the login in Conio services. It allows client to obtain a valid user session with passed username, password and crypto signature request.</p>"},{"location":"Features/UserService/Login/#parameters","title":"Parameters","text":"<p>The <code>LoginParams</code> used to initialized and perform <code>login</code> API.</p> <ul> <li>username: the username used to execute the login</li> <li>password: the user password used to execute the login</li> <li>crypto request: the crypto signature used to validate the login</li> </ul>"},{"location":"Features/UserService/Login/#result","title":"Result","text":"<p>Success or error.</p>"},{"location":"Features/UserService/Login/#code","title":"Code","text":""},{"location":"Features/UserService/Login/#ios","title":"iOS","text":"<pre><code>let username: String = ...\nlet password: String = ...\nlet cryptoRequest = LoginParams\n    .CryptoRequest\n    .make(\n        username: username,\n        expiration: Timestamp(Date().timeIntervalSince1970 + (30 * 60 * 1000)),\n        cryptoProof: ...\n    )\n\nuserService\n    .login(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/UserService/Login/#android","title":"Android","text":"<pre><code>val username: String = ...\nval credentials = Credentials(\n    username = username,\n    password = ...\n)\n\nval loginCryptoRequest = LoginCryptoRequest(\n    cryptoProof = \"...\",\n    username = username,\n    expiration = Date().time + (30 * 60 * 1000)\n)\n\nval loginParams = LoginParams(\n  credentials = credentials,\n  cryptoRequest = loginCryptoRequest\n)\n\nconio.userService\n    .login(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/UserService/Logout/","title":"Logout","text":""},{"location":"Features/UserService/Logout/#overview","title":"Overview","text":"<p><code>logout</code> API executes the user logout from Conio services invalidating user session.</p>"},{"location":"Features/UserService/Logout/#result","title":"Result","text":"<p>Success or error.</p>"},{"location":"Features/UserService/Logout/#code","title":"Code","text":""},{"location":"Features/UserService/Logout/#ios","title":"iOS","text":"<pre><code>userService\n    .logout()\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/UserService/Logout/#android","title":"Android","text":"<pre><code>conio.userService\n    .logout()\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/UserService/Signup/","title":"Signup","text":""},{"location":"Features/UserService/Signup/#overview","title":"Overview","text":"<p><code>signup</code> API executes the signup process in Conio services. It allows client to create a new user and setting up a valid user session with passed username, password and crypto signature request.</p>"},{"location":"Features/UserService/Signup/#parameters","title":"Parameters","text":"<p>The <code>SignupParams</code> used to initialize and perform <code>signup</code> API.</p> <ul> <li>credentials: the username and password used to execute the signup</li> <li>acceptances: the legal acceptances list accepted or not by the user during the signup</li> <li>crypto request: the crypto signature used to validate the signup</li> </ul>"},{"location":"Features/UserService/Signup/#result","title":"Result","text":"<p>Success or error.</p>"},{"location":"Features/UserService/Signup/#code","title":"Code","text":""},{"location":"Features/UserService/Signup/#ios","title":"iOS","text":"<pre><code>let username: String = ...\nlet password: String = ...\nlet cryptoRequest = SignupParams\n    .CryptoRequest\n    .make(\n        proofId: ...,\n        cryptoProof: ...,\n        proofExpiration: Timestamp(Date().timeIntervalSince1970 + (30 * 60 * 1000)),\n        username: username,\n        userLevel: ...,\n        iban: ...,\n        email: ...,\n        firstName: ...,\n        lastName: ...\n    )\nlet acceptences = [\n    LegalAcceptance.makeAccepted(type: .clientSupport),\n    LegalAcceptance.makeAccepted(type: .appImprovement)\n]\nlet params = SignupParams\n    .make(\n        username: username,\n        password: password,\n        acceptances: acceptances,\n        cryptoRequest: cryptoRequest\n    )\n\nuserService\n    .signup(with: params)\n    .asPublisher()\n    .sink { result in\n        // ...\n    }\n</code></pre>"},{"location":"Features/UserService/Signup/#android","title":"Android","text":"<pre><code>val username: String = \"...\" // user unique identifier\n\nval credentials = Credentials(\n    username = username,\n    password = \"...\"\n)\n\nval signupCryptoRequest = SignupCryptoRequest(\n    cryptoProof = \"...\",\n    proofId = \"...\",\n    username = username,\n    userLevel = \"...\",\n    expiration = Date().time + (30 * 60 * 1000), // [example] 30 minutes from now\n    iban = \"...\",\n    email = \"...\",\n    firstName = \"...\",\n    lastName = \"...\",\n)\n\nval acceptances = listOf(\n    Acceptance(AcceptanceType.AppImprovement, isAccepted = true),\n    Acceptance(AcceptanceType.ClientSupport, isAccepted = true),\n)\n\nval signupParams = SignupParams(\n  credentials = credentials,\n  acceptances = acceptances,\n  cryptoRequest = signupCryptoRequest\n)\n\nconio.userService\n    .signup(params)\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/WalletService/FetchBalances/","title":"Fetch Balances","text":""},{"location":"Features/WalletService/FetchBalances/#overview","title":"Overview","text":"<p><code>fetchBalances</code> API is used to retrieve the wallet balances of all cryptocurrencies. It allows client to fetch the Wallets balances amounts, either confirmed and unconfirmed.</p>"},{"location":"Features/WalletService/FetchBalances/#result","title":"Result","text":"<p>The <code>BalancesResult</code> contains the <code>WalletBalance</code> list.</p> <ul> <li>wallets balances: the available wallets balances list</li> </ul>"},{"location":"Features/WalletService/FetchBalances/#code","title":"Code","text":""},{"location":"Features/WalletService/FetchBalances/#ios","title":"iOS","text":"<pre><code>userService\n    .fetchBalances()\n    .asPublisher()\n    .sink { result in \n        ...\n    }\n</code></pre>"},{"location":"Features/WalletService/FetchBalances/#android","title":"Android","text":"<pre><code>conio.walletService\n    .fetchBalances()\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Features/WalletService/FetchMnemonic/","title":"Fetch Mnemonic","text":""},{"location":"Features/WalletService/FetchMnemonic/#overview","title":"Overview","text":"<p><code>fetchMnemonic</code> API is used to retrieve the user wallet mnemonic, a list of secret words necessary to restore user wallet during account recovery.</p>"},{"location":"Features/WalletService/FetchMnemonic/#result","title":"Result","text":"<p>The <code>MnemonicResult</code> contains the list of words that represent the user wallet mnemonic.</p> <ul> <li>words: the mnemonic words list</li> </ul>"},{"location":"Features/WalletService/FetchMnemonic/#code","title":"Code","text":""},{"location":"Features/WalletService/FetchMnemonic/#ios","title":"iOS","text":"<pre><code>walletService\n    .fetchMnemonic()\n    .asPublisher()\n    .sink { result in \n        ...\n    }\n</code></pre>"},{"location":"Features/WalletService/FetchMnemonic/#android","title":"Android","text":"<pre><code>conio.walletService\n    .fetchBalances()\n    .asFlow()\n    .collect { result -&gt;\n        // ...\n    }\n</code></pre>"},{"location":"Installation/Android/","title":"Android Installation","text":""},{"location":"Installation/Android/#prerequisites","title":"Prerequisites","text":"<ul> <li>Min Android SDK: 23 (Android 6.0 \u201cMarshmallow\u201d)</li> </ul>"},{"location":"Installation/Android/#installation","title":"Installation","text":"<p>The Conio Android SDK is located in a private Maven repository on JFrog Artifactory, so it is necessary to configure the authentication as follow.</p> <ul> <li>Add the Artifactory credentials provided by Conio to your global <code>gradle.properties</code></li> </ul> <pre><code>artifactory_user=&lt;username provided by Conio&gt;\nartifactory_password=&lt;password provided by Conio&gt;\n</code></pre> <ul> <li>Add the Conio Artifactory repository to your <code>build.gradle</code></li> </ul> <pre><code>repositories {\n    // ...\n    maven {\n        url \"https://artifactory.conio.com/artifactory/gradle-release-local\"\n        credentials(PasswordCredentials) {\n            username \"${artifactory_user}\"\n            password \"${artifactory_password}\"\n        }\n    }\n}\n</code></pre> <ul> <li>Add the Conio SDK dependency</li> </ul> <pre><code>dependencies {\n    // ...\n    implementation 'com.conio:sdk-b2b:[VERSION]'\n}\n</code></pre>"},{"location":"Installation/iOS/","title":"iOS Installation","text":""},{"location":"Installation/iOS/#prerequisites","title":"Prerequisites","text":"<ul> <li>iOS 13+</li> <li>Swift 5.9</li> </ul>"},{"location":"Installation/iOS/#swift-package-manger","title":"Swift Package Manger","text":""},{"location":"Installation/iOS/#via-xcode","title":"Via Xcode","text":"<ol> <li>In Xcode, install Conio B2B SDK by navigating to File &gt; Add Packages</li> <li>In the prompt that appears, insert the repository:</li> </ol> <pre><code>git@bitbucket.org:squadrone/conio-sdk-b2b-ios.git\n</code></pre> <p>or </p> <pre><code>https://bitbucket.org/squadrone/conio-sdk-b2b-ios.git\n</code></pre>"},{"location":"Installation/iOS/#via-packageswift","title":"Via <code>Package.swift</code>","text":"<p>Simply add the following lines to <code>dependencies</code> of your <code>Package.swift</code> manifest:</p> <pre><code>dependencies: [\n  .package(url: \"git@bitbucket.org:squadrone/conio-sdk-b2b-ios.git\")\n  // ...\n],\n</code></pre> <p>Note: in order to correctly fetch package you will need to have access to project repository.</p>"},{"location":"Installation/iOS/#troubleshooting","title":"Troubleshooting","text":"<p>If you get the following error:</p> <p><code>autoreconf: failed to run aclocal: No such file or directory</code> </p> <p>try the following command using Brew:</p> <p><code>brew install autoconf &amp;&amp; brew install automake</code></p> <p>If you get the following error: <code>Can't exec \"/opt/local/bin/aclocal\": No such file or directory</code> Uninstall MacPorts with: <code>sudo port -fp uninstall --follow-dependents installed</code></p>"},{"location":"Old/","title":"Conio","text":"<p>Questo SDK rende semplice integrare un portafoglio Bitcoin Conio nella propria app.</p>"},{"location":"Old/#cosa-si-puo-fare","title":"Cosa si pu\u00f2 fare?","text":"<ul> <li> <p>Creare un portafoglio Bitcoin</p> </li> <li> <p>Ottenere le informazioni del portafoglio creato</p> </li> <li> <p>Comprare e Vendere Bitcoin</p> </li> <li> <p>Leggere il dettaglio storico delle operazioni di un utente</p> </li> <li> <p>Ottenere il prezzo storico ed attuale del Bitcoin</p> </li> </ul>"},{"location":"Old/#come-posso-utilizzarlo","title":"Come posso utilizzarlo?","text":"<ul> <li>Installazione<ul> <li>Android</li> <li>iOS</li> </ul> </li> <li>Configurazione</li> <li>Operazioni<ul> <li>Introduzione</li> <li>Operazioni sull'utente<ul> <li>Termini di servizio</li> <li>Signup</li> <li>Login</li> <li>Logout</li> </ul> </li> <li>Operazioni sul portafoglio<ul> <li>Indirizzo bitcoin attuale</li> <li>Lista dei movimenti</li> <li>Dettaglio di un movimento</li> <li>Bilancio del portafoglio</li> <li>Codice di recupero Bitcoin</li> </ul> </li> <li>Operazioni sul mercato<ul> <li>Prezzo attuale del Bitcoin</li> <li>Prezzo storico del Bitcoin</li> <li>Riepilogo trading</li> <li>Commissioni trading</li> <li>Limiti di trading</li> <li>Acquisto di Bitcoin</li> <li>Vendita di Bitcoin</li> </ul> </li> </ul> </li> </ul>"},{"location":"Old/index.en/","title":"Conio","text":"<p>This SDK makes it simple to integrate a Bitcoin wallet Conio in your app.</p>"},{"location":"Old/index.en/#what-can-you-do","title":"What can you do?","text":"<ul> <li>Create a Bitcoin wallet</li> <li>Show wallet details</li> <li>Show the historical and current Bitcoin price</li> <li>Send and receive Bitcoin</li> <li>Buy and Sell Bitcoin</li> <li>Show all the transactions made by the wallet</li> </ul>"},{"location":"Old/index.en/#how-does-it-work","title":"How does it work?","text":"<ul> <li>Installation<ul> <li>Android</li> <li>iOS</li> </ul> </li> <li>Configuration</li> <li>User<ul> <li>Terms of service</li> <li>Signup</li> <li>Login</li> <li>Logout</li> </ul> </li> <li>Wallet<ul> <li>Bitcoin address</li> <li>Movements list</li> <li>Activity details</li> <li>Wallet details</li> <li>Send Bitcoin</li> </ul> </li> <li>Market<ul> <li>Bitcoin Price</li> <li>Historical Price</li> <li>Trading limits</li> <li>Trade Bitcoin</li> </ul> </li> <li>General exceptions<ul> <li>Outdated SDK</li> </ul> </li> </ul>"},{"location":"Old/configuration/Configuration.en/","title":"Initialize the SDK","text":""},{"location":"Old/configuration/Configuration.en/#conio-object","title":"Conio object","text":"<p>The <code>Conio</code> object needs to be initialized with a <code>ConioConfiguration</code>.</p> <p>You can use the <code>test</code> configuration that will connect to the staging environment and the Bitcoin testnet blockchain. The <code>prod</code> environment instead will connect to the production server and the Bitcoin original blockchain.</p> <p>You can also initialize the SDK with a custom environment, with the url of the backend and a Bitcoin blockchain.</p>"},{"location":"Old/configuration/Configuration.en/#parameters","title":"Parameters","text":"<ul> <li>configuration: configuration to initialize the SDK: ConioConfiguration type</li> <li>(Android) context: context will save in the Shared Preferences</li> </ul>"},{"location":"Old/configuration/Configuration.en/#conio-configuration","title":"Conio Configuration","text":"<ul> <li>identifier: name of the configuration</li> <li>bitcoinNetwork: the Bitcoin network, either <code>.testnet</code> or <code>.mainnet</code></li> <li>networkEnvironment: the environment (which backend): NetworkEnvironment type</li> </ul>"},{"location":"Old/configuration/Configuration.en/#network-environment","title":"Network Environment","text":"<ul> <li>name: name of the environment</li> <li>host: the host</li> </ul>"},{"location":"Old/configuration/Configuration.en/#code","title":"Code","text":""},{"location":"Old/configuration/Configuration.en/#android","title":"Android","text":"<pre><code>import com.conio.sdk.Conio;\nimport com.conio.sdk.models.shared.BitcoinNetwork;\nimport com.conio.sdk.models.shared.ConioConfiguration;\nimport com.conio.sdk.providers.networking.NetworkEnvironment;\n\n// Test configuration\nConio conio = new Conio(ConioConfiguration.test, getApplicationContext());\n\n// Production configuration\nConio conio = new Conio(ConioConfiguration.prod, getApplicationContext());\n</code></pre>"},{"location":"Old/configuration/Configuration.en/#ios","title":"iOS","text":"<pre><code>import ConioSDK\n\n// Test configuration\nlet conio = Conio(configuration: ConioConfiguration.test)\n\n// Production configuration\nlet conio = Conio(configuration: ConioConfiguration.prod)\n</code></pre>"},{"location":"Old/configuration/Configuration/","title":"Inizializzazione dell'SDK","text":""},{"location":"Old/configuration/Configuration/#loggetto-conio","title":"L'oggetto Conio","text":"<p>Per usare l'SDK, occorre inizializzare l'oggetto <code>Conio</code> con una <code>ConioConfiguration</code>. La configurazione determiner\u00e0 l'ambiente con il quale l'SDK interagir\u00e0.</p> <p>\u00c8 necessario inizializzare l'SDK con un ambiente personalizzato, specificando l'url del backend e la rete Bitcoin da utilizzare.</p> <p>Di seguito le specifiche per inizializzare un oggetto di tipo <code>Conio</code>.</p>"},{"location":"Old/configuration/Configuration/#parametri-conio","title":"Parametri: Conio","text":"<ul> <li>configuration: di tipo ConioConfiguration, la configurazione per inizializzare l'SDK;</li> <li>(Android) context: di tipo <code>Context</code>, il context dell'applicazione Android.</li> </ul>"},{"location":"Old/configuration/Configuration/#parametri-conioconfiguration","title":"Parametri: ConioConfiguration","text":"<ul> <li>baseUrl: di tipo <code>String</code>, url del backend;</li> <li>bitcoinNetwork: di tipo <code>BitcoinNetwork</code>, la rete Bitcoin. Pu\u00f2 essere <code>.testnet</code>, <code>.mainnet</code>, <code>privateMainnet</code> o <code>privateTestnet</code>.</li> </ul>"},{"location":"Old/configuration/Configuration/#codice","title":"Codice","text":""},{"location":"Old/configuration/Configuration/#android","title":"Android","text":"<pre><code>import com.conio.sdk.Conio;\nimport com.conio.sdk.models.shared.BitcoinNetwork;\nimport com.conio.sdk.models.shared.ConioConfiguration;\nimport com.conio.sdk.providers.networking.NetworkEnvironment;\n\n// Test configuration\nConioConfiguration testConfig = new ConioConfiguration(\"https://example.test.com\", BitcoinNetwork.TESTNET);\nConio conio = new Conio(testConfig, context);\n\n// Production configuration\nConioConfiguration config = new ConioConfiguration(\"https://example.production.com\", BitcoinNetwork.MAINNET);\nConio conio = new Conio(config, context);\n</code></pre>"},{"location":"Old/configuration/Configuration/#ios","title":"iOS","text":"<pre><code>import ConioSDK\n\n// Test configuration\nlet testConfig = ConioConfiguration(\n    withBaseUrl: \"https://example.test.com\",\n    bitcoinNetwork: .testnet\n)\nlet conio = Conio(config: testConfig)\n\n// Production configuration\nlet config = ConioConfiguration(\n    withBaseUrl: \"https://example.production.com\",\n    bitcoinNetwork: .testnet\n)\nlet conio = Conio(config: config)\n</code></pre>"},{"location":"Old/exchange/Exchange.en/","title":"Exchange operations","text":""},{"location":"Old/exchange/Exchange.en/#current-bitcoin-price","title":"Current Bitcoin Price","text":"<p>You can get the current buy or sell Bitcoin price. The SDK can also give you the Bitcoin equivalent for a set amount of currency.</p>"},{"location":"Old/exchange/Exchange.en/#parameters","title":"Parameters","text":"<p>An object of type <code>CurrentPriceParams</code>:</p> <ul> <li>currency: which fiat currency (EUR) you want to have the exchange rate for.</li> <li>@Optional amount: the amount of Fiat currency (EUR) that you want to know the equivalent in BTC</li> </ul>"},{"location":"Old/exchange/Exchange.en/#returns","title":"Returns","text":"<p>A <code>CurrentPrice</code> object:</p> <ul> <li>buyPrice: Buy exchange rate</li> <li>sellPrice: Sell exchange rate</li> <li>timestamp: price timestamp</li> </ul>"},{"location":"Old/exchange/Exchange.en/#code","title":"Code","text":""},{"location":"Old/exchange/Exchange.en/#android","title":"Android","text":"<pre><code>// Current price\nCurrentPriceParams params = new CurrentPriceParams(Currency.EUR);\n\n// Conversion of 50.000.000 satoshi (0,5 BTC) in euro\nCurrentPriceParams params = new CurrentPriceParams(Currency.EUR, 50_000_000L)\n\nconio.exchangeService.currentPrice(params, result-&gt;{\n  result.analysis(price-&gt; {\n    // CurrentPrice\n  }, error-&gt; {\n     // Exception\n  });\n});\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#ios","title":"iOS","text":"<pre><code>// Current price\nlet params = CurrentPriceParams(currency: .eur)\n\n// Conversion of 50.000.000 satoshi (0,5 BTC) in euro\nlet params = CurrentPriceParams(currency: .eur, satoshiAmount: 50_000_000)\n\nconio.exchangeService.currentPrice(params: params) { result in\n result.analysis(ifSuccess: { prices in\n      // CurrentPrice\n    }, ifFailure: { error in\n      // ServiceError\n    })\n});\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#bitcoin-hystorical-price","title":"Bitcoin hystorical price","text":"<p>You can get the Bitcoin hystorical price during a set amount of time.</p>"},{"location":"Old/exchange/Exchange.en/#parameters_1","title":"Parameters","text":"<p>An object <code>HistoricalPriceParams</code>:</p> <ul> <li>currency: which fiat currency you want to have the exchange rate for.</li> <li>startTimestamp: Initial timestamp.</li> <li>endTimestamp: Final timespamp.</li> <li>@Optional interval: Time between each price (week, day, hour...)</li> </ul>"},{"location":"Old/exchange/Exchange.en/#returns_1","title":"Returns","text":"<p>Object <code>HistoricalPrices</code>:</p> <ul> <li>Contains a list of <code>CurrentPrice</code></li> <li>An object <code>PriceAnalytics</code> containing:</li> <li>deltaFiat: absolute exchange rate change during the selected period.</li> <li>deltaPercentage: percentage change of the exchange rate during the selected period.</li> <li>trend: enum: price increased, decreased or stayed the same.</li> </ul>"},{"location":"Old/exchange/Exchange.en/#code_1","title":"Code","text":""},{"location":"Old/exchange/Exchange.en/#android_1","title":"Android","text":"<pre><code>// Price from April 16, 2019 to April 16, 2018\n// Standard Interval: 1 day\nHistoricalPriceParams params = new HistoricalPriceParams(\n  Currency.EUR, \n  1523885446000L, \n  1563465540000L\n);\n\n// Price from April 16, 2019 to April 16, 2018\n// Selected Interval: 1 week\nHistoricalPriceParams params = new HistoricalPriceParams(\n  Currency.EUR, \n  1523885446000L, \n  1563465540000L,\n  604800000\n);\n\nconio.exchangeService.historicalPrices(params, result-&gt;{\n  result.analysis(prices-&gt; {\n    // HistoricalPrices\n  }, error-&gt; {\n    // Exception\n  });\n});\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#ios_1","title":"iOS","text":"<pre><code>// Price from April 16, 2019 to April 16, 2018\n// Standard Interval: 1 day\nlet params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000)\n\n// Price from April 16, 2019 to April 16, 2018\n// Selected Interval: 1 week\nlet params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000, interval: 604800000)\n\nconio.exchangeService.historicalPrices(params: params) { result in\n result.analysis(ifSuccess: { prices in\n      // HistoricalPrices\n    }, ifFailure: { error in\n      // ServiceError\n    })\n});\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#trading-limits","title":"Trading limits","text":"<p>Request user trading limits (assigned at signup)</p>"},{"location":"Old/exchange/Exchange.en/#returns_2","title":"Returns","text":"<p>An object <code>AllTradingLimits (Android)</code> or <code>Limits (iOS)</code> containing:</p> <ul> <li> <p>Two objects: <code>TradingLimits</code>, one for buying limits and one for selling limits. Inside of it we get:</p> <ul> <li>currentLimit: current limit</li> <li>limits: a list containing each limit (daily, monthly, yearly) and their maximum values.</li> <li>currentLimitsByType: current limit for each of the limits.</li> </ul> </li> <li> <p>minimumBuyAmount: minimum amount in fiat currency (EUR) required to buy Bitcoin</p> </li> <li>minimumSellAmount: minimum amount in fiat currency (EUR) required to sell Bitcoin</li> </ul>"},{"location":"Old/exchange/Exchange.en/#codice","title":"Codice","text":""},{"location":"Old/exchange/Exchange.en/#android_2","title":"Android","text":"<pre><code>conio.exchangeService.tradingLimits(result -&gt; {\n  result.analysis(limits -&gt; {\n    // TradingLimits\n  }, error -&gt; {\n    // Exception\n  });\n});\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#ios_2","title":"iOS","text":"<pre><code>conio.exchangeService.tradingLimits { result in\n result.analysis(ifSuccess: { limits in\n      // TradingLimits\n    }, ifFailure: { error in\n      // ServiceError\n    })\n});\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#buy-bitcoin","title":"Buy Bitcoin","text":"<p>In order to buy Bitcoin you will have to perform 2 operations. The first one creates a <code>Bid</code> (a request to buy some BTC at some price). Inside the created <code>Bid</code> you will find the <code>WiretransferInfo</code> that you will use to make the wire transfer necessary to pay for the Bitcoin. Once the wire transfer is completed you can perfom the second operation that will inform Conio that you payed the <code>Bid</code> by sending over a <code>CryptoProof</code>, required to proof the validity of the transaction.</p>"},{"location":"Old/exchange/Exchange.en/#bid-creation","title":"Bid creation","text":"<p>You can create a <code>RequestBid</code> with a currency (BTC or EUR) and an amount, expressed either in satoshi, or in Fiat currency.  For example you can create a <code>RequestBid</code> in Euro to buy an amount in Bitcoin for the equivalent of 20\u20ac, or a <code>RequestBid</code> in Euro to buy 100.000.000 satoshi. </p> <p>If the request will be successful you will get a <code>Bid</code> containing an <code>ID</code>. With this identifier you will be able to update the Bid to get fresh info about it. This will be necessary if the user takes some time (more than 2 minutes) from the Bid request to the actual payment.</p>"},{"location":"Old/exchange/Exchange.en/#parameters_2","title":"Parameters","text":"<ul> <li>(Optional) id: Bid id, insert only if you need to refresh the bid</li> <li>(one of) satoshi: amount of Bitcoin that the user wants to buy</li> <li>(one of) fiatAmount: amount of Fiat currency the user wants to spend to buy an equivalent Bitcoin amount</li> <li>currency: Fiat currency used to buy (EUR)</li> </ul> <p>The SDK will allow you to insert only one of satoshi or fiatAmount. You should never input both of them at the same time.</p>"},{"location":"Old/exchange/Exchange.en/#returns_3","title":"Returns","text":"<p>An object <code>CreatedBid</code> containing:</p> <ul> <li>id: identifier required to refresh or finalize a bid</li> <li>currency: Fiat currency used to buy (EUR)</li> <li>satoshi: Satoshi amount of the request</li> <li>fiatAmount: Fiat amount (EUR) of the request </li> <li>serviceFees: Fees for the transaction in the selected currency </li> <li>expiration: Bid expiration timestamp. If expired please refresh the Bid.</li> <li>wiretransferInfo: necessary info to pay for the bid</li> </ul>"},{"location":"Old/exchange/Exchange.en/#code_2","title":"Code","text":""},{"location":"Old/exchange/Exchange.en/#android_3","title":"Android","text":"<pre><code>\n// Buy request for 100\u20ac\nCreateOrRefreshBidParams params = \n  new CreateOrRefreshBidParams(Currency.EUR, 100d);\n\n// Buy request for 1.000.000 satoshi\nCreateOrRefreshBidParams params = \n  new CreateOrRefreshBidParams(Currency.EUR, 100000000l);\n\n// Bid refresh for 100\u20ac\nCreateOrRefreshBidParams params = \n  new CreateOrRefreshBidParams(\n    \"bididentifier\", \n    Currency.EUR, \n    100d\n  );\n\nconio.exchangeService.createOrRefreshBid(params, result -&gt; {\n  result.analysis(bid -&gt; {\n    // CreatedBid\n  }, error -&gt; {\n    // Exception\n  });\n});\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#ios_3","title":"iOS","text":"<pre><code>// Buy request for 50\u20ac\nlet params = CreateOrRefreshBidParams(currency: .eur, fiatAmount: 50.0)\n\n// Buy request for 1.000.000 satoshi\n let params = CreateOrRefreshBidParams(currency: .eur, satoshi: 1000000)\n\n// Bid refresh for 100\u20ac\nlet params = CreateOrRefreshBidParams(bidID: \"bididentifier\", currency: .eur, fiatAmount: 100.0)\n\nconio.exchangeService.createOrRefreshBid(params: params) { result in\n result.analysis(ifSuccess: { createdBid in\n        // CreatedBid\n    }, ifFailure: { error in\n        // ServiceError\n    })\n});\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#bid-payment","title":"Bid Payment","text":"<p>Once you have payed the <code>Bid</code> you can use the <code>Purchase</code> operation to receive the Bitcoin. You will have to submit a <code>CryptoProof</code>, that you can create in the same way as the one created during the signup. The only difference is the following DATA to concatenate (exactly in this order):</p> <pre><code>[proofID, \"PAY_FOR_BID_WT\", bidID, userID, Expiration]\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#parameters_3","title":"Parameters","text":"<p>An object <code>PurchaseParams</code> containing:</p> <ul> <li>bidId: <code>Bid</code> identifier referring to the bid you want to finalize</li> <li>cryptoRequest: a <code>BidCryptoRequest</code> </li> </ul>"},{"location":"Old/exchange/Exchange.en/#returns_4","title":"Returns","text":"<p>An object <code>PurchaseResult</code> containing:</p> <ul> <li>bidId: <code>Bid</code> identifier</li> </ul>"},{"location":"Old/exchange/Exchange.en/#errors","title":"Errors","text":"<ul> <li>INVALID_CRYPTO_PROOF Crypto proof is not valid</li> <li>INVALID_PAYMENT_METHOD Payment method is not valid</li> <li>UNSUPPORTED_PAYMENT_METHOD Payment method is not supported</li> <li>TRADING_LIMITS_EXCEEDED Bid exceed the maximum buy limit of the user</li> <li>TRADE_EXPIRED Bid is expired</li> <li>BID_ALREADY_PAID Bid was already paid</li> <li>BID_NOT_YET_PAID Bid has not been paid yet</li> <li>UNRECOVERABLE_BID Bid is in an error state</li> <li>FIAT_AMOUNT_TOO_LOW Fiat amount is lower than minimum limit</li> </ul>"},{"location":"Old/exchange/Exchange.en/#code_3","title":"Code","text":""},{"location":"Old/exchange/Exchange.en/#android_4","title":"Android","text":"<pre><code>BidCryptoRequest bidCryptoRequest = \n  createCryptoRequest() // Your implementation\n\nPurchaseParams params = \n  new PurchaseParams(\"bidId\", bidCryptoRequest, card);\n\nconio.exchangeService.purchase(params, result -&gt; {\n  result.analysis(bid -&gt; {\n    // PurchaseResult\n  }, error -&gt; {\n    // Exception\n  });\n});\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#ios_4","title":"iOS","text":"<pre><code>let cryptoRequest = createCryptoRequest() // Your implementation\n\nlet params = PurchaseParams(bidID: \"bidID\", paymentCard: card, cryptoRequest: cryptoRequest)\n\nconio.exchangeService.purchase(params: params) { result in\n result.analysis(ifSuccess: { bid in\n    // PurchaseResult\n    }, ifFailure: { error in\n    // ServiceError\n    })\n});\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#sell-bitcoin","title":"Sell Bitcoin","text":"<p>In order to buy Bitcoin you will have to perform 2 operations. The first one creates a <code>Ask</code> (a request to sell some BTC at some price). The second one will pay said <code>Ask</code>, by using the ask identifier.  The SDK will sign the Bitcoin transaction that moves the bitcoins from the user wallet, returning the id of said completed Ask.</p>"},{"location":"Old/exchange/Exchange.en/#ask-creation","title":"Ask Creation","text":"<p>You can create a <code>CreatedAsk</code> in Euro to sell an amount in Bitcoin for the equivalent of 50\u20ac, or a <code>CreatedAsk</code> in Euro to sell 100.000.000 satoshi. </p> <p>The request will return an <code>Ask</code> containing an <code>ID</code>. With this identifier you will be able to update the Ask to get fresh info about it. This will be necessary if the user takes some time (more than 2 minutes) from the Ask request to the actual sell.</p>"},{"location":"Old/exchange/Exchange.en/#parameters_4","title":"Parameters","text":"<ul> <li>(Optional) id: Ask id, insert only if you need to refresh the Ask</li> <li>(one of) satoshi: bitcoin amount the user wants to sell </li> <li>(one of) fiatAmount: amount of Fiat currency the user wants to receive when selling Bitcoin </li> <li>currency: Fiat currency to receive (EUR) </li> </ul> <p>The SDK will allow you to insert only one of satoshi or fiatAmount. You should never input both of them at the same time.</p>"},{"location":"Old/exchange/Exchange.en/#returns_5","title":"Returns","text":"<p>An object <code>CreatedAsk</code> containing:</p> <ul> <li>id: identifier required to refresh or finalize a ask</li> <li>currency: Fiat currency to receive (EUR)</li> <li>satoshi: Satoshi amount of the request</li> <li>fiatAmount: Fiat amount (EUR) of the request </li> <li>serviceFees: Fees for the transaction in the selected currency </li> <li>expiration: Ask expiration timestamp. If expired please refresh the Ask.</li> <li>minerFees: Bitcoin network fees, used to pay for the inclusion of the transaction in the blockchain.</li> </ul>"},{"location":"Old/exchange/Exchange.en/#errors_1","title":"Errors","text":"<ul> <li>TRADING_LIMITS_EXCEEDED </li> <li>NOT_ENOUGH_BTC_AMOUNT </li> <li>NO_SUCH_SELLER (Internal selling error)</li> <li>NO_SUCH_WALLET (Internal wallet error)</li> </ul>"},{"location":"Old/exchange/Exchange.en/#ios_5","title":"iOS","text":"<pre><code>\n// Sell request for 50\u20ac\nlet params = \n  CreateOrRefreshAskParams(currency: .eur, fiatAmount: 50.0)\n\n// Sell request for 100000000 satoshi\nlet params = \n  CreateOrRefreshAskParams(currency: .eur, satoshi: 100000000)\n\n// Refresh ask \nlet params = \n  CreateOrRefreshAskParams(askID: \"id\", currency: .eur, fiatAmount: 100.0)\n\nconio.exchangeService.createOrRefreshAsk(params: params) { result in\n  result.analysis(ifSuccess: { createdAsk in\n    // CreatedBid\n  }, ifFailure: { error in\n    // ServiceError\n  })\n}\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#android_5","title":"Android","text":"<pre><code>\n// Sell request for 50\u20ac\nCreateOrRefreshAskParams params = \n  new CreateOrRefreshAskParams(Currency.EUR, 50d);\n\n// Refresh ask \nCreateOrRefreshAskParams params = \n  new CreateOrRefreshAskParams(\"id\", Currency.EUR, 50d);\n\nconio.exchangeService.createOrRefreshAsk(params: params) { result in\n result.analysis(ifSuccess: { createdAsk in\n        // CreatedAsk\n    }, ifFailure: { error in\n        // Exception\n    })\n});\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#finalize-ask","title":"Finalize Ask","text":"<p>To finalize the sell you just need to input the ID of the <code>CreatedAsk</code> in the <code>Sell</code> operation.</p>"},{"location":"Old/exchange/Exchange.en/#parameters_5","title":"Parameters","text":"<p>An object <code>SellParams</code> containing:</p> <ul> <li>askId: <code>Ask</code> identifier</li> </ul>"},{"location":"Old/exchange/Exchange.en/#returns_6","title":"Returns","text":"<p>An object <code>SellResult</code> containing:</p> <ul> <li>askId: <code>Ask</code> identifier</li> </ul>"},{"location":"Old/exchange/Exchange.en/#errors_2","title":"Errors","text":"<ul> <li>TRADING_LIMITS_EXCEEDED </li> <li>TRADE_EXPIRED </li> <li>UNRECOVERABLE_ASK </li> <li>ASK_ALREADY_PAID </li> <li>NOT_ENOUGH_BTC_AMOUNT_E </li> <li>DUST_ASK (Bitcoin amount is too low)</li> <li>FIAT_AMOUNT_TOO_LOW </li> </ul>"},{"location":"Old/exchange/Exchange.en/#code_4","title":"Code","text":""},{"location":"Old/exchange/Exchange.en/#ios_6","title":"iOS","text":"<pre><code>let params = SellParams(askID: askID)\n\nconio.exchangeService.sell(params: params) { result in\n  result.analysis(ifSuccess: { sellResult in\n    // SellResult\n  }, ifFailure: { error in\n    // ServiceError\n  })\n}\n</code></pre>"},{"location":"Old/exchange/Exchange.en/#android_6","title":"Android","text":"<pre><code>SellParams sellParams = new SellParams(\"askId\");\n\nconio.exchangeService.sell(params: params) { result in\n result.analysis(ifSuccess: { sellResult in\n        // SellResult\n    }, ifFailure: { error in\n        // Exception\n    })\n});\n</code></pre>"},{"location":"Old/exchange/Exchange/","title":"Operazioni sul mercato","text":""},{"location":"Old/exchange/Exchange/#prezzo-attuale-del-bitcoin","title":"Prezzo attuale del Bitcoin","text":"<p>\u00c8\u00a0possibile recuperare il miglior prezzo di acquisto e di vendita attuale del bitcoin, specificando la valuta nel quale lo si vuole ottenere. Inoltre, l'SDK offre la possibilit\u00e0 di convertire un ammontare in bitcoin nella valuta specificata.</p>"},{"location":"Old/exchange/Exchange/#metodo","title":"Metodo","text":"<p><code>exchangeService.currentPrice</code></p>"},{"location":"Old/exchange/Exchange/#parametri","title":"Parametri","text":"<p>Un oggetto di tipo <code>CurrentPriceParams</code> contenente:</p> <ul> <li> <p>currency: di tipo <code>Currency</code>, la valuta in cui si vuole ottenere il prezzo;</p> </li> <li> <p>@Opzionale cryptoAmount: di tipo <code>long</code>, l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi) che si vuole convertire nella valuta indicata.</p> </li> </ul>"},{"location":"Old/exchange/Exchange/#risposta","title":"Risposta","text":"<p>Un <code>CurrentPrice</code> contenente:</p> <ul> <li> <p>buyFiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), il prezzo di acquisto, calcolato nella valuta indicata tramite il campo currency;</p> </li> <li> <p>sellFiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), il prezzo di vendita, calcolato nella valuta indicata tramite il campo currency.</p> </li> </ul>"},{"location":"Old/exchange/Exchange/#codice","title":"Codice","text":""},{"location":"Old/exchange/Exchange/#android","title":"Android","text":"<pre><code>// Example 1: get current price\nCurrentPriceParams params = new CurrentPriceParams(Currency.EUR);\n\n// Example 2: get current price of a specified amount\nCurrentPriceParams params = new CurrentPriceParams(Currency.EUR, 100000000);\n\nconio.exchangeService.currentPrice(params)\n    .asCallback(result -&gt; result.analysis(\n        currentPrice -&gt; { /* Handle CurrentPrice */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/exchange/Exchange/#ios","title":"iOS","text":"<pre><code>// Recupero del prezzo attuale\nlet params = CurrentPriceParams(currency: .eur)\n\n// Conversione di 50.000.000 satoshi (0,5 BTC) in euro\nlet params = CurrentPriceParams(currency: .eur, satoshiAmount: 50_000_000)\n\nlet consumer = conio.exchangeService.currentPrice(params: params)\nconsumer.asCallback { result in\n    switch result {\n    case .success(let prices):\n        // CurrentPrice\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/exchange/Exchange/#prezzo-storico-del-bitcoin","title":"Prezzo storico del Bitcoin","text":"<p>\u00c8 possibile recuperare il prezzo storico del Bitcoin selezionando una finestra temporale di riferimento.</p>"},{"location":"Old/exchange/Exchange/#metodo_1","title":"Metodo","text":"<p><code>exchangeService.historicalPrices</code></p>"},{"location":"Old/exchange/Exchange/#parametri_1","title":"Parametri","text":"<p>Un oggetto di tipo <code>HistoricalPricesParams</code> contenente:</p> <ul> <li> <p>currency: di tipo <code>Currency</code>, la valuta in cui si vuole ottenere il prezzo;</p> </li> <li> <p>timeFrame: di tipo <code>TimeFrame</code>, la finestra temporale di riferimento;</p> </li> <li> <p>@Default(24h) interval: di tipo <code>long</code>, l'intervallo che si vuole porre tra i prezzi restituiti;</p> </li> </ul>"},{"location":"Old/exchange/Exchange/#risposta_1","title":"Risposta","text":"<p>Un <code>HistoricalPrices</code> contenente:</p> <ul> <li> <p>prices: di tipo <code>List&lt;PricePoint&gt;</code>, la lista dei prezzi del bitcoin nella finestra temporale specificata;</p> </li> <li> <p>analytics: di tipo <code>PriceAnalytics</code>, contenente:</p> <ul> <li> <p>deltaFiat: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), la variazione in valuta del prezzo del Bitcoin dall'inizio del periodo di riferimento;</p> </li> <li> <p>deltaPercentage: la variazione in percentuale del prezzo del Bitcoin dall'inizio del periodo di riferimento;</p> </li> <li> <p>trend: di tipo <code>PriceTrend</code>, un enumerato che rappresenta se il prezzo del Bitcoin, dall'inizio del periodo di riferimento, \u00e8 cresciuto, \u00e8 diminuito o \u00e8 rimasto stagnante;</p> </li> </ul> </li> </ul>"},{"location":"Old/exchange/Exchange/#codice_1","title":"Codice","text":""},{"location":"Old/exchange/Exchange/#android_1","title":"Android","text":"<pre><code>// Example 1: get last month prices with default interval (1 day)\nHistoricalPricesParams params = new HistoricalPricesParams(\n    Currency.EUR,\n    TimeFrame.lastMonth()\n);\n\n// Example 2: get prices from 16th April 2018 to 16th April 2019 with 1 week interval\nHistoricalPricesParams params = new HistoricalPricesParams(\n    Currency.EUR,\n    new TimeFrame(1523885446000L, 1563465540000L),\n    604800000\n);\n\nconio.exchangeService.historicalPrices(params)\n    .asCallback(result -&gt; result.analysis(\n        prices -&gt; { /* Handle HistoricalPrices */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/exchange/Exchange/#ios_1","title":"iOS","text":"<pre><code>// Prezzo dal 16 aprile 2019 al 16 aprile 2018\n// Intervallo standard: 1 giorno\nlet params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000)\n\n// Prezzo dal 16 aprile 2019 al 16 aprile 2018\n// Intervallo selezionato: 1 settimana\nlet params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000, interval: 604800000)\n\nlet consumer = conio.exchangeService.historicalPrices(params: params)\nconsumer.asCallback { result in\n    switch result {\n    case .success(let prices):\n        // HistoricalPrices\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/exchange/Exchange/#recupero-informazioni-di-trading","title":"Recupero informazioni di trading","text":"<p>Recupero delle informazioni riassuntive delle operazioni di compravendita eseguite dall'utente.</p>"},{"location":"Old/exchange/Exchange/#metodo_2","title":"Metodo","text":"<p><code>exchangeService.tradingInfo</code></p>"},{"location":"Old/exchange/Exchange/#parametri_2","title":"Parametri","text":"<p>Un oggetto di tipo <code>TradingInfoParams</code>, contenente:</p> <ul> <li>currency: di tipo <code>Currency</code>, la valuta sulla quale si vuole ottenere la risposta;</li> </ul>"},{"location":"Old/exchange/Exchange/#risposta_2","title":"Risposta","text":"<ul> <li> <p>weightedBidBalance: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), controvalore investito, calcolato come la media pesata del valore (in valuta fiat) degli acquisti moltiplicato per il bilancio attuale;</p> </li> <li> <p>currency: di tipo <code>Currency</code>, la valuta di riferimento della risposta;</p> </li> <li> <p>bidSummary: di tipo <code>TradingSummary</code>, contenente un riepilogo delle operazioni di acquisto;</p> </li> <li> <p>askSummary: di tipo <code>TradingSummary</code>, contenente un riepilogo delle operazioni di vendita;</p> </li> </ul> <p>Le propriet\u00e0 di tipo <code>TradingSummary</code> contengono:</p> <ul> <li> <p>operationsCount: di tipo <code>intero</code>, il numero totale di operazioni;</p> </li> <li> <p>totalFiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), l'ammontare totale delle operazioni.</p> </li> </ul>"},{"location":"Old/exchange/Exchange/#codice_2","title":"Codice","text":""},{"location":"Old/exchange/Exchange/#android_2","title":"Android","text":"<pre><code>TradingInfoParams params = new TradingInfoParams(Currency.EUR);\n\nconio.exchangeService.tradingInfo(params)\n    .asCallback(result -&gt; result.analysis(\n        info -&gt; { /* Handle TradingInfo */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre> <pre><code>\nlet consumer = conio.exchangeService.tradingInfo()\nconsumer.asCallback { result in\n    switch result {\n    case .success(let info):\n        // Handle TradingInfo\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/exchange/Exchange/#recupero-commissioni-di-trading","title":"Recupero commissioni di trading","text":"<p>Per recuperare le informazioni delle commissioni sulle operazioni di compravendita.</p>"},{"location":"Old/exchange/Exchange/#metodo_3","title":"Metodo","text":"<p><code>exchangeService.tradingFees</code></p>"},{"location":"Old/exchange/Exchange/#parametri_3","title":"Parametri","text":"<p>Un oggetto di tipo <code>TradingFeesParams</code>, contenente:</p> <ul> <li>currency: di tipo <code>Currency</code>, la valuta sulla quale si vuole ottenere la risposta;</li> </ul>"},{"location":"Old/exchange/Exchange/#risposta_3","title":"Risposta","text":"<p>Un oggetto di tipo <code>TradingFees</code>, contenente:</p> <ul> <li> <p>currency: di tipo <code>Currency</code>, la valuta di riferimento della risposta;</p> </li> <li> <p>bidServiceFees: di tipo <code>List&lt;ServiceFee&gt;</code>, contenente la lista delle fascie di commissioni per le operazioni di acquisto;</p> </li> <li> <p>askServiceFees: di tipo <code>List&lt;ServiceFee&gt;</code>, contenente la lista delle fascie di commissioni per le operazioni di vendita.</p> </li> </ul> <p>Le propriet\u00e0 di tipo <code>ServiceFee</code> contengono:</p> <ul> <li> <p>rangeFrom: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), il valore (in valuta fiat) dal quale viene applicata;</p> </li> <li> <p>@Opzionale percentage: di tipo <code>double</code>, la percentuale di commissione rispetto al valore del operazione, nulla se la <code>ServiceFee</code> rappresenta una commissione assoluta;</p> </li> <li> <p>@Opzionale fiatAmount: di tipo <code>Decimal</code> (iOS) /<code>BigDecimal</code> (Android), la commisione assuluta applicata su ogni operazione, nulla se la <code>ServiceFee</code> rappresenta una commissione in percentuale.</p> </li> </ul>"},{"location":"Old/exchange/Exchange/#codice_3","title":"Codice","text":""},{"location":"Old/exchange/Exchange/#android_3","title":"Android","text":"<pre><code>TradingFeesParams params = new TradingFeesParams(Currency.EUR);\n\nconio.exchangeService.tradingFees(params)\n    .asCallback(result -&gt; result.analysis(\n        fees -&gt; { /* Handle TradingFees */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre> <pre><code>let consumer = conio.exchangeService.tradingFees()\nconsumer.asCallback { result in\n    switch result {\n    case .success(let fees):\n        // Handle TradingFees\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/exchange/Exchange/#recupero-limiti-di-trading","title":"Recupero limiti di trading","text":"<p>Per recuperare i limiti di compravendita associati ad un utente, assegnati in fase di signup tramite il campo userLevel.</p>"},{"location":"Old/exchange/Exchange/#metodo_4","title":"Metodo","text":"<p><code>exchangeService.tradingLimits</code></p>"},{"location":"Old/exchange/Exchange/#risposta_4","title":"Risposta","text":"<p>Un oggetto di tipo <code>AllTradingLimits</code>, contenente:</p> <ul> <li> <p>buyLimits: di tipo <code>TradingLimits</code>, contenenti informazioni sui limiti di acquisto;</p> </li> <li> <p>sellLimits: di tipo <code>TradingLimits</code>, contenenti informazioni sui limiti di vendita.</p> </li> </ul> <p>Le propriet\u00e0 di tipo <code>TradingLimits</code> contengono:</p> <ul> <li> <p>minFiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), il limite minimo attualmente a disposizione;</p> </li> <li> <p>maxFiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), il limite massimo attualmente a disposizione;</p> </li> <li> <p>allLimits: di tipo <code>List&lt;Limit&gt;</code>, una lista di limiti, ciascuno conterr\u00e0 la rispettiva tipologia (<code>DAILY</code>, <code>MONTHLY</code>, <code>YEARLY</code>) ed il valore per ciascuno di essi;</p> </li> <li> <p>currentLimits: di tipo <code>List&lt;Limit&gt;</code>, il valore residuo per ciascuno dei limiti contenuti nell'oggetto <code>allLimits</code> del punto precedente.</p> </li> </ul>"},{"location":"Old/exchange/Exchange/#codice_4","title":"Codice","text":""},{"location":"Old/exchange/Exchange/#android_4","title":"Android","text":"<pre><code>conio.exchangeService.tradingLimits()\n    .asCallback(result -&gt; result.analysis(\n        limits -&gt; { /* Handle AllTradingLimits */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/exchange/Exchange/#ios_2","title":"iOS","text":"<pre><code>let consumer = conio.exchangeService.tradingLimits()\nconsumer.asCallback { result in\n    switch result {\n    case .success(let fees):\n        // Handle AllTradingLimits\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/exchange/Exchange/#acquisto-di-bitcoin","title":"Acquisto di Bitcoin","text":"<p>Per poter acquistare dei Bitcoin \u00e8 necessario effettuare due operazioni. La prima \u00e8 quella di creazione di una <code>Bid</code>, ovvero di una richiesta di acquisto di una determinata somma di Bitcoin ad un certo prezzo. All'interno della <code>Bid</code> si troveranno le <code>WiretransferInfo</code> che dovranno essere usate dal client per effettuare il pagamento. Infine si dovr\u00e0 utilizzare la seconda operazione verso Conio per comunicare l'avvenuto pagamento della <code>Bid</code> allegando anche una <code>BidCryptoRequest</code>, generata client side, per testimoniare la legittimit\u00e0 dell'operazione.</p>"},{"location":"Old/exchange/Exchange/#creazione-della-bid","title":"Creazione della Bid","text":"<p>Una <code>Bid</code> si crea specificando la valuta che si intende utilizzare per la transazione e l'importo, o in satoshi o in valuta corrente. Ad esempio, sar\u00e0 quindi possibile richiedere una <code>Bid</code> per l'acquisto di 150\u20ac\u00a0di Bitcoin o una <code>Bid</code> per l'acquisto di 100.000.000 satoshi.</p> <p>Una volta inviata la richiesta, si otterr\u00e0 una <code>CreatedBid</code> contenente, tra le altre informazioni un <code>bidId</code>. Con questo identificativo sar\u00e0 possibile aggiornare la richiesta di Bid per rimandarne la scadenza e per ottenere le informazioni sul tasso di cambio pi\u00f9 aggiornate. Questo scenario \u00e8 utile nei casi in cui tra la richiesta della Bid e l'effettiva azione dell'utente passi del tempo che renderebbe il tasso di cambio obsoleto.</p>"},{"location":"Old/exchange/Exchange/#metodo_5","title":"Metodo","text":"<p><code>exchangeService.createOrRefreshBid</code></p>"},{"location":"Old/exchange/Exchange/#parametri_4","title":"Parametri","text":"<p>Un oggetto di tipo <code>CreateOrRefreshBidParams</code>, costruibile tramite i metodi factory <code>CreateOrRefreshBidParams.fromFiat</code> o <code>CreateOrRefreshBidParams.fromCrypto</code> che richiedono:</p> <ul> <li> <p>currency: di tipo <code>Currency</code>, la valuta dell'operazione;</p> </li> <li> <p>amount: di tipo <code>long</code> per <code>.fromCrypto</code> o <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android) per <code>.fromFiat</code>, l'ammontare, a seconda del metodo usato, in satoshi o nella valuta scelta che si vuole acquistare;</p> </li> <li> <p>@Opzionale bidId: di tipo <code>String</code>, l'id della bid, da valorizzare solo in caso di refresh della bid stessa.</p> </li> </ul>"},{"location":"Old/exchange/Exchange/#risposta_5","title":"Risposta","text":"<p>Un oggetto di tipo <code>CreatedBid</code> che contiene:</p> <ul> <li> <p>id: di tipo <code>String</code>, l'id utile al refresh o alla finalizzazione della bid;</p> </li> <li> <p>currency: di tipo <code>Currency</code>, la valuta dell'operazione;</p> </li> <li> <p>cryptoAmount: di tipo <code>long</code>, l'ammontare in satoshi della richiesta d'acquisto;</p> </li> <li> <p>fiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), l'ammontare in valuta corrente della richiesta d'acquisto al netto delle commissioni;</p> </li> <li> <p>grossFiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), l'ammontare in valuta corrente della richiesta d'acquisto comprensivo delle commissioni;</p> </li> <li> <p>serviceFee: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), le commissioni di servizio per la transazione, espresse nella currency di riferimento</p> </li> <li> <p>expiration: di tipo <code>long</code>, il timestamp di scadenza della richiesta di pagamento. Se la bid scade sar\u00e0 necessario aggiornarla per proseguire</p> </li> <li> <p>wireTransferInfo: di tipo <code>WireTransferInfo</code>, le informazioni necessarie per procedere al pagamento della Bid tramite bonifico.</p> </li> </ul>"},{"location":"Old/exchange/Exchange/#codice_5","title":"Codice","text":""},{"location":"Old/exchange/Exchange/#android_5","title":"Android","text":"<pre><code>// Example 1: \u20ac200 bid\nCreateOrRefreshBidParams params = CreateOrRefreshBidParams.fromFiat(Currency.EUR, 20000);\n// Example 2: 1.000.000.000 satoshi bid\nCreateOrRefreshBidParams params = CreateOrRefreshBidParams.fromCrypto(Currency.EUR, 1000000000);\n\nconio.exchangeService.createOrRefreshBid(params)\n    .asCallback(result -&gt; result.analysis(\n        bid -&gt; { /* Handle CreatedBid */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/exchange/Exchange/#ios_3","title":"iOS","text":"<pre><code>\n// Richiesta d'acquisto per 50\u20ac\nlet params = CreateOrRefreshBidParams(currency: .eur, fiatAmount: 50.0)\n\n// Richiesta d'acquisto per 1.000.000 satoshi\n let params = CreateOrRefreshBidParams(currency: .eur, satoshi: 1000000)\n\n// Aggiornamento di una richiesta d'acquisto per 100\u20ac\nlet params = CreateOrRefreshBidParams(bidID: \"bididentifier\", currency: .eur, fiatAmount: 100.0)\n\nlet consumer = conio.exchangeService.createOrRefreshBid(params: params)\nconsumer.asCallback { result in\n    switch result {\n    case .success(let bid):\n        // Handle CreatedBid\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/exchange/Exchange/#utilizzo-della-bid-pagamento","title":"Utilizzo della Bid (pagamento)","text":"<p>Una volta effettuato il pagamento tramite bonifico si dovr\u00e0 usare l'operazione <code>purchase</code> per comunicare a Conio l'avvenuto pagamento. Questa operazione richieder\u00e0 una <code>BidCryptoRequest</code>.</p>"},{"location":"Old/exchange/Exchange/#metodo_6","title":"Metodo","text":"<p><code>exchangeService.purchase</code></p>"},{"location":"Old/exchange/Exchange/#parametri_5","title":"Parametri","text":"<p>Un oggetto di tipo <code>PurchaseParams</code> contenente:</p> <ul> <li> <p>bidId: d tipo <code>String</code>, l'id della <code>Bid</code> da pagare</p> </li> <li> <p>cryptoRequest: di tipo <code>BidCryptoRequest</code>, configurabile come descritto nell'apposita sezione</p> </li> </ul>"},{"location":"Old/exchange/Exchange/#risposta_6","title":"Risposta","text":"<p>Un oggetto di tipo <code>Success</code>, che conferma l'avvenuta operazione.</p>"},{"location":"Old/exchange/Exchange/#errori","title":"Errori","text":"<ul> <li>INVALID_CRYPTO_PROOF La crypto proof non \u00e8 valida</li> <li>INVALID_PAYMENT_METHOD Il metodo di pagamento non \u00e8 valido</li> <li>UNSUPPORTED_PAYMENT_METHOD Il metodo di pagamento non \u00e8 supportato</li> <li>TRADING_LIMITS_EXCEEDED La bid viola i limiti massimi di acquisto dell'utente</li> <li>TRADE_EXPIRED La bid \u00e8 scaduta</li> <li>BID_ALREADY_PAID La bid \u00e8 gi\u00e0 stata pagata</li> <li>BID_NOT_YET_PAID La bid non \u00e8 ancora stata pagata</li> <li>UNRECOVERABLE_BID La bid \u00e8 in errore</li> <li>FIAT_AMOUNT_TOO_LOW L'importo in Fiat \u00e8 inferiore al limite minimo</li> </ul>"},{"location":"Old/exchange/Exchange/#codice_6","title":"Codice","text":""},{"location":"Old/exchange/Exchange/#android_6","title":"Android","text":"<pre><code>PurchaseParams params = new PurchaseParams(\"bidId\", bidCryptoRequest);\n\nconio.exchangeService.purchase(params)\n    .asCallback(result -&gt; result.analysis(\n        success -&gt; { /* Handle Success */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/exchange/Exchange/#ios_4","title":"iOS","text":"<pre><code>let params = PurchaseParams(bidId: \"bidId\", cryptoRequest: bidCryptoRequest)\nlet consumer = conio.exchangeService.purchase(params: params)\nconsumer.asCallback { result in\n    switch result {\n    case .success:\n        // Handle Success\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/exchange/Exchange/#vendita-di-bitcoin","title":"Vendita di Bitcoin","text":"<p>Per poter vendere dei Bitcoin \u00e8 necessario effettuare due operazioni. La prima \u00e8 quella di creazione di una <code>Ask</code>, ovvero di una richiesta di vendita di una determinata somma di Bitcoin ad un certo prezzo. Si procede poi con il pagamento di tale <code>Ask</code>, passando l'<code>askId</code> e allegando anche una <code>AskCryptoRequest</code>, generata client side, per testimoniare la legittimit\u00e0 dell'operazione. L'SDK firmer\u00e0 la transazione che sposter\u00e0 i Bitcoin dal wallet dell'utente, restituendo alla fine l'id della <code>Ask</code> completata.</p>"},{"location":"Old/exchange/Exchange/#creazione-della-ask","title":"Creazione della Ask","text":"<p>Per richiedere una <code>Ask</code> si dovr\u00e0 procedere analogamente a quanto visto per la Bid. Sar\u00e0 quindi possibile richiedere una <code>CreatedAsk</code> per la vendita di 150\u20ac o una per la vendita di 100.000.000 satoshi.</p> <p>Una volta inviata la richiesta, si otterr\u00e0 una <code>CreatedAsk</code> contenente, tra le altre informazioni un <code>askId</code>. Con questo identificativo sar\u00e0 possibile aggiornare la richiesta di Ask per rimandarne la scadenza e per ottenere le informazioni sul tasso di cambio pi\u00f9 aggiornate. Questo scenario \u00e8 utile nei casi in cui tra la richiesta della Ask e l'effettiva azione dell'utente passi del tempo che renderebbe il tasso di cambio obsoleto.</p>"},{"location":"Old/exchange/Exchange/#metodo_7","title":"Metodo","text":"<p><code>exchangeService.createOrRefreshAsk</code></p>"},{"location":"Old/exchange/Exchange/#parametri_6","title":"Parametri","text":"<p>Un oggetto di tipo <code>CreateOrRefreshAskParams</code>, costruibile tramite i metodi factory <code>CreateOrRefreshAskParams.fromFiat</code>, <code>CreateOrRefreshAskParams.fromCrypto</code> o <code>CreateOrRefreshAskParams.withAll</code> che richiedono:</p> <ul> <li> <p>currency: di tipo <code>Currency</code>, la valuta dell'operazione;</p> </li> <li> <p>@Opzionale cryptoAmount: di tipo <code>long</code> per <code>.fromCrypto</code>, l'ammontare in satoshi che si vuole vendere;</p> </li> <li> <p>@Opzionale fiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android) per <code>.fromFiat</code>, l'ammontare nella valuta scelta che si vuole vendere;</p> </li> <li> <p>@Opzionale askId: di tipo <code>String</code>, l'id della ask, da valorizzare solo in caso di refresh della ask stessa.</p> </li> </ul> <p>Tramite il metodo factory <code>CreateOrRefreshAskParams.withAll</code> \u00e8 possibile richiedere l'importo massimo vendibile. Tale importo sar\u00e0 sogetto, oltre che alla disponibilit\u00e0 del utente, anche ai suoi limiti di vendita.</p>"},{"location":"Old/exchange/Exchange/#risposta_7","title":"Risposta","text":"<p>Un oggetto di tipo <code>CreatedAsk</code> che contiene:</p> <ul> <li> <p>askId: di tipo <code>String</code>, l'id utile al refresh o alla finalizzazione della ask;</p> </li> <li> <p>currency: di tipo <code>Currency</code>, la valuta dell'operazione;</p> </li> <li> <p>cryptoAmount: di tipo <code>long</code>, l'ammontare in satoshi della richiesta d'acquisto</p> </li> <li> <p>fiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), l'ammontare in valuta corrente della richiesta d'acquisto;</p> </li> <li> <p>serviceFee: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), le commissioni di servizio per la transazione, espresse nella currency di riferimento;</p> </li> <li> <p>miningFee: di tipo <code>long</code>, le commissioni per scrivere la transazione in blockchain, espresse in satoshi;</p> </li> <li> <p>expiration: di tipo <code>long</code>, lo Unix Timestamp di scadenza della richiesta di pagamento. Se la bid scade sar\u00e0 necessario aggiornarla per proseguire</p> </li> </ul>"},{"location":"Old/exchange/Exchange/#errori_1","title":"Errori","text":"<ul> <li>TRADING_LIMITS_EXCEEDED L'utente ha 0 Eur di limiti residui</li> <li>NOT_ENOUGH_BTC_AMOUNT solo se non ha btc L'utente non ha alcun bitcoin</li> <li>NO_SUCH_SELLER Errore interno del sottosistema di vendita</li> <li>NO_SUCH_WALLET Errore interno del sottosistema di wallet</li> </ul>"},{"location":"Old/exchange/Exchange/#android_7","title":"Android","text":"<pre><code>// Example 1: \u20ac200 ask\nCreateOrRefreshAskParams params = CreateOrRefreshAskParams.fromFiat(Currency.EUR, BigDecimal(\"200\"));\n// Example 2: 1.000.000.000 satoshi ask\nCreateOrRefreshAskParams params = CreateOrRefreshAskParams.fromCrypto(Currency.EUR, 1000000000);\n\nconio.exchangeService.createOrRefreshAsk(params)\n    .asCallback(result -&gt; result.analysis(\n        ask -&gt; { /* Handle CreatedAsk */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/exchange/Exchange/#ios_5","title":"iOS","text":"<pre><code>\n// Richiesta di vendita per 50\u20ac\nlet params =\n    CreateOrRefreshAskParams(currency: .eur, fiatAmount: 50.0)\n\n// Richiesta di vendita per 100000000 satoshi\nlet params =\n    CreateOrRefreshAskParams(currency: .eur, satoshi: 100000000)\n\n// Aggiornamento del valore di una Ask esistente\nlet params =\n    CreateOrRefreshAskParams(askID: \"id\", currency: .eur, fiatAmount: 100.0)\n\n\nconio.exchangeService.createOrRefreshAsk(params: params).asCallback { result in\n    switch result {\n    case .success(let createdAsk):\n        // CreatedBid\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/exchange/Exchange/#utilizzo-della-ask","title":"Utilizzo della Ask","text":"<p>Ottenuta la <code>Ask</code> da utilizzare \u00e8 possibile procedere con la finalizzazione della vendita. Per effettuare questa operazione bisogner\u00e0 passare l'ID della <code>CreatedAsk</code> alla <code>Sell</code> operation, insieme alla <code>AskCryptoRequest</code>.</p>"},{"location":"Old/exchange/Exchange/#metodo_8","title":"Metodo","text":"<p><code>exchangeService.sell</code></p>"},{"location":"Old/exchange/Exchange/#parametri_7","title":"Parametri","text":"<p>Un oggetto di tipo <code>CryptoSellParams</code> contenente:</p> <ul> <li> <p>askId: di tipo <code>String</code>, l'id della <code>Ask</code></p> </li> <li> <p>cryptoRequest: di tipo <code>AskCryptoRequest</code>, configurabile come descritto nell'apposita sezione</p> </li> </ul>"},{"location":"Old/exchange/Exchange/#risposta_8","title":"Risposta","text":"<p>Un oggetto di tipo <code>Success</code> che conferma l'avvenuta operazione.</p>"},{"location":"Old/exchange/Exchange/#errori_2","title":"Errori","text":"<ul> <li>TRADING_LIMITS_EXCEEDED La ask viola i limiti massimi di acquisto dell'utente</li> <li>TRADE_EXPIRED La ask \u00e8 scaduta</li> <li>UNRECOVERABLE_ASK La ask \u00e8 in errore</li> <li>ASK_ALREADY_PAID La ask \u00e8 gi\u00e0 stata pagata</li> <li>NOT_ENOUGH_BTC_AMOUNT_E Bitcoin disponibili non sufficienti</li> <li>DUST_ASK Importo in Bitcoin troppo piccolo</li> <li>FIAT_AMOUNT_TOO_LOW Importo in Eur troppo basso</li> </ul>"},{"location":"Old/exchange/Exchange/#codice_7","title":"Codice","text":""},{"location":"Old/exchange/Exchange/#android_8","title":"Android","text":"<pre><code>CryptoSellParams params = new CryptoSellParams(\"askId\", askCryptoRequest);\n\nconio.exchangeService.sell(params)\n    .asCallback(result -&gt; result.analysis(\n        success -&gt; { /* Handle Success */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/exchange/Exchange/#ios_6","title":"iOS","text":"<pre><code>let params = CryptoSellParams(askId: askId, cryptoRequest: askCryptoRequest)\n\nconio.exchangeService.createOrRefreshAsk(params: params).asCallback { result in\n    switch result {\n    case .success:\n        // Handle Succes\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/installation/Android.en/","title":"Install on Android","text":"<p>You can install the SDK using Artifactory as Maven repository. To authenticate you have to put your credentials in the app gradle.properties file:</p>"},{"location":"Old/installation/Android.en/#gradleproperties","title":"gradle.properties","text":"<pre><code>artifactory_user={username}\nartifactory_password={password}\n</code></pre> <p>Then in the app build.gradle file add the repository address:</p>"},{"location":"Old/installation/Android.en/#appbuildgradle","title":"app/build.gradle","text":"<pre><code>repositories {\n\n    ...\n\n    maven {\n        url \"https://d314astu88ufzo.cloudfront.net/artifactory/gradle-release-local\"\n        credentials(PasswordCredentials) {\n            username \"${artifactory_user}\"\n            password \"${artifactory_password}\"\n        }\n    }\n}\n</code></pre> <p>Finally add Conio SDK as app dependency:</p>"},{"location":"Old/installation/Android.en/#appbuildgradle_1","title":"app/build.gradle","text":"<pre><code>dependencies {\n\n    ...\n\n    implementation 'com.conio:sdk2:[VERSION]'\n}\n</code></pre> <p>Then just sync Gradle files.</p>"},{"location":"Old/installation/Android/","title":"Installazione su Android","text":"<p>L'SDK si installa utilizzando il repository Maven di Artifactory. Per potersi autenticare al repository \u00e8 necessario configurare le credenziali nel file gradle.properties come segue:</p>"},{"location":"Old/installation/Android/#gradleproperties","title":"gradle.properties","text":"<pre><code>artifactory_user={username}\nartifactory_password={password}\n</code></pre> <p>A questo punto sar\u00e0 possibile aggiungere l'indirizzo del repository nel build.gradle dell'applicazione:</p>"},{"location":"Old/installation/Android/#appbuildgradle","title":"app/build.gradle","text":"<pre><code>repositories {\n\n    ...\n\n    maven {\n        url \"https://artifactory.conio.com/artifactory/gradle-release-local\"\n        credentials(PasswordCredentials) {\n            username \"${artifactory_user}\"\n            password \"${artifactory_password}\"\n        }\n    }\n}\n</code></pre> <p>Dopo aver specificato l'indirizzo del repository dal quale verranno sincronizzati gli artefatti sar\u00e0 possibile aggiungere il Conio SDK come dipendeza dell'applicazione:</p>"},{"location":"Old/installation/Android/#appbuildgradle_1","title":"app/build.gradle","text":"<pre><code>dependencies {\n\n    ...\n\n    implementation 'com.conio:sdk2:[VERSION]'\n}\n</code></pre> <p>Sincronizzando il progetto con Gradle sar\u00e0 possibile utilizzare l'SDK.</p>"},{"location":"Old/installation/iOS.en/","title":"Installation","text":""},{"location":"Old/installation/iOS.en/#prerequisites","title":"Prerequisites","text":"<ul> <li>iOS 10+</li> <li>Autoconf installed</li> <li>Automake installed</li> <li>Libtool installed</li> </ul> <p>Consider using MacOS package manager Brew to install <code>Autoconf</code>, <code>Automake</code> e <code>Libtool</code>.</p> <pre><code># Install Brew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install Autoconf, Automake and Libtool\nbrew install autoconf automake libtool\n</code></pre>"},{"location":"Old/installation/iOS.en/#cocoapods-install","title":"Cocoapods install","text":"<p>Add this line to your podfile:</p> <pre><code># The ConioSDK Core\npod 'ConioSDK', :git =&gt; 'git@bitbucket.org:squadrone/conio-swift-sdk.git', :branch =&gt; 'master'\n\n# BitcoinKit for encryption purposes\npod 'BitcoinKit', :git =&gt; 'https://github.com/Conio/BitcoinKit.git', :branch =&gt; 'keyconvert'\n</code></pre> <p>Then use the command: <code>pod install</code></p>"},{"location":"Old/installation/iOS.en/#-","title":"---","text":""},{"location":"Old/installation/iOS.en/#troubleshooting","title":"Troubleshooting","text":"<p>If you get the following error:</p> <pre><code>autoreconf: failed to run aclocal: No such file or directory\n</code></pre> <p>Try the following command:</p> <p><code>brew install autoconf &amp;&amp; brew install automake</code>.</p> <p>If you get the following error:</p> <pre><code>Can't exec \"/opt/local/bin/aclocal\": No such file or directory\n</code></pre> <p>Uninstall MacPorts with:</p> <p><code>sudo port -fp uninstall --follow-dependents installed</code></p>"},{"location":"Old/installation/iOS/","title":"Installazione","text":""},{"location":"Old/installation/iOS/#prerequisiti","title":"Prerequisiti","text":"<ul> <li>SDK supporta iOS 10+</li> <li>Autoconf installato</li> <li>Automake installato</li> <li>Libtool installato</li> </ul> <p>\u00c8 consigliato l'utilizzo del gestori di pacchetti MacOS Brew per l'installazione di <code>Autoconf</code>, <code>Automake</code> e <code>Libtool</code>.</p> <pre><code># Install Brew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install Autoconf, Automake and Libtool\nbrew install autoconf automake libtool\n</code></pre>"},{"location":"Old/installation/iOS/#installazione-con-cocoapods","title":"Installazione con Cocoapods","text":"<p>L'SDK Conio \u00e8 disponibile come Pod ed \u00e8 possibile includerla nei progetti aggiungendo le seguenti righe al Podfile:</p> <pre><code># The ConioSDK Core\npod 'ConioSDK', :git =&gt; 'git@bitbucket.org:squadrone/conio-swift-sdk.git', :branch =&gt; 'master'\n\n# BitcoinKit for encryption purposes\npod 'BitcoinKit', :git =&gt; 'https://github.com/Conio/BitcoinKit.git', :branch =&gt; 'keyconvert'\n</code></pre> <p>Eseguire il comando <code>pod install</code> nella cartella per ottenere l'SDK.</p>"},{"location":"Old/installation/iOS/#-","title":"---","text":""},{"location":"Old/installation/iOS/#possibili-errori-nellinstallazione","title":"Possibili Errori nell'installazione","text":"<p>Se si dovesse verificare il seguente messaggio di errore:</p> <pre><code>autoreconf: failed to run aclocal: No such file or directory\n</code></pre> <p>Eseguire il comando:</p> <p><code>brew install autoconf &amp;&amp; brew install automake</code>.</p> <p>Se si dovesse verificare il seguente messaggio di errore:</p> <pre><code>Can't exec \"/opt/local/bin/aclocal\": No such file or directory\n</code></pre> <p>Disinstallare dal sistema MacPorts eseguendo:</p> <p><code>sudo port -fp uninstall --follow-dependents installed</code></p>"},{"location":"Old/operation/CryptoRequest/","title":"Crypto Request","text":"<p>Alcune funzionalit\u00e0 del SDK Conio sono protette da un meccanismo chiamato Crypto Request, che aggiunge un livello di sicurezza ulteriore all'invio di alcuni parametri, tramite una firma crittografica.</p> <p>Le richieste che sfruttano questo meccanismo sono riconoscibili dalla presenza della propriet\u00e0 <code>cryptoRequest</code>, di tipo <code>[Name]CryptoRequest</code>, presente nella funzione di costruzione (costruttore o metodo factory) del oggetto da passare come parametro all'operazione. In particolare, le funzionalit\u00e0 protette da questo meccanismo sono:</p> <ol> <li><code>userService.signup</code>, registrazione dell'utente (<code>SignupCryptoRequest</code>);</li> <li><code>userService.login</code>, autenticazione dell'utente (<code>LoginCryptoRequest</code>);</li> <li><code>exchangeService.purchase</code>, acquisto di Bitcoin (<code>BidCryptoRequest</code>);</li> <li><code>exchangeService.sell</code>, vendita di Bitcoin (<code>AskCryptoRequest</code>).</li> </ol> <p>La costruzione di ogni propriet\u00e0 di tipo <code>[Name]CryptoRequest</code> necessita di un parametro <code>cryptoProof</code>, un array di byte, ottenuto tramite firma <code>RSA</code> del hash <code>SHA256</code> della concatenazione (con separatore \"|\") ordinata delle altre propriet\u00e0 del tipo <code>[Name]CryptoRequest</code> (come descritto per ogni tipo <code>[Name]CryptoRequest</code> nel apposito paragrafo).</p> <pre><code>NFC=&lt;implementazione algoritmo di conversione stringa - array di byte&gt;\nSHA256=&lt;implementazione algoritmo di hashing SHA256&gt;\nRSA_SIGN=&lt;implementazione algoritmo di firma RSA&gt;\n\nCRYPTO_PROOF = RSA_SIGN(SHA256(NFC(DATA_TO_SIGN)))\n</code></pre>"},{"location":"Old/operation/CryptoRequest/#creazione-signupcryptorequest","title":"Creazione SignupCryptoRequest","text":""},{"location":"Old/operation/CryptoRequest/#proprieta","title":"Propriet\u00e0","text":"<ul> <li>proofID: di tipo <code>String</code>, identificativo della Crypto Request;</li> <li>userID: di tipo <code>String</code>, identificativo esterno del utente;</li> <li>userLevel: di tipo <code>String</code>, livello del utente che ne stabilisce i limiti di compravendita;</li> <li>proofExpiration: di tipo <code>long</code>, istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida;</li> <li>@Opzionale iban: di tipo <code>String</code>, iban del conto bancario associato all'utente, utilizzato come metodo di pagamento per le operazioni di vendita;</li> <li>email: di tipo <code>String</code>, email dell'utente;</li> <li>firstName: di tipo <code>String</code>, nome dell'utente;</li> <li>lastName: di tipo <code>String</code>, cognome dell'utente;</li> </ul>"},{"location":"Old/operation/CryptoRequest/#data_to_sign","title":"DATA_TO_SIGN","text":"<pre><code>DATA_TO_SIGN=\"&lt;proofID&gt;|SIGNUP|&lt;userID&gt;|&lt;userLevel&gt;|&lt;proofExpiration&gt;|&lt;email&gt;|&lt;firstName&gt;|&lt;lastName&gt;\"\n\nor\n\nDATA_TO_SIGN=\"&lt;proofID&gt;|SIGNUP|&lt;userID&gt;|&lt;userLevel&gt;|&lt;proofExpiration&gt;|&lt;iban&gt;|&lt;email&gt;|&lt;firstName&gt;|&lt;lastName&gt;\"\n</code></pre> <p>Nota: il campo iban \u00e8 opzionale, pertanto, se non lo si inserisce nella <code>SignupCryptoReqeust</code>, va rimosso anche dalla stringa <code>DATA_TO_SIGN</code> (insieme al separatore \"|\")</p>"},{"location":"Old/operation/CryptoRequest/#creazione-logincryptorequest","title":"Creazione LoginCryptoRequest","text":""},{"location":"Old/operation/CryptoRequest/#proprieta_1","title":"Propriet\u00e0","text":"<ul> <li>userID: di tipo <code>String</code>, identificativo esterno del utente;</li> <li>proofExpiration: di tipo <code>long</code>, istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida;</li> </ul>"},{"location":"Old/operation/CryptoRequest/#data_to_sign_1","title":"DATA_TO_SIGN","text":"<pre><code>DATA_TO_SIGN=\"&lt;userID&gt;|LOGIN|&lt;proofExpiration&gt;\"\n</code></pre>"},{"location":"Old/operation/CryptoRequest/#creazione-askcryptorequest","title":"Creazione AskCryptoRequest","text":""},{"location":"Old/operation/CryptoRequest/#proprieta_2","title":"Propriet\u00e0","text":"<ul> <li>proofID: di tipo <code>String</code>, identificativo della Crypto Request;</li> <li>askID: di tipo <code>String</code>, identificativo della <code>CreatedAsk</code> che si vuole finalizzare;</li> <li>userID: di tipo <code>String</code>, identificativo esterno del utente;</li> <li>proofExpiration: di tipo <code>long</code>, istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida;</li> </ul>"},{"location":"Old/operation/CryptoRequest/#data_to_sign_2","title":"DATA_TO_SIGN","text":"<pre><code>DATA_TO_SIGN=\"&lt;proofID&gt;|PAY_FOR_ASK|&lt;askID&gt;|&lt;userID&gt;|&lt;proofExpiration&gt;\"\n</code></pre>"},{"location":"Old/operation/CryptoRequest/#creazione-bidcryptorequest","title":"Creazione BidCryptoRequest","text":""},{"location":"Old/operation/CryptoRequest/#proprieta_3","title":"Propriet\u00e0","text":"<ul> <li>proofID: di tipo <code>String</code>, identificativo della Crypto Request;</li> <li>bidID: di tipo <code>String</code>, identificativo dell <code>CreatedBid</code> che si vuole finalizzare;</li> <li>userID: di tipo <code>String</code>, identificativo esterno del utente;</li> <li>proofExpiration: di tipo <code>long</code>, istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida;</li> </ul>"},{"location":"Old/operation/CryptoRequest/#data_to_sign_3","title":"DATA_TO_SIGN","text":"<pre><code>DATA_TO_SIGN=\"&lt;proofID&gt;|PAY_FOR_BID_WT|&lt;bidID&gt;|&lt;userID&gt;|&lt;proofExpiration&gt;\"\n</code></pre>"},{"location":"Old/operation/Operation/","title":"Operazioni","text":""},{"location":"Old/operation/Operation/#introduzione","title":"Introduzione","text":"<p>Una volta inizializzato l'oggetto Conio, i servizi offerti dal SDK sono raggruppati in 3 categorie:</p> <ol> <li>Servizi dell'utente (<code>conio.userService.*</code>);</li> <li>Servizi del wallet (<code>conio.walletService.*</code>);</li> <li>Servizi di mercato (<code>conio.exchangeService.*</code>).</li> </ol> <p>Ogni servizio \u00e8 un metodo il cui valore di ritorno \u00e8 un implementazione dell'interfaccia <code>ServiceConsumer&lt;O&gt;</code>.</p>"},{"location":"Old/operation/Operation/#serviceconsumer","title":"ServiceConsumer","text":"<p>L'interfaccia <code>ServiceConsumer&lt;O&gt;</code> (generica in <code>O</code>, il tipo che rappresenta il risultato del servizio stesso) dichiara le modalit\u00e0 con cui i risultati dei servizi possono essere fruiti, infatti espone i metodi:</p> <ul> <li><code>asCallbeck</code>, che richiede come parametro una callback che verr\u00e0 invocata con il risultato del servizio;</li> <li>(Android) <code>asFlow</code>, che restituisce un oggetto di tipo Flow, pi\u00f9 adatto al paradigma di programmazione reattiva;</li> <li>(iOS) <code>asPublisher</code>, TODO.</li> </ul>"},{"location":"Old/operation/Operation/#code","title":"Code","text":""},{"location":"Old/operation/Operation/#android-java","title":"Android (Java)","text":"<pre><code>conio.walletService.currentBitcoinAddress().asCallback(result -&gt; result.analysis(\n        address -&gt; { /* ... */ },\n        error -&gt; { /* ... */ }\n));\n</code></pre>"},{"location":"Old/operation/Operation/#android-kotlin","title":"Android (Kotlin)","text":"<pre><code>runBlocking {\n    conio.walletService.currentBitcoinAddress().asFlow().first().analysis(\n            { address -&gt; /* ... */ },\n            { error -&gt; /* ... */ }\n    )\n}\n</code></pre>"},{"location":"Old/operation/Operation/#eccezioni-possibili","title":"Eccezioni possibili","text":""},{"location":"Old/operation/Operation/#conioerror-ios","title":"ConioError (iOS)","text":"<p>Questo errore raggruppa tutte le possibili risposte di errore direttamente legate alle operazioni.</p> <pre><code>\n// General operation error with name and/or description\ncase onOperation(String)\n// Decoding data error\ncase unableToDecodeData\n// Cryptographic operation error\ncase onCryptography\n// Secure storage operation error\ncase onStorage\n// OAuth flow error: unable to retrieve and/or refresh access token\ncase unauthorized\n// TBD\ncase appImprovementAcceptanceNotAccepted\n// TBD\ncase clientSupportAcceptanceNotAccepted\n// Ask operation already paid\ncase askAlreadyPaid\n// Bid operation already paid\ncase bidAlreadyPaid\n// Bid operation is expired\ncase bidExpired\n// TBD\ncase bidIsInError\n// Bid operation is not yet paid\ncase bidNotYetPaid\ncase bithustlerServiceCouldNotCreateSeller\n// TBD\ncase cardsLimitsExceeded\ncase cardsServiceCouldNotCreatePayer\ncase duplicateEmailAddress\ncase dustAsk\ncase dustTransaction\n// Fiat amount is under the minumum level limit\ncase fiatAmountTooLow\ncase inconsistentState\ncase inconsistentTransaction\ncase invalidIban\ncase invalidMessageSignature\n// Used payment method is not valid\ncase invalidPaymentMethod\ncase invalidToken\ncase invalidTokenPayload\n// Crypto proof used for operation is invalid\ncase invalidCryptoProof\ncase multipleSellMethods\ncase noSuch3DSecure\ncase noSuchSellMethod\n// TBD\ncase noSuchSeller\n// TBD\ncase noSuchWallet\ncase noSuchWithdrawalFeesInfo\ncase notEnoughBtcAmount\ncase tradeExpired\n// Bid operation exceeded user purchase max limits\ncase tradingLimitsExceeded\ncase unavailableBtcSubsystem\n// Ask operation is in an error status\ncase unrecoverableAsk\n// Bid operation is in an error status\ncase unrecoverableBid\n// Payment method used in not supported\ncase unsupportedPaymentMethod\ncase walletAlreadyCreatedWithDifferentKeys\ncase walletAlreadyOwnedByAnotherUser\n// Unknown error with description\ncase unknown(String)\n// Conio SDK version is outdated\ncase outdatedSdk\n// Server is under maintenance\ncase underMaintenance\n</code></pre>"},{"location":"Old/operation/Operation/#conioexception-android","title":"ConioException (Android)","text":"<p>Questo errore raggruppa (sia come namespace che come supertipo) tutte le possibili risposte di errore direttamente legate alle operazioni.</p> <pre><code>sealed class ConioException : Exception {\n    // General operation error with name and/or description\n    class OnOperation : ConioException\n    // Decoding data error\n    class UnableToDecodeData : ConioException\n    // Cryptographic operation error\n    class OnCryptography : ConioException\n    // Secure storage operation error\n    class OnStorage : ConioException\n    // OAuth flow error: unable to retrieve and/or refresh access token\n    class Unauthorized : ConioException\n    // Conio SDK version is outdated\n    class OutdatedSdk : ConioException\n    // Server is under maintenance\n    class UnderMaintenance : ConioException\n\n\n    class AppImprovementAcceptanceNotAccepted : ConioException\n\n    class ClientSupportAcceptanceNotAccepted : ConioException\n    // Ask operation already paid\n    class AskAlreadyPaid : ConioException\n    // Bid operation already paid\n    class BidAlreadyPaid : ConioException\n    // Bid operation is expired\n    class BidExpired : ConioException\n\n    class BidIsInError : ConioException\n    // Bid operation is not yet paid\n    class BidNotYetPaid : ConioException\n\n    class BithustlerServiceCouldNotCreateSeller : ConioException\n\n    class CardsLimitsExceeded : ConioException\n\n    class CardsServiceCouldNotCreatePayer : ConioException\n\n    class DuplicateEmailAddress : ConioException\n\n    class DustAsk : ConioException\n\n    class DustTransaction : ConioException\n    // Fiat amount is under the minumum level limit\n    class FiatAmountTooLow : ConioException\n\n    class InconsistentState : ConioException\n\n    class InconsistentTransaction : ConioException\n\n    class InvalidIban : ConioException\n\n    class InvalidMessageSignature : ConioException\n    // Used payment method is not valid\n    class InvalidPaymentMethod : ConioException\n\n    class InvalidToken : ConioException\n\n    class InvalidTokenPayload : ConioException\n    // Crypto proof used for operation is invalid\n    class InvalidCryptoProof : ConioException\n\n    class MultipleSellMethods : ConioException\n\n    class NoSuch3DSecure : ConioException\n\n    class NoSuchSellMethod : ConioException\n\n    class NoSuchSeller : ConioException\n\n    class NoSuchWallet : ConioException\n\n    class NoSuchWithdrawalFeesInfo : ConioException\n\n    class NotEnoughBtcAmount : ConioException\n\n    class TradeExpired : ConioException\n    // Bid operation exceeded user purchase max limits\n    class TradingLimitsExceeded : ConioException\n\n    class UnavailableBtcSubsystem : ConioException\n    // Ask operation is in an error status\n    class UnrecoverableAsk : ConioException\n    // Bid operation is in an error status\n    class UnrecoverableBid : ConioException\n    // Payment method used in not supported\n    class UnsupportedPaymentMethod : ConioException\n\n    class WalletAlreadyCreatedWithDifferentKeys : ConioException\n\n    class WalletAlreadyOwnedByAnotherUser : ConioException\n    // Unknown error with description\n    class Unknown : ConioException\n}\n</code></pre> <p>Ad esempio, prendiamo l'operazione <code>conio.walletService.withdrawalFees</code>: se un utente ha 1 bitcoin nel portafoglio e richiede le mining fees per un invio da 50 bitcoin, ricever\u00e0 un <code>NO_SUCH_WITHDRAWAL_FEES_INFO</code>.</p>"},{"location":"Old/operation/Operation/#code_1","title":"Code","text":""},{"location":"Old/operation/Operation/#android","title":"Android","text":"<pre><code>WithdrawalFeesParams params = new WithdrawalFeesParams(\n    \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\",\n    100000000,\n    TransactionSpeedType.SPEED_FIVE\n);\n\nconio.walletService.withdrawalFees(params).asCallback(result -&gt; result.analysis(\n        fees -&gt; { /* ... */ },\n        error -&gt; {\n            ConioException conioException = (ConioException) error;\n            if (conioException.getConioError() == ConioError.NO_SUCH_WITHDRAWAL_FEES_INFO) {\n                /* Handle NO_SUCH_WITHDRAWAL_FEES_INFO error */\n            }\n        }\n));\n</code></pre>"},{"location":"Old/operation/Operation/#non-autorizzato","title":"Non autorizzato","text":"<p>Questo errore viene generato quando non si \u00e8 autorizzati a utilizzare un metodo per uno dei seguenti motivi:</p> <ul> <li>utilizzo di un metodo che richiede autenticazione senza una sessione valida;</li> <li>si sta provando ad effettura una login con credenziali errate.</li> </ul> <p>Assicurarsi di avere una sessione valida, autenticandosi nuovamente tramite una login o una sign-up.</p>"},{"location":"Old/operation/Operation/#codice","title":"Codice","text":""},{"location":"Old/operation/Operation/#android_1","title":"Android","text":"<pre><code>UserLogin user = new UserLogin(\"username\", \"wrong_password\");\n\nconio.userService.login(user).asCallback(result -&gt; result.analysis(\n    success -&gt; { /* ... */ },\n    error -&gt; {\n        if (error instanceof ConioException.Unauthorized) {\n            /* Handle the error */\n        }\n    }\n));\n\n</code></pre>"},{"location":"Old/operation/Operation/#sdk-obsoleto","title":"SDK obsoleto","text":"<p>Questo errore viene generato quando l'utente tenta di utilizzare una versione obsoleta dell'SDK.</p> <p>Consigliamo di gestire questo errore per notificare all'utente di aggiornare l'applicazione.</p>"},{"location":"Old/operation/Operation/#code_2","title":"Code","text":""},{"location":"Old/operation/Operation/#android_2","title":"Android","text":"<pre><code>LegalAcceptancesParams params = new LegalAcceptancesParams(Language.ITALIAN);\n\nconio.userService.getLegalAcceptances(params).asCallback(result -&gt; result.analysis(\n    acceptances -&gt; { /* ... */ },\n    error -&gt; {\n        if (error instanceof ConioException.OutdatedSdk) {\n            /* Handle the error */\n        }\n    }\n));\n</code></pre>"},{"location":"Old/operation/Operation/#ios","title":"iOS","text":"<pre><code>let params = LegalAcceptancesParams(language: .italian)\n\nconio.userService.getLegalAcceptances(params: params).asCallback { result in\n    switch result {\n    case .success:\n        // success\n    case .failure(let error):\n        if case .outdatedSdk = error {\n            print(\"Please update the SDK\")\n        }\n    }\n}\n</code></pre>"},{"location":"Old/user/User.en/","title":"User operations","text":""},{"location":"Old/user/User.en/#terms-and-conditions","title":"Terms and conditions","text":"<p>Using this operation you can retrieve the <code>Acceptances</code> (terms and conditions), T&amp;C URL and Privacy Policy URL that the user has to accept during the signup.</p>"},{"location":"Old/user/User.en/#parameters","title":"Parameters","text":"<p>An object <code>LegalAcceptancesParams</code> with the language you want.</p>"},{"location":"Old/user/User.en/#returns","title":"Returns","text":"<p>A <code>LegalAcceptances</code> object containing <code>Acceptances</code>, the URL <code>Terms of service</code>, the URL <code>Privacy Policies</code> and the pre-contractual info URL.</p>"},{"location":"Old/user/User.en/#acceptances-localization","title":"Acceptances localization","text":"<p>An <code>Acceptance</code> has 2 localization keys: one for the title and one for the content.</p>"},{"location":"Old/user/User.en/#code","title":"Code","text":""},{"location":"Old/user/User.en/#android","title":"Android","text":"<pre><code>LegalAcceptancesParams params =\n    new LegalAcceptancesParams(Language.ITALIAN);\nconio.userService.getLegalAcceptances(params, result -&gt; {\n    result.analysis(acceptances -&gt; {\n        // LegalAcceptances\n    }, error -&gt; {\n        // Exception\n    });\n});\n</code></pre>"},{"location":"Old/user/User.en/#ios","title":"iOS","text":"<pre><code>let params = LegalAcceptancesParams(language: .italian)\n\nconio.userService.getLegalAcceptances(params: params) { result in\n    result.analysis(ifSuccess: { legalAcceptances in\n        // LegalAcceptances\n    }, ifFailure: { error in\n        // ServiceError\n    })\n}\n</code></pre>"},{"location":"Old/user/User.en/#signup","title":"Signup","text":"<p>To use the wallet the user has to be authenticated. If it's the first time you can authenticate using the signup method, otherwise you have to use the login method.</p>"},{"location":"Old/user/User.en/#parameters_1","title":"Parameters","text":"<p>An <code>Account</code> struct containing:</p> <ul> <li>login: <code>Login</code> on iOS or <code>UserLogin</code> on Android: username and password of the user.</li> <li>acceptances: <code>Acceptances</code> containing booleans about the user consent to T&amp;C</li> <li>cryptoRequest: create a <code>CryptoRequest</code>: Crypto Request Creation</li> </ul>"},{"location":"Old/user/User.en/#crypto-request-creation","title":"Crypto Request Creation","text":"<p>To generate a <code>Crypto Request</code>, you have to sign the string: <code>dataString</code> (create one by following the example below), using the function sha256 and the private key. The following lines of code are just an example. The actual implementation of the signing algorithm to include in the <code>CryptoRequest</code> is up to the client.</p>"},{"location":"Old/user/User.en/#java-example","title":"Java Example","text":"<pre><code>    String proofId = UUID.randomUUID().toString();\n    long proofExpiration =\n        new Date()\n        .tenMinutesFromNow()\n        .millis();\n\n    String userLevel = \"A smart level\"; // Es. \"Advanced\" to get adavanced limits\n    String userId = login.username;\n    String iban = \"IBAN\"; // It should be a real iban\n    String email = \"user@email.com\";\n    String firstName = \"Mario\";\n    String lastName = \"Rossi\";\n\n    String[] data = {\n        proofId,\n        \"SIGNUP\",\n        userId,\n        userLevel,\n        String.valueOf(proofExpiration),\n        iban,\n        email,\n        firstName,\n        lastName\n    };\n\n    String dataString = join(\"|\", data);\n\n    PrivateKey privateKey = new PrivateKey(\"key.pem\");\n    RsaSigner rsa = new RsaSigner(privateKey);\n\n    String signature =\n        rsa\n        .sign(\"sha256\", dataString)\n        .toLowercase();\n\n    byte[] cryptoProof = fromHexToBytes(signature);\n</code></pre>"},{"location":"Old/user/User.en/#swift-example","title":"Swift Example","text":"<pre><code>    let proofID = UUID().uuidString\n    let proofExpiration: UInt64 = UInt64(Date())\n    let userLevel = \"A smart level\" // Es. \"Advanced\" to get adavanced limits\n    let userID = login.username\n    let iban = \"IBAN\" // It should be a real iban\n    let email = \"user@email.com\"\n    let firstName = \"Mario\"\n    let lastName = \"Rossi\"\n\n    let data = [\n        proofID,\n        \"SIGNUP\",\n        userID,\n        userLevel,\n        String(proofExpiration),\n        iban,\n        firstName,\n        lastName\n    ]\n\n    let dataString = data.joined(separator: \"|\")\n\n    let cryptoProof = Crypto.sign(\n        privateKey: privateKey,\n        digestType: .sha256\n    )\n\n    let cryptoRequest = CryptoRequest(\n        proofID: proofID,\n        cryptoProof: cryptoProof.data,\n        proofExpiration: proofExpiration,\n        userID: userID,\n        userLevel: userLevel,\n        iban: iban,\n        email: email,\n        firstName: firstName,\n        lastName: lastName\n    )\n</code></pre>"},{"location":"Old/user/User.en/#returns_1","title":"Returns","text":"<p>An object <code>Acceptances</code> confirming which T&amp;C the user approved during the signup.</p>"},{"location":"Old/user/User.en/#errori","title":"Errori","text":"<ul> <li><code>INVALID_IBAN</code></li> <li><code>CRYPTO_PROOF_EXPIRED</code></li> <li><code>INVALID_CRYPTO_PROOF</code> Crypto proof was signed incorrectly</li> <li><code>CARDS_SERVICE_COULD_NOT_CREATE_PAYER</code> Internal error of the payment system</li> <li><code>DUPLICATE_EMAIL_ADDRESS</code></li> <li><code>WALLET_ALREADY_OWNED_BY_ANOTHER_USER</code></li> <li><code>CLIENT_SUPPORT_ACCEPTANCE_NOT_ACCEPTED</code> Required acceptance</li> <li><code>APP_IMPROVEMENT_ACCEPTANCE_NOT_ACCEPTED</code> Required acceptance</li> </ul>"},{"location":"Old/user/User.en/#code_1","title":"Code","text":""},{"location":"Old/user/User.en/#android_1","title":"Android","text":"<pre><code>UserLogin login = new UserLogin(\"lemonade\", \"secretword\");\n\n// Build the acceptances list with the user choices result\nAcceptance appImprovement\n    = new Acceptance(AcceptanceType.APP_IMPROVEMENT, true);\nAcceptance clientSupport\n    = new Acceptance(AcceptanceType.CLIENT_SUPPORT, true);\n\nArrayList&lt;Acceptance&gt; acceptanceList = new ArrayList&lt;&gt;();\nacceptanceList.add(appImprovement);\nacceptanceList.add(clientSupport);\n\nAcceptances acceptances = new Acceptances(acceptanceList);\n\n// Your crypto request implementation\nCryptoRequest cryptoRequest = buildCryptoRequest();\n\nAccount account = new Account(login, acceptances, cryptoRequest);\nconio.userService.signup(account, result -&gt; {\n    result.analysis(acceptances -&gt; {\n        // Acceptances\n    }, error -&gt; {\n        // Exception\n    });\n});\n</code></pre>"},{"location":"Old/user/User.en/#ios_1","title":"iOS","text":"<pre><code>\nlet login = Login(username: \"lemonade\", password: \"secretword\")\n\n// Your crypto request implementation\nlet cryptoRequest = buildCryptoRequest()\n\n// Build the acceptances list with the user choices result\nlet appImprovement =\n    Acceptance(type: .appImprovement, isAccepted: true)\nlet clientSupport =\n    Acceptance(type: .clientSupport, isAccepted: true)\n\nlet acceptancesList = [appImprovement, clientSupport]\nlet acceptances = Acceptances(acceptances: acceptancesList)\n\nlet account = Account(\n    login: login,\n    acceptances: acceptances,\n    cryptoRequest: cryptoRequest\n)\n\nconio.userService.signup(with: account) { result in\n    result.analysis(ifSuccess: { acceptances in\n        // Acceptances\n    }, ifFailure: { error in\n        // ServiceError\n    })\n}\n</code></pre>"},{"location":"Old/user/User.en/#login","title":"Login","text":"<p>Using the login operation you can authenticate to Conio. It is recommended to perform this operation every time the app is started.</p>"},{"location":"Old/user/User.en/#parameters_2","title":"Parameters","text":"<p>An object, called <code>Login</code> on iOS or <code>UserLogin</code> on Android, containing:</p> <ul> <li>username</li> <li>password</li> </ul>"},{"location":"Old/user/User.en/#returns_2","title":"Returns","text":"<p>An <code>Acceptances</code> object with the T&amp;C that the user accepted on signup.</p>"},{"location":"Old/user/User.en/#code_2","title":"Code","text":""},{"location":"Old/user/User.en/#android_2","title":"Android","text":"<pre><code>UserLogin login = new UserLogin(\"lemonade\", \"secretword\");\nconio.userService.login(login, result -&gt; {\n    result.analysis(acceptances -&gt; {\n        // Acceptances\n    }, error -&gt; {\n        // Exception\n    });\n});\n</code></pre>"},{"location":"Old/user/User.en/#ios_2","title":"iOS","text":"<pre><code>let login = Login(username: \"lemonade\",password: \"secretword\")\nconio.userService.login(with: login) { result in\n    result.analysis(ifSuccess: { acceptances in\n        // Acceptances\n    }, ifFailure: { error in\n        // ServiceError\n    })\n}\n</code></pre>"},{"location":"Old/user/User.en/#logout","title":"Logout","text":"<p>Disconnect from Conio.</p>"},{"location":"Old/user/User.en/#returns_3","title":"Returns","text":"<p>A <code>boolean</code> with the result of the operation.</p>"},{"location":"Old/user/User.en/#code_3","title":"Code","text":""},{"location":"Old/user/User.en/#android_3","title":"Android","text":"<pre><code>conio.userService.logout(result -&gt; {\n    result.analysis(success -&gt; {\n        // Boolean\n    }, error -&gt; {\n        // Exception\n    });\n});\n</code></pre>"},{"location":"Old/user/User.en/#ios_3","title":"iOS","text":"<pre><code>conio.userService.logout { result in\n    result.analysis(ifSuccess: { success in\n        // Boolean\n    }, ifFailure: { error in\n        // ServiceError\n    })\n}\n</code></pre>"},{"location":"Old/user/User.en/#change-email","title":"Change Email","text":"<p>Using this operation you can update Conio user email.</p>"},{"location":"Old/user/User.en/#method","title":"Method","text":"<p><code>userService.changeEmail</code></p>"},{"location":"Old/user/User.en/#parameters_3","title":"Parameters","text":"<p>A <code>ChangeEmailParams</code> object type.</p> <ul> <li>newEmail: <code>String</code> type, it is the new value used to update actual user email.</li> </ul>"},{"location":"Old/user/User.en/#returns_4","title":"Returns","text":""},{"location":"Old/user/User.en/#android_4","title":"Android","text":"<p>A <code>Success</code> object type if the operation finish with success.</p>"},{"location":"Old/user/User.en/#ios_4","title":"iOS","text":"<p>A <code>Void</code> object type if the operation finish with success.</p>"},{"location":"Old/user/User.en/#code_4","title":"Code","text":""},{"location":"Old/user/User.en/#android_5","title":"Android","text":"<pre><code>ChangeEmailParams params = new ChangeEmailParams(\"newEmail@conio.com\");\n\nconio.userService.changeEmail(params).asCallback(result -&gt; result.analysis(\n        activityList -&gt; { /* Success */ },\n        error -&gt; { /* ... */ }\n));\n</code></pre>"},{"location":"Old/user/User.en/#ios_5","title":"iOS","text":"<pre><code>let params = ChangeEmailParams(newEmail: \"newEmail@conio.com\")\nconio.userService.changeEmail(with: params).asCallback { result in\n    switch result {\n    case .failure(let error):\n        /* ... */\n    case .success:\n        /* Success */\n    }\n}\n</code></pre>"},{"location":"Old/user/User/","title":"Operazioni sull'utente","text":""},{"location":"Old/user/User/#recupero-dei-termini-di-servizio","title":"Recupero dei termini di servizio","text":"<p>Questa operazione consente di recuperare le <code>LegalAcceptances</code>, ovvero le condizioni che l'utente potr\u00e0/dovr\u00e0 accettare in fase di signup (scelte che, durante l'operazione signup, dovranno essere descritte tramite la classe <code>Acceptances</code>). L'oggetto <code>LegalAcceptances</code> recuperato conterr\u00e0 gli url per mostrare le pagine dei Termini di Servizio e Privacy Policies di Conio e il dettaglio delle acceptances (<code>AcceptanceDetail</code>) che l'utente dovr\u00e0 o meno accettare.</p>"},{"location":"Old/user/User/#metodo","title":"Metodo","text":"<p><code>userService.getLegalAcceptances</code></p>"},{"location":"Old/user/User/#parametri","title":"Parametri","text":"<p>Un oggetto di tipo <code>LegalAcceptancesParams</code> contenente la lingua di riferimento per ottenere le acceptances e gli url delle pagine web da mostrare all'utente.</p>"},{"location":"Old/user/User/#risposta","title":"Risposta","text":"<p>Un oggetto di tipo <code>LegalAcceptances</code> contenente la lista degli <code>AcceptanceDetail</code>, url dei Termini di Servizio, url relativo alle Privacy Policies e url relativo alle condizioni pre contrattuali.</p>"},{"location":"Old/user/User/#codice","title":"Codice","text":""},{"location":"Old/user/User/#android","title":"Android","text":"<pre><code>LegalAcceptancesParams params = new LegalAcceptancesParams(Language.ITALIAN);\n\nconio.userService.getLegalAcceptances(params)\n    .asCallback(result -&gt; result.analysis(\n        acceptances -&gt; { /* Handle LegalAcceptances */ },\n        error -&gt; { /* Handle error */ }\n    ));\n</code></pre>"},{"location":"Old/user/User/#ios","title":"iOS","text":"<pre><code>let params = LegalAcceptancesParams(language: .italian)\n\nconio.userService.signup(params: params).asCallback { result in\n    switch result {\n    case .success(let acceptances):\n        // LegalAcceptances\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/user/User/#autenticazione","title":"Autenticazione","text":"<p>Per poter operare con il portafoglio Conio occorre essere autenticati. Se \u00e8 la prima volta che l'utente usa il servizio ci si pu\u00f2 autenticare con il metodo <code>userService.signup</code>, altrimenti con il metodo <code>userService.login</code>.</p>"},{"location":"Old/user/User/#signup","title":"Signup","text":"<p>L'operazione di signup permette di creare un nuovo utente Conio.</p>"},{"location":"Old/user/User/#metodo_1","title":"Metodo","text":"<p><code>userService.signup</code></p>"},{"location":"Old/user/User/#parametri_1","title":"Parametri","text":"<p>Un oggetto di tipo <code>SignupParams</code>, costruito tramite il metodo <code>SignupParams.createCryptoSignup</code> con:</p> <ul> <li> <p>acceptances: di tipo <code>Acceptances</code> con l'esito della conferma ai termini di servizio da parte dell'utente, recuperati tramite le <code>LegalAcceptances</code>;</p> </li> <li> <p>credentials: di tipo <code>ConioCredentials</code> con username e password dell'utente;</p> </li> <li> <p>cryptoRequest: di tipo <code>SignupCryptoRequest</code>, che specifica ulteriori parametri comprovati da una firma, come descritto in creazione della SignupCryptoRequest.</p> </li> </ul>"},{"location":"Old/user/User/#risposta_1","title":"Risposta","text":"<p>Un oggetto di tipo <code>Success</code> che indica che l'utente \u00e8 stato autenticato.</p>"},{"location":"Old/user/User/#errori","title":"Errori","text":"<ul> <li> <p>ConioError:</p> <ul> <li><code>APP_IMPROVEMENT_ACCEPTANCE_NOT_ACCEPTED</code> Acceptance obbligatoria;</li> <li><code>CLIENT_SUPPORT_ACCEPTANCE_NOT_ACCEPTED</code> Acceptance obbligatoria;</li> <li><code>CRYPTO_PROOF_EXPIRED</code> La crypto proof \u00e8 scaduta;</li> <li><code>INVALID_CRYPTO_PROOF</code> La crypto proof non \u00e8 correttamente firmata;</li> <li><code>DUPLICATE_EMAIL_ADDRESS</code> Indirizzo email duplicato;</li> <li><code>INVALID_IBAN</code> IBAN non valido;</li> <li><code>WALLET_ALREADY_OWNED_BY_ANOTHER_USER</code> Il wallet \u00e8 gi\u00e0 utilizzato da un altro utente;</li> <li><code>CARDS_SERVICE_COULD_NOT_CREATE_PAYER</code> Errore interno del sottosistema di pagamento.</li> </ul> </li> </ul>"},{"location":"Old/user/User/#codice_1","title":"Codice","text":""},{"location":"Old/user/User/#android_1","title":"Android","text":"<pre><code>// vedi \"Creazione SignupCryptoRequest\"\nSignupCryptoRequest cryptoRequest = new SignupCryptoRequest(...);\nConioCredentials credentials = new ConioCredentials(\"username\", \"password\");\nAcceptances acceptances = new Acceptances(Arrays.asList(\n    new Acceptance(AcceptanceType.CLIENT_SUPPORT, true),\n    new Acceptance(AcceptanceType.APP_IMPROVEMENT, true)\n));\n\nSignupParams params = SignupParams.createCryptoSignup(acceptances, credentials, cryptoRequest);\n\nconio.userService.signup(params)\n    .asCallback(result -&gt; result.analysis(\n        success -&gt; { /* Handle success */ },\n        error -&gt; { /* Handle error */ }\n    ));\n</code></pre>"},{"location":"Old/user/User/#ios_1","title":"iOS","text":"<pre><code>// vedi \"Creazione SignupCryptoRequest\"\n\nlet credentials = ConioCredentials(username: \"username\", password: \"password\")\n\n var acceptancesList = [Acceptance]()\n        acceptancesList.append(.init(type: .appImprovement, isAccepted: true))\n        acceptancesList.append(.init(type: .clientSupport, isAccepted: true))\nlet acceptances = Acceptances(acceptances: acceptancesList)\nlet cryptoRequest = SignupCryptoRequest.init(proofID: \"\", cryptoProof: Data(), proofExpiration: 0, externalUserID: \"\", userLevel: \"\", iban: \"\", email: \"\", firstName: \"\", lastName: \"\")\nlet signupParams = SignupParams.createCryptoSignup(credentials: credentials, acceptances: acceptances, cryptoRequest: cryptoRequest)\n\nconio.userService.signup(params: params).asCallback { result in\n    switch result {\n    case .success:\n        // Handle Succes\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/user/User/#login","title":"Login","text":"<p>L'operazione di login permette di autenticarsi a Conio. \u00c8 raccomandabile eseguire questa operazione ad ogni avvio dell'applicazione, similmente a come avviene per altri servizi terzi.</p>"},{"location":"Old/user/User/#metodo_2","title":"Metodo","text":"<p><code>userService.login</code></p>"},{"location":"Old/user/User/#parametri_2","title":"Parametri","text":"<p>Un oggetto di tipo <code>LoginParams</code>, costruito tramite il metodo <code>LoginParams.createCryptoLogin</code> con:</p> <ul> <li> <p>credentials: di tipo <code>ConioCredentials</code> con username e password dell'utente</p> </li> <li> <p>cryptoRequest: di tipo <code>LoginCryptoRequest</code>, che specifica ulteriori parametri comprovati da una firma, come descritto in creazione della LoginCryptoRequest.</p> </li> </ul>"},{"location":"Old/user/User/#risposta_2","title":"Risposta","text":"<p>Un oggetto di tipo <code>Success</code> che indica che l'utente \u00e8 stato autenticato.</p>"},{"location":"Old/user/User/#errori_1","title":"Errori","text":"<ul> <li>Non autorizzato</li> </ul>"},{"location":"Old/user/User/#codice_2","title":"Codice","text":""},{"location":"Old/user/User/#android_2","title":"Android","text":"<pre><code>LoginCryptoRequest cryptoRequest = new LoginCryptoRequest(...);\nConioCredentials credentials = new ConioCredentials(\"username\", \"password\");\n\nLoginParams params = LoginParams.createCryptoLogin(credentials, cryptoRequest);\n\nconio.userService.login(params)\n    .asCallback(result -&gt; result.analysis(\n        success -&gt; { /* Handle success */ },\n        error -&gt; { /* Handle error */ }\n    ));\n</code></pre>"},{"location":"Old/user/User/#ios_2","title":"iOS","text":"<pre><code>let params = LoginParams(username: \"lemonade\", password: \"secretword\", loginCryptoRequest: &lt;LoginCryptoRequest&gt;)\nconio.userService.login(params: params).asCallback { result in\n    switch result {\n    case .success:\n        // success\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/user/User/#logout","title":"Logout","text":"<p>Consente di disconnettere l'utenza Conio.</p>"},{"location":"Old/user/User/#metodo_3","title":"Metodo","text":"<p><code>userService.logout</code></p>"},{"location":"Old/user/User/#risposta_3","title":"Risposta","text":"<p>Un oggetto di tipo <code>Success</code> che indica che l'utente \u00e8 stato disconnesso.</p>"},{"location":"Old/user/User/#codice_3","title":"Codice","text":""},{"location":"Old/user/User/#android_3","title":"Android","text":"<pre><code>conio.userService.logout()\n    .asCallback(result -&gt; result.analysis(\n        success -&gt; { /* Handle success */ },\n        error -&gt; { /* Handle error */ }\n    ));\n</code></pre>"},{"location":"Old/user/User/#ios_3","title":"iOS","text":"<pre><code>conio.userService.logout().asCallback { result in\n    switch result {\n    case .success:\n        // success\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/user/User/#change-email","title":"Change Email","text":"<p>Consente di modificare l'email associata all'utenza Conio.</p>"},{"location":"Old/user/User/#metodo_4","title":"Metodo","text":"<p><code>userService.changeEmail</code></p>"},{"location":"Old/user/User/#parametri_3","title":"Parametri","text":"<p>Un oggetto di tipo <code>CryptoChangeEmailParams</code>.</p> <ul> <li>newEmail: di tipo <code>String</code>, \u00e8 il nuovo valore utilizzato per modificare l'attuale email dell'utente.</li> </ul>"},{"location":"Old/user/User/#risposta_4","title":"Risposta","text":""},{"location":"Old/user/User/#android_4","title":"Android","text":"<p>Un oggetto di tipo <code>Success</code> che indica se l'email dell'utente \u00e8 stata modificata correttamente.</p>"},{"location":"Old/user/User/#ios_4","title":"iOS","text":"<p>Un oggetto di tipo <code>Void</code> che indica se l'email dell'utente \u00e8 stata modificata correttamente.</p>"},{"location":"Old/user/User/#codice_4","title":"Codice","text":""},{"location":"Old/user/User/#android_5","title":"Android","text":"<pre><code>ChangeEmailParams params = new ChangeEmailParams(\"newEmail@conio.com\");\n\nconio.userService.changeEmail(params).asCallback(result -&gt; result.analysis(\n        activityList -&gt; { /* Success */ },\n        error -&gt; { /* ... */ }\n));\n</code></pre>"},{"location":"Old/user/User/#ios_5","title":"iOS","text":"<pre><code>let params = ChangeEmailParams(newEmail: \"newEmail@conio.com\")\nconio.userService.changeEmail(with: params).asCallback { result in\n    switch result {\n    case .failure(let error):\n        /* ... */\n    case .success:\n        /* Success */\n    }\n}\n</code></pre>"},{"location":"Old/wallet/Wallet.en/","title":"Wallet operations","text":""},{"location":"Old/wallet/Wallet.en/#bitcoin-address","title":"Bitcoin address","text":"<p>Show one of the unused Bitcoin addresses of the wallet, that you can use to receive bitcoins.</p>"},{"location":"Old/wallet/Wallet.en/#returns","title":"Returns","text":"<p>A <code>string</code> containing the Bitcoin address.</p>"},{"location":"Old/wallet/Wallet.en/#code","title":"Code","text":""},{"location":"Old/wallet/Wallet.en/#android","title":"Android","text":"<pre><code>conio.walletService.currentBitcoinAddress(result-&gt;{\n    result.analysis(address-&gt; {\n        // String\n    }, error-&gt; {\n        // Exception\n    });\n});\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#ios","title":"iOS","text":"<pre><code>conio.walletService.currentBitcoinAddress { result in   \n    result.analysis(ifSuccess: { address in\n        // String\n    }, ifFailure: { error in\n        // ServiceError\n    })\n}\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#bitcoin-movement-list","title":"Bitcoin Movement List","text":"<p>Each transaction (send, receive, buy, sell) is represented by an <code>Activity</code>. You can get a list of these activites using the following method:</p>"},{"location":"Old/wallet/Wallet.en/#parameters","title":"Parameters","text":"<p>An <code>ActivitiesParams</code> struct containing:</p> <ul> <li> <p>index: You can get 6 activities at a time. The index is the starting point of the list you want. For example using an index = 0 means you will get the last 6 activities. Then you can repeat this with index 6 which will get you the activities right before. important: To get all the activities you just have to repeat this call until you get less than 6 activities.</p> </li> <li> <p>types: you can use types if you want to filter the activities. For example you want to get only the buy activities.</p> </li> <li> <p>currency: the fiat currency your activities will be priced in.</p> </li> </ul>"},{"location":"Old/wallet/Wallet.en/#returns_1","title":"Returns","text":"<p>A <code>WalletActivities</code> struct containing: -  activities: an array of <code>Activity</code>. Each activity has its own <code>ID</code>, a <code>Type</code> (send, buy, sell, receive), an amount in <code>Satoshi</code>, and a <code>confirmationStatus</code> which will let you know if a bitcoin transaction is included in the blockchain.</p>"},{"location":"Old/wallet/Wallet.en/#code_1","title":"Code","text":""},{"location":"Old/wallet/Wallet.en/#android_1","title":"Android","text":"<pre><code>// To retrieve all the activities\nActivityType[] types = ActivityType.all()\nActivitiesParams params = new ActivitiesParams(0, types, Currency.EUR);\n\n// To retrieve purchases and sells\nActivityType[] types = new ActivityType[] {\n    ActivityType.BUY,\n    ActivityType.SELL\n};\n\nActivitiesParams params = new ActivitiesParams(0, types, Currency.EUR);\n\nconio.walletService.walletActivities(params, result-&gt;{\n    result.analysis(activities-&gt; {\n        // WalletActivities\n    }, error-&gt; {\n        // Exception\n    });\n});\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#ios_1","title":"iOS","text":"<pre><code>\n// To retrieve all the activities\nlet params = ActivitiesParams(\n    index: 0,\n    types: ActivityType.all\n    currency: .eur\n)\n\n// To retrieve only purchases and sells\nlet params = ActivitiesParams(\n    index: 0,\n    types: [.buy, .sell]\n    currency: .eur\n)\n\nconio.walletService.walletActivities(params: activitiesParams) { result in\n    result.analysis(ifSuccess: { activities in\n        // WalletActivities\n    }, ifFailure: { error in\n        // ServiceError\n    })\n}\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#bitcoin-movement-list-as-pdf","title":"Bitcoin Movement List as PDF","text":"<p>Each transaction (send, receive, buy, sell) is represented by an <code>Activity</code>. You can get a list of these activites in PDF format using the dedicated method.</p>"},{"location":"Old/wallet/Wallet.en/#method","title":"Method","text":""},{"location":"Old/wallet/Wallet.en/#android_2","title":"Android","text":"<p><code>walletService.activityListPdf</code></p>"},{"location":"Old/wallet/Wallet.en/#ios_2","title":"iOS","text":"<p><code>walletService.walletPDFActivities</code></p>"},{"location":"Old/wallet/Wallet.en/#parameters_1","title":"Parameters","text":""},{"location":"Old/wallet/Wallet.en/#android_3","title":"Android","text":"<p>An <code>ActivityListPdfParams</code> struct containing:</p> <ul> <li> <p>types: <code>List&lt;ActivityType&gt;</code> object type, an enum list which can be used to filter the activities. <code>ActivityType.all()</code> will return a list of all Activity types;</p> </li> <li> <p>currency: <code>Currency</code> object type, the fiat currency activities will be priced in (only in Euros at the moment);</p> </li> <li> <p>@Optional @Default(6) limit: <code>int?</code> nullable object type, the max transactions number that will be received. If <code>null</code> there will be no max transaction number on activities received.</p> </li> <li> <p>@Optional timeFrame: <code>TimeFrame?</code> object type, the temporary window that limit the time interval between Activity objects will be included in the response.</p> </li> </ul>"},{"location":"Old/wallet/Wallet.en/#ios_3","title":"iOS","text":"<p>Un oggetto di tipo <code>PDFActivitiesParams</code> contenente:</p> <ul> <li> <p>types: <code>Array&lt;WalletActivityType&gt;</code>,  object type, an enum list which can be used to filter the activities. <code>WalletActivityType.allCases</code> will return a list of all Activity types;</p> </li> <li> <p>currency: <code>Currency</code> object type, the fiat currency activities will be priced in (only in Euros at the moment);</p> </li> <li> <p>limit: <code>Int?</code> optional object type (default value 6), the max transactions number that will be received. If <code>nil</code> there will be no max transaction number on activities received.</p> </li> <li> <p>timeFrame: <code>TimeFrame?</code> object type, the temporary window that limit the time interval between Activity objects will be included in the response.</p> </li> </ul>"},{"location":"Old/wallet/Wallet.en/#returns_2","title":"Returns","text":""},{"location":"Old/wallet/Wallet.en/#android_4","title":"Android","text":"<p>A <code>InputStream</code> object with PDF bytes stream.</p>"},{"location":"Old/wallet/Wallet.en/#ios_4","title":"iOS","text":"<p>A <code>Data</code> object with PDF byte buffer.</p>"},{"location":"Old/wallet/Wallet.en/#code_2","title":"Code","text":""},{"location":"Old/wallet/Wallet.en/#android_5","title":"Android","text":"<pre><code>// Example 1: retrieve 6 activities of all type\nList&lt;ActivityType&gt; types = ActivityType.all;\nActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR);\n\n// Example 2: retrieve 10 sell activities\nList&lt;ActivityType&gt; types = Collections.singletonList(ActivityType.SELL);\nActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR, 10);\n\n// Example 3: retrieve 6 buy and receive activities of the last month\nList&lt;ActivityType&gt; types = Arrays.asList(ActivityType.BUY, ActivityType.RECEIVE);\nActivityListPdfParams params = new ActivityListPdfParams(\n    types,                // types\n    Currency.EUR,         // currency\n    6,                    // limit\n    TimeFrame.lastMonth() // timeFrame\n);\n\nconio.walletService.activityListPdf(params)\n    .asCallback(result -&gt; result.analysis(\n        stream -&gt; { /* Handle InputStream */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#ios_5","title":"iOS","text":"<pre><code>let types = WalletActivityType.allCases\nlet params = PDFActivitiesParams(types: types, currency: .EUR)\nconio.walletService.walletPDFActivities(with: params).asCallback { result in\n    switch result {\n    case .success(let data):\n      // PDF WalletActivities\n    case .failure(let error):\n      // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#activity-detail","title":"Activity detail","text":"<p>You can get all the info about a single activity by using this method.</p>"},{"location":"Old/wallet/Wallet.en/#parameters_2","title":"Parameters","text":"<p>An <code>ActivityDetailsParams</code> containing:</p> <ul> <li>activityId: the identifier of the activity you want to get the details of.</li> <li>currency: the fiat currency your activity will be priced in.</li> </ul>"},{"location":"Old/wallet/Wallet.en/#returns_3","title":"Returns","text":"<p>An <code>ActivityDetails</code> containing:</p> <ul> <li>id: identifier of the activity</li> <li>type: activity type</li> <li>timestamp: timestamp when the activity was created</li> <li>@Optional transaction: the info about the Bitcoin transaction related to that activity. Contains info like the hash of the transaction, number of confirmations, the Bitcoin address that is receiving the Bitcoin, the fiat currency equivalent, the fees payed and more.</li> <li>@Optional bid: info about the bid. Contains all the info about the purchase.</li> <li>@Optional payment: info about the payment, including the id of the payment method, the value of the payment and its status.</li> <li>@Optional ask: info about the ask. Contains all the info about the sell.</li> <li>@Optional sell: info about the wire transfer, the <code>identifier</code>, <code>cro</code></li> </ul>"},{"location":"Old/wallet/Wallet.en/#code_3","title":"Code","text":""},{"location":"Old/wallet/Wallet.en/#android_6","title":"Android","text":"<pre><code>ActivityDetailsParams params = new ActivityDetailsParams(\"id\", Currency.EUR);    \n\nconio.walletService.activityDetails(params, result-&gt;{\n    result.analysis(details-&gt; {\n        // ActivityDetails\n    }, error-&gt; {\n        // Exception\n    });\n});\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#ios_6","title":"iOS","text":"<pre><code>let params = ActivityDetailsParams(activityId: \"activityId\", currency: .eur)\n\n conio.walletService.activityDetails(params: params) { result in\n    result.analysis(ifSuccess: { details in\n        // ActivityDetails                 \n    }, ifFailure: { error in\n        // ServiceError               \n    })\n}\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#wallet-balance","title":"Wallet balance","text":"<p>You can get the balance of the wallet.</p>"},{"location":"Old/wallet/Wallet.en/#returns_4","title":"Returns","text":"<p>A <code>WalletDetails</code> containing the amount of Bitcoin in the wallet (the amount is expressed in satoshi, the smallest unit of Bitcoin) (1 bitcoin = 100.000.000)</p> <ul> <li>confirmedBalance: bitcoins that have at least 3 confirmations on the blockchain and that the user can send/sell</li> <li>unconfirmedBalance: bitcoins with less than 3 confirmations, that the user can't spend yet</li> </ul>"},{"location":"Old/wallet/Wallet.en/#code_4","title":"Code","text":""},{"location":"Old/wallet/Wallet.en/#android_7","title":"Android","text":"<pre><code>conio.walletService.walletdetails(result-&gt;{\n    result.analysis(details-&gt; {\n        // WalletDetails\n    }, error-&gt; {\n        // Exception\n    });\n});\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#ios_7","title":"iOS","text":"<pre><code>conio.walletService.walletDetails { result in\n    result.analysis(ifSuccess: { details in\n        // WalletDetails\n    }, ifFailure: { error in\n        // ServiceError\n    })\n}\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#send-bitcoin","title":"Send Bitcoin","text":"<p>With this SDK you can send bitcoins to any other Bitcoin wallet. There is also a second factor to protect the operation.</p>"},{"location":"Old/wallet/Wallet.en/#get-sendable-max-amount","title":"Get sendable Max Amount","text":"<p>First of all you will need to fetch the maximum amount the user can send, which is equal to the amount in their wallet minus the mining fees. Conio will give you exactly the maximum amount in Satoshis that the user can send if you make a <code>WithdrawalFees</code> request if you simply pass the destAddress</p>"},{"location":"Old/wallet/Wallet.en/#get-mining-fees","title":"Get mining fees","text":"<p>If the user inputs an amount lower or equal to the Max Amount you can then request the available mining-fees speeds. Conio has an algorithm that you can use.</p>"},{"location":"Old/wallet/Wallet.en/#parameters_3","title":"Parameters","text":"<p>A <code>WithdrawalFeesParams</code> struct:</p> <ul> <li>destAddress: the address that will receive the bitcoins</li> <li>amount: the bitcoin amount, in Satoshi. If you input <code>0</code> you will get the fees as if you were sending the maximum amount in the wallet</li> <li>speed: a specific speed (1 faster, 5 slower), if you don't specify a speed (priority) you will get an array with all the available speeds.</li> </ul>"},{"location":"Old/wallet/Wallet.en/#which-params-should-you-use","title":"Which params should you use?","text":"<ul> <li>To get the <code>Max amount</code>: you just have to pass the destAddress</li> <li>To get the <code>Available Fees</code>: You have to use destAddress and amount. The resulting array cointains all the available speeds.</li> </ul>"},{"location":"Old/wallet/Wallet.en/#return","title":"Return","text":"<p>An <code>AvailableWithdrawalFees</code> struct containing:</p> <ul> <li>absoluteFees: total amount of the mining fees expressed in satoshi</li> <li>amount: the amount, expressed in satoshi, that the user can send at the requested speed</li> <li>feePerByte: transaction size (bytes)/ absoluteFees = feePerByte</li> <li>transactionSpeed: transaction priority</li> <li>availableFees: an array contaning all the possible speeds</li> </ul>"},{"location":"Old/wallet/Wallet.en/#errors","title":"Errors","text":"<ul> <li>NOT_ENOUGH_BTC_AMOUNT</li> <li>DUST_TRANSACTION the amount you are trying to send is too small</li> <li>NO_SUCH_WITHDRAWAL_FEES_INFO: Can't calculate the mining fees</li> </ul>"},{"location":"Old/wallet/Wallet.en/#ios-example","title":"iOS example","text":"<pre><code>// maximum amount you can send (speed 5)\nlet params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\")\n\n// all the available speeds for a set amount: 10000 satoshi\nlet params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: 10_000)\n\n// send everything with the fastest speed (speed 1)\nlet params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: 0, speed: .transactionSpeedType1)\n\nconio.walletService.withdrawalFees { result in\n    result.analysis(ifSuccess: { availableFees in\n        // availableFees\n    }, ifFailure: { error in\n        // ServiceError\n    })\n}\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#android-example","title":"Android example","text":"<pre><code>// maximum amount you can send (speed 5)\nlet params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\")\n\n// all the available speeds for a set amount: 10000 satoshi\nlet params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: 10_000)\n\n// send everything with the fastest speed (speed 1)\nWithdrawalFeesParams params = new WithdrawalFeesParams(\"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", 0L, TransactionSpeedType.SPEED_ONE);\n\nconio.walletService.withdrawalFees(params, response -&gt; {\n    response.analysis(availableFees -&gt; {\n        // availableFees\n    }, error -&gt; {\n        // ServiceError\n    });\n});\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#finalize-send-second-factor","title":"Finalize Send - second factor","text":"<p>Now that you have the feePerByte you can finally send the bitcoins using the following method. After the first attempt you will receive an error asking for a 2fa code. The user will receive an email with the code that can be used for 5 minutes. You will pass this code to the SDK in the parameters of the same method.</p>"},{"location":"Old/wallet/Wallet.en/#parameters-for-the-first-attempt","title":"Parameters for the first attempt","text":"<p>Use a  <code>TransactionParams</code> struct:</p> <ul> <li>address: Bitcoin address</li> <li>amount: satoshi amount of the transaction</li> <li>fee: mining fee Satoshi per byte</li> </ul>"},{"location":"Old/wallet/Wallet.en/#ios_8","title":"iOS","text":"<pre><code>let params = TransactionParams(\n    address: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\",\n    amount: UInt64(1000),\n    feePerByte: UInt64(10)\n)\nconio.walletService.sendTransaction(params) { result in\n    result.analysis(ifSuccess: { sentTransaction in\n        // ...\n    }, ifFailure: { error in\n        // Get the mfa token\n        if case let .mfaRequired(token: token) = error {\n            let mfaToken = token\n        }\n    })\n}\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#android_8","title":"Android","text":"<pre><code>// Chiamata senza Codice MFA ed MFA Token\nTransactionParams params = new TransactionParams(\n    \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\",\n    1000L,\n    10L\n);\n\nconio.walletService.sendTransaction(params, result -&gt; {\n    result.analysis(sentTransaction -&gt; {\n        // ...\n    }, error -&gt; {\n        // Get the mfa token\n        if (error instanceof MfaRequiredException) {\n            MfaRequiredException mfaRequiredException = (MfaRequiredException) error;\n            String mfaToken = mfaRequiredException.getMfaToken();\n        }\n    }\n    });\n});\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#optional-deep-link","title":"Optional deep link","text":"<p>The user can click on a deep link found in their email like this one:</p> <pre><code>conio-internal://request_btc_withdrawal?code=&lt;MFACode&gt;\n</code></pre> <p>To avoid losing data when the user puts the app in background and then clicks on the deep link, you can save the info about the send (amount, address and fees) in the memory of the device.</p>"},{"location":"Old/wallet/Wallet.en/#parameters-for-the-second-attempt","title":"Parameters for the second attempt","text":"<p>To send Bitcoin you can use a <code>TransactionParams</code> struct:</p> <ul> <li>address: Bitcoin address</li> <li>amount: satoshi amount of the transaction</li> <li>fee: mining fee Satoshi per byte</li> <li>mfaCode: the code that the user received in their email after the first attempt</li> </ul>"},{"location":"Old/wallet/Wallet.en/#returns_5","title":"Returns","text":"<p>A <code>SentTransaction</code> containing:</p> <ul> <li>transactionId: transaction identifier</li> <li>fee: payed mining fees</li> </ul>"},{"location":"Old/wallet/Wallet.en/#errors_1","title":"Errors","text":"<ul> <li>[iOS] ServiceError.mfaRequired: No mfaCode used or the code is incorrect. The user will receive a new code.</li> <li> <p>[Android] ConioError.MFA_REQUIRED: No mfaCode used or the code is incorrect. The user will receive a new code.</p> </li> <li> <p>NOT_ENOUGH_BTC_AMOUNT</p> </li> <li>DUST_TRANSACTION the amount you are trying to send is too small</li> <li>INVALID_MESSAGE_SIGNATURE</li> </ul>"},{"location":"Old/wallet/Wallet.en/#ios-example_1","title":"iOS example","text":"<pre><code>let params = TransactionParams(\n    address: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\",\n    amount: UInt64(1000),\n    feePerByte: UInt64(10),\n    mfaToken: \"OciqYgdjxJV413iHkFqgUYGk\",\n    mfaCode: \"806157\"\n)\n\nconio.walletService.sendTransaction(params) { result in\n    result.analysis(ifSuccess: { sentTransaction in\n        // SentTransaction\n    }, ifFailure: { error in\n        // ServiceError\n    })\n}\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#android-example_1","title":"Android example","text":"<pre><code>// MFA e MFA Token\nTransactionParams params = new TransactionParams(\n    \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\",\n    1000L,\n    10L,\n    \"OciqYgdjxJV413iHkFqgUYGk\",\n    \"806157\"\n);\n\nconio.walletService.sendTransaction(params, result -&gt; {\n    result.analysis(sentTransaction -&gt; {\n        // SentTransaction\n    }, error -&gt; {\n        // Exception\n    });\n});\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#wallet-backup-code","title":"Wallet backup code","text":"<p>Show the wallet backup code: a list of 12 words.</p>"},{"location":"Old/wallet/Wallet.en/#returns_6","title":"Returns","text":"<p>A <code>MnemonicWords</code> containing an array with 12 strings in it.</p>"},{"location":"Old/wallet/Wallet.en/#errors_2","title":"Errors","text":"<ul> <li>missingMnemonic: failed to retrieve the backup code</li> </ul>"},{"location":"Old/wallet/Wallet.en/#android_9","title":"Android","text":"<pre><code>conio.walletService.readMnemonic(result-&gt;{\n    result.analysis(mnemonicWords-&gt; {\n        // MnemonicWords\n    }, error-&gt; {\n        // Exception\n    });\n});\n</code></pre>"},{"location":"Old/wallet/Wallet.en/#ios_9","title":"iOS","text":"<pre><code>conio.walletService.readMnemonic { result in\n    result.analysis(ifSuccess: { mnemonicWords in\n        // MnemonicWords\n    }, ifFailure: { error in\n        // ServiceError\n    })\n}\n</code></pre>"},{"location":"Old/wallet/Wallet/","title":"Operazioni sul portafoglio","text":""},{"location":"Old/wallet/Wallet/#indirizzo-bitcoin-attuale","title":"Indirizzo Bitcoin attuale","text":"<p>Permette di recuperare l'indirizzo corrente del portafoglio su cui sar\u00e0 possibile ricevere delle transazioni.</p>"},{"location":"Old/wallet/Wallet/#metodo","title":"Metodo","text":"<p><code>walletService.currentBitcoinAddress</code></p>"},{"location":"Old/wallet/Wallet/#risposta","title":"Risposta","text":"<p>Una <code>string</code> contenente l'indirizzo Bitcoin attuale.</p>"},{"location":"Old/wallet/Wallet/#errori","title":"Errori","text":"<ul> <li>Non autorizzato</li> </ul>"},{"location":"Old/wallet/Wallet/#codice","title":"Codice","text":""},{"location":"Old/wallet/Wallet/#android","title":"Android","text":"<pre><code>conio.walletService.currentBitcoinAddress()\n    .asCallback(result -&gt; result.analysis(\n        address -&gt; {/* Handle string wallet address */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/wallet/Wallet/#ios","title":"iOS","text":"<pre><code>conio.walletService.currentBitcoinAddress().asCallback { result in\n    switch result {\n    case .success(let address):\n        // Handle string wallet address\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/wallet/Wallet/#lista-movimenti-bitcoin","title":"Lista movimenti bitcoin","text":"<p>Ciascuna operazione di invio, ricezione, acquisto e vendita di Bitcoin \u00e8 rappresentata da un'<code>Activity</code>. La lista delle attivit\u00e0 svolte dall'utente pu\u00f2 essere recuperata tramite l'apposito metodo.</p>"},{"location":"Old/wallet/Wallet/#metodo_1","title":"Metodo","text":"<p><code>walletService.activityList</code></p>"},{"location":"Old/wallet/Wallet/#parametri","title":"Parametri","text":"<p>Un oggetto di tipo <code>ActivityListParams</code> contenente:</p> <ul> <li> <p>types: di tipo <code>List&lt;ActivityType&gt;</code>, una lista di enumerati <code>ActivityType</code> che ci permette di specificare le tipologie di activities da recuperare. Tramite <code>ActivityType.all()</code> \u00e8 possibile ottenere una lista di tutte le tipologie di Activity;</p> </li> <li> <p>currency: di tipo <code>Currency</code>, la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro);</p> </li> <li> <p>@Default(6) limit: di tipo <code>intero</code>, il numero massimo di transazioni da ricevere nella risposta;</p> </li> <li> <p>@Opzionale nextPage: di tipo <code>String</code>, token per la paginazione delle activities, ottenibile tramite il risultato di una prima richiesta di lista movimenti con questo valore nullo. Inserendo tale valore \u00e8 possibile ottenere le successive <code>n</code> Activity (con <code>n</code> = valore inserito come limit);</p> </li> <li> <p>@Opzionale timeFrame: di tipo <code>TimeFrame</code>, la finestra temporale che definisce quali Activity includere nella risposta.</p> </li> </ul>"},{"location":"Old/wallet/Wallet/#risposta_1","title":"Risposta","text":"<p>Un oggetto di tipo <code>ActivityList</code> contenente:</p> <ul> <li> <p>activities: di tipo <code>List&lt;SimpleActivity&gt;</code>, ovvero la lista delle Activity dell'utente richieste;</p> </li> <li> <p>@Opzionale nextPage: di tipo <code>String</code>, token per la paginazione delle activity, che pu\u00f2 essere inserito in una successiva richiesta di lista movimenti. Quando questo campo \u00e8 nullo, significa che non esistono ulteriori Activity tra quelle che rispettano i filtri inseriti.</p> </li> </ul> <p>Ogni Activity resituita (di tipo <code>SimpleActivity</code>) contiene:</p> <ul> <li> <p>activityId: di tipo <code>String</code>, l'identificativo univoco della Activity;</p> </li> <li> <p>type: di tipo <code>ActivityType</code>, la tipologia di Activity (<code>SEND</code>, <code>BUY</code>, <code>SELL</code>, <code>RECEIVE</code>);</p> </li> <li> <p>status: di tipo <code>TransactionStatus</code>, lo stato di conferma della transazione Bitcoin legata all'Activity (<code>UNCONFIRMED</code>, <code>PARTIALLY_CONFIRMED</code>, <code>CONFIRMED</code>);</p> </li> <li> <p>createdAt: di tipo <code>long</code>, l'istante temporale in cui \u00e8 stata creata l'Activity, espresso come Unix Timestamp in millisecondi.</p> </li> <li> <p>cryptoAmount: di tipo <code>long</code>, l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi), movimentato dall'Activity;</p> </li> <li> <p>fiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), il corrispettivo ammontare di cryptoAmount, calcolato nella valuta indicata tramite il campo currency;</p> </li> </ul>"},{"location":"Old/wallet/Wallet/#errori_1","title":"Errori","text":"<ul> <li>Non autorizzato</li> </ul>"},{"location":"Old/wallet/Wallet/#codice_1","title":"Codice","text":""},{"location":"Old/wallet/Wallet/#android_1","title":"Android","text":"<pre><code>// Example 1: retrieve 6 activities of all type\nList&lt;ActivityType&gt; types = ActivityType.all;\nActivityListParams params = new ActivityListParams(types, Currency.EUR);\n\n// Example 2: retrieve 10 sell activities\nList&lt;ActivityType&gt; types = Collections.singletonList(ActivityType.SELL);\nActivityListParams params = new ActivityListParams(types, Currency.EUR, 10);\n\n// Example 3: retrieve 6 buy and receive activities of the last month\nList&lt;ActivityType&gt; types = Arrays.asList(ActivityType.BUY, ActivityType.RECEIVE);\nActivityListParams params = new ActivityListParams(\n    types,                // types\n    Currency.EUR,         // currency\n    6,                    // limit\n    null,                 // nextPage\n    TimeFrame.lastMonth() // timeFrame\n);\n\nconio.walletService.activityList(params)\n    .asCallback(result -&gt; result.analysis(\n        activityList -&gt; { /* Handle ActivityList */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/wallet/Wallet/#ios_1","title":"iOS","text":"<pre><code>let types = WalletActivityType.allCases\nlet params = ActivitiesParams(nextPage: \"string\", types: types)\nconio.walletService.walletActivities(params: params).asCallback { result in\n    switch result {\n    case .success(let activities):\n        // WalletActivities\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/wallet/Wallet/#lista-movimenti-bitcoin-in-formato-pdf","title":"Lista movimenti bitcoin in formato PDF","text":"<p>Ciascuna operazione di invio, ricezione, acquisto e vendita di Bitcoin \u00e8 rappresentata da un'<code>Activity</code>. La lista delle attivit\u00e0 svolte dall'utente, in formato PDF, pu\u00f2 essere recuperata tramite l'apposito metodo.</p>"},{"location":"Old/wallet/Wallet/#metodo_2","title":"Metodo","text":""},{"location":"Old/wallet/Wallet/#android_2","title":"Android","text":"<p><code>walletService.activityListPdf</code></p>"},{"location":"Old/wallet/Wallet/#ios_2","title":"iOS","text":"<p><code>walletService.walletPDFActivities</code></p>"},{"location":"Old/wallet/Wallet/#parametri_1","title":"Parametri","text":""},{"location":"Old/wallet/Wallet/#android_3","title":"Android","text":"<p>Un oggetto di tipo <code>ActivityListPdfParams</code> contenente:</p> <ul> <li> <p>types: di tipo <code>List&lt;ActivityType&gt;</code>, una lista di enumerati <code>ActivityType</code> che ci permette di specificare le tipologie di activities da recuperare. Tramite <code>ActivityType.all()</code> \u00e8 possibile ottenere una lista di tutte le tipologie di Activity;</p> </li> <li> <p>currency: di tipo <code>Currency</code>, la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro);</p> </li> <li> <p>@Default(6) limit: di tipo <code>intero</code>, il numero massimo di transazioni da ricevere nella risposta;</p> </li> <li> <p>@Opzionale timeFrame: di tipo <code>TimeFrame</code>, la finestra temporale che definisce quali Activity includere nella risposta.</p> </li> </ul>"},{"location":"Old/wallet/Wallet/#ios_3","title":"iOS","text":"<p>Un oggetto di tipo <code>PDFActivitiesParams</code> contenente:</p> <ul> <li> <p>types: di tipo <code>Array&lt;WalletActivityType&gt;</code>, una lista di enumerati <code>WalletActivityType</code> che ci permette di specificare le tipologie di activities da recuperare. Tramite <code>WalletActivityType.allCases</code> \u00e8 possibile ottenere una lista di tutte le tipologie di Activity;</p> </li> <li> <p>currency: di tipo <code>Currency</code>, la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro);</p> </li> <li> <p>limit: di tipo <code>Int</code> (default value 6), il numero massimo di transazioni da ricevere nella risposta;</p> </li> <li> <p>timeFrame: di tipo <code>TimeFrame?</code>, la finestra temporale che definisce quali Activity includere nella risposta.</p> </li> </ul>"},{"location":"Old/wallet/Wallet/#risposta_2","title":"Risposta","text":""},{"location":"Old/wallet/Wallet/#android_4","title":"Android","text":"<p>Un oggetto di tipo <code>InputStream</code> contenente il bytes stream del PDF.</p>"},{"location":"Old/wallet/Wallet/#ios_4","title":"iOS","text":"<p>Un oggetto di tipo <code>Data</code> contenente il byte buffer del PDF.</p>"},{"location":"Old/wallet/Wallet/#errori_2","title":"Errori","text":"<ul> <li>Non autorizzato</li> </ul>"},{"location":"Old/wallet/Wallet/#codice_2","title":"Codice","text":""},{"location":"Old/wallet/Wallet/#android_5","title":"Android","text":"<pre><code>// Example 1: retrieve 6 activities of all type\nList&lt;ActivityType&gt; types = ActivityType.all;\nActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR);\n\n// Example 2: retrieve 10 sell activities\nList&lt;ActivityType&gt; types = Collections.singletonList(ActivityType.SELL);\nActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR, 10);\n\n// Example 3: retrieve 6 buy and receive activities of the last month\nList&lt;ActivityType&gt; types = Arrays.asList(ActivityType.BUY, ActivityType.RECEIVE);\nActivityListPdfParams params = new ActivityListPdfParams(\n    types,                // types\n    Currency.EUR,         // currency\n    6,                    // limit\n    TimeFrame.lastMonth() // timeFrame\n);\n\nconio.walletService.activityListPdf(params)\n    .asCallback(result -&gt; result.analysis(\n        stream -&gt; { /* Handle InputStream */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/wallet/Wallet/#ios_5","title":"iOS","text":"<pre><code>let types = WalletActivityType.allCases\nlet params = PDFActivitiesParams(types: types, currency: .EUR)\nconio.walletService.walletPDFActivities(with: params).asCallback { result in\n    switch result {\n    case .success(let data):\n      // PDF WalletActivities\n    case .failure(let error):\n      // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/wallet/Wallet/#dettaglio-di-un-movimento","title":"Dettaglio di un movimento","text":"<p>Recuperata la lista delle attivit\u00e0 \u00e8 possibile ottenere ulteriori informazioni su un Activity specifica richiedendone il dettaglio.</p>"},{"location":"Old/wallet/Wallet/#metodo_3","title":"Metodo","text":"<p><code>walletService.activityDetails</code></p>"},{"location":"Old/wallet/Wallet/#parametri_2","title":"Parametri","text":"<p>Un oggetto di tipo <code>ActivityDetailsParams</code> contenente:</p> <ul> <li> <p>activityId: di tipo <code>String</code>, l'id dell'Activity della quale si vuole leggere il dettaglio;</p> </li> <li> <p>currency: di tipo <code>Currency</code>, la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro);</p> </li> </ul>"},{"location":"Old/wallet/Wallet/#risposta_3","title":"Risposta","text":"<p>Un oggetto di tipo <code>ActivityDetails</code> contenente:</p> <ul> <li> <p>activityId: di tipo <code>String</code>, l'id dell'attivit\u00e0;</p> </li> <li> <p>type: di tipo <code>ActivityType</code>, la tipologia di Activity (<code>SEND</code>, <code>BUY</code>, <code>SELL</code>, <code>RECEIVE</code>);</p> </li> <li> <p>createdAt: di tipo <code>Long</code>, l'istante temporale in cui \u00e8 stata creata l'Activity, espresso come Unix Timestamp in millisecondi.</p> </li> <li> <p>@Opzionale transaction: di tipo <code>Transaction</code>, la transazione annessa. Popolato nel caso in cui sia stata effettuata una transazione. Contiene informazioni sulla transazione Bitcoin associata all'Activity, quali:</p> <ul> <li> <p>hash: di tipo <code>String</code>, l'hash della transazione Bitcoin;</p> </li> <li> <p>status: di tipo <code>TransactionStatus</code>, lo stato di conferma della transazione Bitcoin legata all'Activity (<code>UNCONFIRMED</code>, <code>PARTIALLY_CONFIRMED</code>, <code>CONFIRMED</code>);</p> </li> <li> <p>type: di tipo <code>TransactionType</code>, il tipo di transazione Bitcoin (<code>GENERIC</code> o <code>REDEPOSIT</code>, ovvero una transazione verso se stessi);</p> </li> <li> <p>addresses: di tipo <code>List&lt;String&gt;</code>, gli indirizzi Bitcoin dei dei mittenti (per le transazioni in entrata) o dei destinatari (per le transazioni in uscita);</p> </li> <li> <p>cryptoAmount: di tipo <code>long</code></p> </li> <li> <p>miningFees: di tipo <code>long</code>, le commissioni pagate alle rete Bitcoin per processare la transazione;</p> </li> <li> <p>isIncoming: di tipo <code>booleano</code>, flag indicante se la transazione \u00e8 in entrata o in uscita rispetto al portafoglio dell'utente;</p> </li> <li> <p>isLocal: di tipo <code>booleano</code>, flag indicante se la transazione \u00e8 stata ricevuta/inviata da/a un portafoglio Conio.</p> </li> </ul> </li> <li> <p>@Opzionale associatedBid: l'offerta di acquisto annessa. Popolato in caso di attivit\u00e0 di acquisto. Contiene le informazioni sulla richiesta di acquisto, quali:</p> <ul> <li> <p>status: di tipo <code>BidStatus</code>, lo stato del pagamento della richiesta di acquisto (<code>PAID</code>, <code>CHARGED</code>);</p> </li> <li> <p>cryptoAmount: di tipo <code>long</code>, l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi) acquistato;</p> </li> <li> <p>fiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), il controvalore (rispetto al cryptoAmount) accordato per l'acquisto dei bitcoin, calcolato nella valuta indicata dal campo currency;</p> </li> <li> <p>serviceFee: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), le commissioni pagate per la fruizione del servizio, calcolato nella valuta indicata dal campo currency;</p> </li> <li> <p>currency: di tipo <code>Currency</code>, la valuta usata per l'acquisto dei bitcoin;</p> </li> <li> <p>paymentMethodId: di tipo <code>String</code>, l'identificativo del metodo di pagamento;</p> </li> <li> <p>createdAt: di tipo <code>long</code>, l'istante temporale in cui \u00e8 stata creata l'Activity, espresso come Unix Timestamp in millisecondi;</p> </li> <li> <p>paidAt: di tipo <code>long</code>, l'istante temporale in cui \u00e8 stato effettuato il pagamento per l'acquisto dei bitcoin, espresso come Unix Timestamp in millisecondi;</p> </li> <li> <p>@Opzionale chargedAt: di tipo <code>long</code>, l'istante temporale in cui \u00e8 stata invaita la transazione bitcoin, espresso come Unix Timestamp in millisecondi. Nullo nel caso in cui la transazione non sia ancora stata effettuata.</p> </li> </ul> </li> <li> <p>@Opzionale associatedAsk: l'offerta di vendita annessa. Popolato in caso di attivit\u00e0 di vendita, Contiene le informazioni sulla richeista di vendita, quali:</p> <ul> <li> <p>status: di tipo <code>AskStatus</code>, lo stato del pagamento della richiesta di vendita (<code>CHARGED</code>, <code>PAID</code>)</p> </li> <li> <p>cryptoAmount: di tipo <code>long</code>, l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi) venduto;</p> </li> <li> <p>fiatAmount: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), il controvalore (rispetto al cryptoAmount) accordato per la vendita dei bitcoin, calcolato nella valuta indicata dal campo currency;</p> </li> <li> <p>serviceFee: di tipo <code>Decimal</code> (iOS) / <code>BigDecimal</code> (Android), le commissioni pagate per la fruizione del servizio, calcolato nella valuta indicata dal campo currency;</p> </li> <li> <p>currency: di tipo <code>Currency</code>, la valuta usata per la vendita dei bitcoin;</p> </li> <li> <p>sellMethodId: di tipo <code>String</code>, l'identificativo del metodo di riscossione della vendita;</p> </li> <li> <p>@Opzionale cro: di tipo <code>String</code>, il Codice Riferimento Operazione della transazione bancaria;</p> </li> <li> <p>@Opzionale iban: di tipo <code>String</code>, l'IBAN del richiedente del bonifico bancario;</p> </li> <li> <p>createdAt: di tipo <code>long</code>, l'istante temporale in cui \u00e8 stata creata l'Activity, espresso come Unix Timestamp in millisecondi;</p> </li> <li> <p>@Opzionale chargedAt: di tipo <code>long</code>, l'istante temporale in cui \u00e8 stato effettuato il pagamento per la vendita dei bitcoin, espresso come Unix Timestamp in millisecondi. Nullo nel caso in cui la transazione non sia ancora stata effettuata;</p> </li> <li> <p>paidAt: di tipo <code>long</code>, l'istante temporale in cui \u00e8 stata invaita la transazione bitcoin, espresso come Unix Timestamp in millisecondi.</p> </li> </ul> </li> </ul>"},{"location":"Old/wallet/Wallet/#errori_3","title":"Errori","text":"<ul> <li>Non autorizzato</li> </ul>"},{"location":"Old/wallet/Wallet/#codice_3","title":"Codice","text":""},{"location":"Old/wallet/Wallet/#android_6","title":"Android","text":"<pre><code>ActivityDetailsParams params = new ActivityDetailsParams(\"activityId\", Currency.EUR);\n\nconio.walletService.activityDetails(params)\n    .asCallback(result -&gt; result.analysis(\n        details -&gt; { /* Handle ActivityDetails */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/wallet/Wallet/#ios_6","title":"iOS","text":"<pre><code>let params = ActivityDetailsParams(activityId: \"activityId\", currency: .eur)\n\nconio.walletService.activityDetails(params: params).asCallback { result in\n    switch result {\n    case .success(let details):\n        // ActivityDetails\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/wallet/Wallet/#bilancio-del-portafoglio","title":"Bilancio del portafoglio","text":"<p>Permette di recuperare il bilancio del portafoglio Bitcoin dell'utente.</p>"},{"location":"Old/wallet/Wallet/#metodo_4","title":"Metodo","text":"<p><code>walletService.walletBalances</code></p>"},{"location":"Old/wallet/Wallet/#risposta_4","title":"Risposta","text":"<p>Un oggetto di tipo <code>WalletBalances</code> contenente il valore di bitcoin presente nel wallet espresso in satoshi (1 bitcoin = 100.000.000 satoshi). Il valore si divide in:</p> <ul> <li> <p>confirmedBalance: di tipo <code>long</code>, valore con almeno 3 conferme sulla blockchain Bitcoin e quindi disponibile per l'utente;</p> </li> <li> <p>unconfirmedBalance: di tipo <code>long</code>, valore con meno di 3 conferme e quindi non ancora disponibile.</p> </li> </ul>"},{"location":"Old/wallet/Wallet/#errori_4","title":"Errori","text":"<ul> <li>Non autorizzato</li> </ul>"},{"location":"Old/wallet/Wallet/#codice_4","title":"Codice","text":""},{"location":"Old/wallet/Wallet/#android_7","title":"Android","text":"<pre><code>conio.walletService.walletBalances()\n    .asCallback(result -&gt; result.analysis(\n        balances -&gt; { /* Handle WalletBalances */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/wallet/Wallet/#ios_7","title":"iOS","text":"<pre><code>conio.walletService.walletBalances().asCallback { result in\n    switch result {\n    case .success(let balances):\n        // WalletBalances\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"},{"location":"Old/wallet/Wallet/#codice-di-recupero-bitcoin","title":"Codice di recupero Bitcoin","text":"<p>Permette di recuperare dalla memoria del dispositivo il \"Codie di recupero Bitcoin\": 12 parole di backup del portafoglio Bitcoin.</p>"},{"location":"Old/wallet/Wallet/#risposta_5","title":"Risposta","text":"<p>Un oggetto di tipo <code>MnemonicWords</code> contenente un array di 12 stringhe.</p>"},{"location":"Old/wallet/Wallet/#errori_5","title":"Errori","text":"<ul> <li>Non autorizzato</li> </ul>"},{"location":"Old/wallet/Wallet/#codice_5","title":"Codice","text":""},{"location":"Old/wallet/Wallet/#android_8","title":"Android","text":"<pre><code>conio.walletService.readMnemonic()\n    .asCallback(result -&gt; result.analysis(\n        mnemonic -&gt; { /* Handle MnemonicWords */ },\n        error -&gt; { /* ... */ }\n    ));\n</code></pre>"},{"location":"Old/wallet/Wallet/#ios_8","title":"iOS","text":"<pre><code>conio.walletService.readMnemonic().asCallback { result in\n    switch result {\n    case .success(let mnemonic):\n        // MnemonicWords\n    case .failure(let error):\n        // Operation Error\n    }\n}\n</code></pre>"}]}