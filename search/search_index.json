{"config":{"indexing":"full","lang":["it"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Conio Conio SDK provides a set of Android and iOS native APIs for Conio services to let you create native applications with Crypto Wallets and Crypto Trading functionalities. Overview Installation iOS Android Configuration iOS Android Features User Service Trading Info Service Wallet Service BTC Transaction Management Service Trading Buy Service Trading Sell Service Trading Price Service Swap Service Transfer Service Activities Service Old Old docs","title":"Home"},{"location":"#conio","text":"Conio SDK provides a set of Android and iOS native APIs for Conio services to let you create native applications with Crypto Wallets and Crypto Trading functionalities.","title":"Conio"},{"location":"#overview","text":"Installation iOS Android Configuration iOS Android Features User Service Trading Info Service Wallet Service BTC Transaction Management Service Trading Buy Service Trading Sell Service Trading Price Service Swap Service Transfer Service Activities Service","title":"Overview"},{"location":"#old","text":"Old docs","title":"Old"},{"location":"CHANGELOG/","text":"Changelog iOS Android iOS 2.1.1 - 04-10-2024 Changed TSK-6182: Update Fetch Historical Prices 2.1.0 - 18-09-2024 Changed TSK-4511: Transfer Service 2.0.1 - 07-08-2024 Changed Update ConioSDK 2.0.0 - 13-06-2024 Added TSK-4503: Trading Info Service TSK-4504: Btc Transaction Management Service TSK-4505: Trading Buy Service TSK-4506: Trading Sell Service TSK-4509: Trading Price Service TSK-4510: Swap Service Changed TSK-4502: User Service TSK-4598: Wallet Service 0.7.0 - 07-06-2022 Added Model CryptoSellParams to replace SellParams ConioError.onNetwork to wrap network communication errors Changed SellParams deprecated Factory init used to create/refresh an ask with all user available amount Fixed Always throw ConioError.unauthorized on session expired 0.6.10 - 09-02-2022 Changed Update legal acceptances 0.6.9 - 08-02-2022 Changed Error mapping as unauthorized on 401 status code 0.6.8 - 28-01-2022 Added Transaction speedup Reset password flow APIs KYC create applicant params public init KYC trigger check params public init User data handling APIs User permissions map update Changed Updated model: withdrawal transaction, available fee Fixed Signup B2B wallet encrypt with hashed password Bad cancellables store in operations Missing password hash on B2B signup 0.6.2 - 17-11-2021 Changed Wallet service walletPDFActivities , limit in PDFActivitiesParams now optional Added User service getLegalAcceptances , new preContractualInfoUrl param in LegalAcceptances response 0.6.0 - 02-11-2021 Added User service changeEmail 0.5.0 - 11-10-2021 Changed Data serialization and mapping Code refactor and optimizations 0.4.0 - 13-09-2021 Fixed Wrong mapping for rangeFrom property in ServiceFee Changed Update rangeFrom type from UInt64? to FiatAmount? in ServiceFee 0.3.3 - 07-09-2021 Changed Rename tradedFiat to weightedBidBalance in TradingInfo.swift as per docs specifications 0.3.2 - 20-07-2021 Added Bitcoin network privateMainnet and privateTestnet 0.3.1 - 19-07-2021 Fixed Avoid using app bundle identifier during keychain init 0.3.0 - 14-07-2021 Changed Added missing filters params in ActivitiesParams to correctly get wallet activities Refactor on SDK errors: ConioError is now the only error type throwable (check operation section) 0.2.0 - 06-07-2021 Changed SDK configuration object ConioConfiguration has no default value and must be explicitly initialized Fixed Fix wrong privacy policies url mapping in GetLegalAcceptancesOperation Avoid build error on Xcode 12.4 in OpenAPIConioBuilder 0.1.6 - 25-06-2021 Changed Explicit fees represented as intervals WiretransferPayeeInfo in CreatedBid has now two dedicated properties representing standard and custom wire transfer payee info CreatedBid now contains net cost amount fiatAmount and gross amount grossFiatAmount All fiat amounts are now represented as Decimal 0.1.5 - 15-06-2021 Changed Models update Bid , Ask e Transaction properties linked to amount/balance now are declared with type UInt64 Added ConioError entity to map operation errors 0.1.4 - 10-06-2021 Changed Models update Bid , Ask , WalletBalances e SimpleActivity properties now have public control access Bid , Ask , WalletBalances e SimpleActivity properties linked to amount/balance now are declared with type UInt64 Removed Removed SwiftyRSA from dependencies included in ConioSDK 0.1.3 - 03-06-2021 Fixed Correzione errore signup operation 0.1.0 - 12-04-2021 Added Rilascio versione 0.1.0 Android 0.8.11 - 7-06-2022 Added ConioException.OnNetwork to wrap network communication errors Fixed Always throw ConioException.Unauthorized on session expired 0.8.3 - 24-03-2022 Fixed Initialization error caused by unusable KeyStore keys 0.8.0 - 9-03-2022 Changed Minimum Android version supported to Android 6.0 (Android Sdk Version: 23 ) Improved performance SellParams deprecated Added Factory method CreateOrRefreshAskParams.withAll to request an Ask with the maximum sellable amount Model CryptoChangeEmailParams to replace ChangeEmailParams Model CryptoSellParams to replace SellParams 0.7.18 - 8-02-2022 Changed Solved retro-compatibility with OkHttp 3.x Removed appsync dependency 0.7.16 - 4-02-2022 Changed Downgraded OkHttp to 3.14.9 0.7.15 - 3-02-2022 Changed Improved concurrencly on service layer Updated OkHttp to 4.9.0 0.7.13 - 24-01-2022 Fixed Compatibility issue below Api level 26 0.7.9 - 26-11-2021 Changed Legal text copies on the LegalAcceptances model 0.7.8 - 17-11-2021 Changed Wallet service activityListPdf , limit in ActivityListPdfParams now nullable Added User service getLegalAcceptances , new preContractualInfoUrl param in LegalAcceptances response 0.7.4 - 02-11-2021 Added User service changeEmail 0.7.2 - 20-10-2021 Added API to get activities in PDF format 0.7.0 - 11-10-2021 Changed Data serialization and mapping Code refactor and optimizations 0.6.2 - 03-08-2021 Fixed Security issue 0.6.1 - 29-07-2021 Changed Refactor on SDK errors: ConioException as the operations result error type 0.6.0 - 28-07-2021 Changed Refactor on SDK errors: ConioException is now the only error type throwable (check operation section) 0.5.4 - 26-07-2021 Fixed Made cro , iban and chargedAt fields of Ask class optional Made paidAt field of Ask class non-optional 0.5.3 - 20-07-2021 Added Bitcoin network privateMainnet and privateTestnet 0.5.1 - 14-07-2021 Fixed Fix factory methods of TimeFrame class 0.5.0 - 06-07-2021 Changed SDK configuration object ConioConfiguration has no default value and must be explicitly initialized 0.4.8 - 25-06-2021 Changed Explicit fees represented as intervals WiretransferPayeeInfo in CreatedBid has now two dedicated properties representing standard and custom wire transfer payee info CreatedBid now contains net cost amount fiatAmount and gross amount grossFiatAmount All fiat amounts are now represented as BigDecimal Removed Removed type property from ServiceFee entity Renamed id property of model entities: CreatedAsk.id -> CreatedAsk.askId CreatedBid.id -> CreatedBid.bidId SimpleActivity.id -> SimpleActivity.activityId ActivityDetails.id -> ActivityDetails.activityId Added ConioError : INVALID_CRYPTO_PROOF, CRYPTO_PROOF_EXPIRED 0.4.7 - 01-06-2021 Added Aggiunta di weightedBidBalance alle TradingInfo : controvalore investito modified Modifica alle TradingFees : supporto fasce di commissioni 0.4.2 - 13-04-2021 Added Rilascio versione 0.4.2 0.4.1 - 12-04-2021 Added Rilascio versione 0.4.1","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"iOS Android","title":"Changelog"},{"location":"CHANGELOG/#ios","text":"","title":"iOS"},{"location":"CHANGELOG/#211-04-10-2024","text":"","title":"2.1.1 - 04-10-2024"},{"location":"CHANGELOG/#changed","text":"TSK-6182: Update Fetch Historical Prices","title":"Changed"},{"location":"CHANGELOG/#210-18-09-2024","text":"","title":"2.1.0 - 18-09-2024"},{"location":"CHANGELOG/#changed_1","text":"TSK-4511: Transfer Service","title":"Changed"},{"location":"CHANGELOG/#201-07-08-2024","text":"","title":"2.0.1 - 07-08-2024"},{"location":"CHANGELOG/#changed_2","text":"Update ConioSDK","title":"Changed"},{"location":"CHANGELOG/#200-13-06-2024","text":"","title":"2.0.0 - 13-06-2024"},{"location":"CHANGELOG/#added","text":"TSK-4503: Trading Info Service TSK-4504: Btc Transaction Management Service TSK-4505: Trading Buy Service TSK-4506: Trading Sell Service TSK-4509: Trading Price Service TSK-4510: Swap Service","title":"Added"},{"location":"CHANGELOG/#changed_3","text":"TSK-4502: User Service TSK-4598: Wallet Service","title":"Changed"},{"location":"CHANGELOG/#070-07-06-2022","text":"","title":"0.7.0 - 07-06-2022"},{"location":"CHANGELOG/#added_1","text":"Model CryptoSellParams to replace SellParams ConioError.onNetwork to wrap network communication errors","title":"Added"},{"location":"CHANGELOG/#changed_4","text":"SellParams deprecated Factory init used to create/refresh an ask with all user available amount","title":"Changed"},{"location":"CHANGELOG/#fixed","text":"Always throw ConioError.unauthorized on session expired","title":"Fixed"},{"location":"CHANGELOG/#0610-09-02-2022","text":"","title":"0.6.10 - 09-02-2022"},{"location":"CHANGELOG/#changed_5","text":"Update legal acceptances","title":"Changed"},{"location":"CHANGELOG/#069-08-02-2022","text":"","title":"0.6.9 - 08-02-2022"},{"location":"CHANGELOG/#changed_6","text":"Error mapping as unauthorized on 401 status code","title":"Changed"},{"location":"CHANGELOG/#068-28-01-2022","text":"","title":"0.6.8 - 28-01-2022"},{"location":"CHANGELOG/#added_2","text":"Transaction speedup Reset password flow APIs KYC create applicant params public init KYC trigger check params public init User data handling APIs User permissions map update","title":"Added"},{"location":"CHANGELOG/#changed_7","text":"Updated model: withdrawal transaction, available fee","title":"Changed"},{"location":"CHANGELOG/#fixed_1","text":"Signup B2B wallet encrypt with hashed password Bad cancellables store in operations Missing password hash on B2B signup","title":"Fixed"},{"location":"CHANGELOG/#062-17-11-2021","text":"","title":"0.6.2 - 17-11-2021"},{"location":"CHANGELOG/#changed_8","text":"Wallet service walletPDFActivities , limit in PDFActivitiesParams now optional","title":"Changed"},{"location":"CHANGELOG/#added_3","text":"User service getLegalAcceptances , new preContractualInfoUrl param in LegalAcceptances response","title":"Added"},{"location":"CHANGELOG/#060-02-11-2021","text":"","title":"0.6.0 - 02-11-2021"},{"location":"CHANGELOG/#added_4","text":"User service changeEmail","title":"Added"},{"location":"CHANGELOG/#050-11-10-2021","text":"","title":"0.5.0 - 11-10-2021"},{"location":"CHANGELOG/#changed_9","text":"Data serialization and mapping Code refactor and optimizations","title":"Changed"},{"location":"CHANGELOG/#040-13-09-2021","text":"","title":"0.4.0 - 13-09-2021"},{"location":"CHANGELOG/#fixed_2","text":"Wrong mapping for rangeFrom property in ServiceFee","title":"Fixed"},{"location":"CHANGELOG/#changed_10","text":"Update rangeFrom type from UInt64? to FiatAmount? in ServiceFee","title":"Changed"},{"location":"CHANGELOG/#033-07-09-2021","text":"","title":"0.3.3 - 07-09-2021"},{"location":"CHANGELOG/#changed_11","text":"Rename tradedFiat to weightedBidBalance in TradingInfo.swift as per docs specifications","title":"Changed"},{"location":"CHANGELOG/#032-20-07-2021","text":"","title":"0.3.2 - 20-07-2021"},{"location":"CHANGELOG/#added_5","text":"Bitcoin network privateMainnet and privateTestnet","title":"Added"},{"location":"CHANGELOG/#031-19-07-2021","text":"","title":"0.3.1 - 19-07-2021"},{"location":"CHANGELOG/#fixed_3","text":"Avoid using app bundle identifier during keychain init","title":"Fixed"},{"location":"CHANGELOG/#030-14-07-2021","text":"","title":"0.3.0 - 14-07-2021"},{"location":"CHANGELOG/#changed_12","text":"Added missing filters params in ActivitiesParams to correctly get wallet activities Refactor on SDK errors: ConioError is now the only error type throwable (check operation section)","title":"Changed"},{"location":"CHANGELOG/#020-06-07-2021","text":"","title":"0.2.0 - 06-07-2021"},{"location":"CHANGELOG/#changed_13","text":"SDK configuration object ConioConfiguration has no default value and must be explicitly initialized","title":"Changed"},{"location":"CHANGELOG/#fixed_4","text":"Fix wrong privacy policies url mapping in GetLegalAcceptancesOperation Avoid build error on Xcode 12.4 in OpenAPIConioBuilder","title":"Fixed"},{"location":"CHANGELOG/#016-25-06-2021","text":"","title":"0.1.6 - 25-06-2021"},{"location":"CHANGELOG/#changed_14","text":"Explicit fees represented as intervals WiretransferPayeeInfo in CreatedBid has now two dedicated properties representing standard and custom wire transfer payee info CreatedBid now contains net cost amount fiatAmount and gross amount grossFiatAmount All fiat amounts are now represented as Decimal","title":"Changed"},{"location":"CHANGELOG/#015-15-06-2021","text":"","title":"0.1.5 - 15-06-2021"},{"location":"CHANGELOG/#changed_15","text":"Models update Bid , Ask e Transaction properties linked to amount/balance now are declared with type UInt64","title":"Changed"},{"location":"CHANGELOG/#added_6","text":"ConioError entity to map operation errors","title":"Added"},{"location":"CHANGELOG/#014-10-06-2021","text":"","title":"0.1.4 - 10-06-2021"},{"location":"CHANGELOG/#changed_16","text":"Models update Bid , Ask , WalletBalances e SimpleActivity properties now have public control access Bid , Ask , WalletBalances e SimpleActivity properties linked to amount/balance now are declared with type UInt64","title":"Changed"},{"location":"CHANGELOG/#removed","text":"Removed SwiftyRSA from dependencies included in ConioSDK","title":"Removed"},{"location":"CHANGELOG/#013-03-06-2021","text":"","title":"0.1.3 - 03-06-2021"},{"location":"CHANGELOG/#fixed_5","text":"Correzione errore signup operation","title":"Fixed"},{"location":"CHANGELOG/#010-12-04-2021","text":"","title":"0.1.0 - 12-04-2021"},{"location":"CHANGELOG/#added_7","text":"Rilascio versione 0.1.0","title":"Added"},{"location":"CHANGELOG/#android","text":"","title":"Android"},{"location":"CHANGELOG/#0811-7-06-2022","text":"","title":"0.8.11 - 7-06-2022"},{"location":"CHANGELOG/#added_8","text":"ConioException.OnNetwork to wrap network communication errors","title":"Added"},{"location":"CHANGELOG/#fixed_6","text":"Always throw ConioException.Unauthorized on session expired","title":"Fixed"},{"location":"CHANGELOG/#083-24-03-2022","text":"","title":"0.8.3 - 24-03-2022"},{"location":"CHANGELOG/#fixed_7","text":"Initialization error caused by unusable KeyStore keys","title":"Fixed"},{"location":"CHANGELOG/#080-9-03-2022","text":"","title":"0.8.0 - 9-03-2022"},{"location":"CHANGELOG/#changed_17","text":"Minimum Android version supported to Android 6.0 (Android Sdk Version: 23 ) Improved performance SellParams deprecated","title":"Changed"},{"location":"CHANGELOG/#added_9","text":"Factory method CreateOrRefreshAskParams.withAll to request an Ask with the maximum sellable amount Model CryptoChangeEmailParams to replace ChangeEmailParams Model CryptoSellParams to replace SellParams","title":"Added"},{"location":"CHANGELOG/#0718-8-02-2022","text":"","title":"0.7.18 - 8-02-2022"},{"location":"CHANGELOG/#changed_18","text":"Solved retro-compatibility with OkHttp 3.x Removed appsync dependency","title":"Changed"},{"location":"CHANGELOG/#0716-4-02-2022","text":"","title":"0.7.16 - 4-02-2022"},{"location":"CHANGELOG/#changed_19","text":"Downgraded OkHttp to 3.14.9","title":"Changed"},{"location":"CHANGELOG/#0715-3-02-2022","text":"","title":"0.7.15 - 3-02-2022"},{"location":"CHANGELOG/#changed_20","text":"Improved concurrencly on service layer Updated OkHttp to 4.9.0","title":"Changed"},{"location":"CHANGELOG/#0713-24-01-2022","text":"","title":"0.7.13 - 24-01-2022"},{"location":"CHANGELOG/#fixed_8","text":"Compatibility issue below Api level 26","title":"Fixed"},{"location":"CHANGELOG/#079-26-11-2021","text":"","title":"0.7.9 - 26-11-2021"},{"location":"CHANGELOG/#changed_21","text":"Legal text copies on the LegalAcceptances model","title":"Changed"},{"location":"CHANGELOG/#078-17-11-2021","text":"","title":"0.7.8 - 17-11-2021"},{"location":"CHANGELOG/#changed_22","text":"Wallet service activityListPdf , limit in ActivityListPdfParams now nullable","title":"Changed"},{"location":"CHANGELOG/#added_10","text":"User service getLegalAcceptances , new preContractualInfoUrl param in LegalAcceptances response","title":"Added"},{"location":"CHANGELOG/#074-02-11-2021","text":"","title":"0.7.4 - 02-11-2021"},{"location":"CHANGELOG/#added_11","text":"User service changeEmail","title":"Added"},{"location":"CHANGELOG/#072-20-10-2021","text":"","title":"0.7.2 - 20-10-2021"},{"location":"CHANGELOG/#added_12","text":"API to get activities in PDF format","title":"Added"},{"location":"CHANGELOG/#070-11-10-2021","text":"","title":"0.7.0 - 11-10-2021"},{"location":"CHANGELOG/#changed_23","text":"Data serialization and mapping Code refactor and optimizations","title":"Changed"},{"location":"CHANGELOG/#062-03-08-2021","text":"","title":"0.6.2 - 03-08-2021"},{"location":"CHANGELOG/#fixed_9","text":"Security issue","title":"Fixed"},{"location":"CHANGELOG/#061-29-07-2021","text":"","title":"0.6.1 - 29-07-2021"},{"location":"CHANGELOG/#changed_24","text":"Refactor on SDK errors: ConioException as the operations result error type","title":"Changed"},{"location":"CHANGELOG/#060-28-07-2021","text":"","title":"0.6.0 - 28-07-2021"},{"location":"CHANGELOG/#changed_25","text":"Refactor on SDK errors: ConioException is now the only error type throwable (check operation section)","title":"Changed"},{"location":"CHANGELOG/#054-26-07-2021","text":"","title":"0.5.4 - 26-07-2021"},{"location":"CHANGELOG/#fixed_10","text":"Made cro , iban and chargedAt fields of Ask class optional Made paidAt field of Ask class non-optional","title":"Fixed"},{"location":"CHANGELOG/#053-20-07-2021","text":"","title":"0.5.3 - 20-07-2021"},{"location":"CHANGELOG/#added_13","text":"Bitcoin network privateMainnet and privateTestnet","title":"Added"},{"location":"CHANGELOG/#051-14-07-2021","text":"","title":"0.5.1 - 14-07-2021"},{"location":"CHANGELOG/#fixed_11","text":"Fix factory methods of TimeFrame class","title":"Fixed"},{"location":"CHANGELOG/#050-06-07-2021","text":"","title":"0.5.0 - 06-07-2021"},{"location":"CHANGELOG/#changed_26","text":"SDK configuration object ConioConfiguration has no default value and must be explicitly initialized","title":"Changed"},{"location":"CHANGELOG/#048-25-06-2021","text":"","title":"0.4.8 - 25-06-2021"},{"location":"CHANGELOG/#changed_27","text":"Explicit fees represented as intervals WiretransferPayeeInfo in CreatedBid has now two dedicated properties representing standard and custom wire transfer payee info CreatedBid now contains net cost amount fiatAmount and gross amount grossFiatAmount All fiat amounts are now represented as BigDecimal","title":"Changed"},{"location":"CHANGELOG/#removed_1","text":"Removed type property from ServiceFee entity Renamed id property of model entities: CreatedAsk.id -> CreatedAsk.askId CreatedBid.id -> CreatedBid.bidId SimpleActivity.id -> SimpleActivity.activityId ActivityDetails.id -> ActivityDetails.activityId","title":"Removed"},{"location":"CHANGELOG/#added_14","text":"ConioError : INVALID_CRYPTO_PROOF, CRYPTO_PROOF_EXPIRED","title":"Added"},{"location":"CHANGELOG/#047-01-06-2021","text":"","title":"0.4.7 - 01-06-2021"},{"location":"CHANGELOG/#added_15","text":"Aggiunta di weightedBidBalance alle TradingInfo : controvalore investito","title":"Added"},{"location":"CHANGELOG/#modified","text":"Modifica alle TradingFees : supporto fasce di commissioni","title":"modified"},{"location":"CHANGELOG/#042-13-04-2021","text":"","title":"0.4.2 - 13-04-2021"},{"location":"CHANGELOG/#added_16","text":"Rilascio versione 0.4.2","title":"Added"},{"location":"CHANGELOG/#041-12-04-2021","text":"","title":"0.4.1 - 12-04-2021"},{"location":"CHANGELOG/#added_17","text":"Rilascio versione 0.4.1","title":"Added"},{"location":"Features/","text":"Features Overview The Conio SDK provides a suite of modular services tailored to specific functionalities. These include wallet management, trading capabilities, and secure authentication. Each module offers the flexibility to integrate cryptocurrency features seamlessly into existing mobile applications. User Service User Service Trading Info Service Trading Info Service Wallet Service Wallet Service BTC Transaction Management Service Trading Buy Service Trading Sell Service Trading Price Service Swap Service Transfer Service Activity Service","title":"Features"},{"location":"Features/#features","text":"","title":"Features"},{"location":"Features/#overview","text":"The Conio SDK provides a suite of modular services tailored to specific functionalities. These include wallet management, trading capabilities, and secure authentication. Each module offers the flexibility to integrate cryptocurrency features seamlessly into existing mobile applications.","title":"Overview"},{"location":"Features/#user-service","text":"User Service","title":"User Service"},{"location":"Features/#trading-info-service","text":"Trading Info Service","title":"Trading Info Service"},{"location":"Features/#wallet-service","text":"Wallet Service","title":"Wallet Service"},{"location":"Features/#btc-transaction-management-service","text":"","title":"BTC Transaction Management Service"},{"location":"Features/#trading-buy-service","text":"","title":"Trading Buy Service"},{"location":"Features/#trading-sell-service","text":"","title":"Trading Sell Service"},{"location":"Features/#trading-price-service","text":"","title":"Trading Price Service"},{"location":"Features/#swap-service","text":"","title":"Swap Service"},{"location":"Features/#transfer-service","text":"","title":"Transfer Service"},{"location":"Features/#activity-service","text":"","title":"Activity Service"},{"location":"Configuration/Android/","text":"Android Configuration To use the Conio SDK, you need to create an instance of the Conio class, providing an Android Context and a ConioConfiguration . The ConioConfiguration allow you to specify the execution environment of the Conio SDK (e.g. test or production) and can be created with the url of the Conio Back-end and with the related Bitcoin Network. val configuration = ConioConfiguration( // required baseUrl = \"https://example.test.com\", bitcoinNetwork = BitcoinNetwork.Testnet, // or BitcoinNetwork.Mainnet for production enviroment // optional // http headers added to each request, usefull for debug purpose headers = mapOf(\"header_key\" to \"header_value\"), ) val conio = Conio(configuration, context)","title":"Android"},{"location":"Configuration/Android/#android-configuration","text":"To use the Conio SDK, you need to create an instance of the Conio class, providing an Android Context and a ConioConfiguration . The ConioConfiguration allow you to specify the execution environment of the Conio SDK (e.g. test or production) and can be created with the url of the Conio Back-end and with the related Bitcoin Network. val configuration = ConioConfiguration( // required baseUrl = \"https://example.test.com\", bitcoinNetwork = BitcoinNetwork.Testnet, // or BitcoinNetwork.Mainnet for production enviroment // optional // http headers added to each request, usefull for debug purpose headers = mapOf(\"header_key\" to \"header_value\"), ) val conio = Conio(configuration, context)","title":"Android Configuration"},{"location":"Configuration/Ios/","text":"iOS Configuration ConioB2BSDK is divided into multiple services, each one providing a different set of APIs. Each service is independent and can be initialized through a ServiceConfiguration configuration using its own factory. let conioConfig = ConioConfiguration.makeTestConfiguration(baseUrl: ...) let userService = UserServiceFactory().makeServiceUsingConfiguration(conioConfig) // User Service ready to be used userService .login(with: ...) .asPublisher() .sink { ... } // ... Otherwise, ConioB2BServiceFactory factory leverages on a single ServiceFactory to make the requested Service . let conioConfig = ConioConfiguration.makeTestConfiguration(baseUrl: ...) let userService = ConioB2BServiceFactory.makeServiceUsingFactory(UserServiceFactory(), serviceConfiguration: conioConfig) let walletService = ConioB2BServiceFactory.makeServiceUsingFactory(WalletServiceFactory(), serviceConfiguration: conioConfig) let activitiesService = ConioB2BServiceFactory.makeServiceUsingFactory(ActivitiesServiceFactory(), serviceConfiguration: conioConfig) // ... Usage The single Service API is initialized with its specific Params parameters (if necessary) and the output can be read through its OperationResult result. // ... let params = LoginParams .make( username: ..., password: ..., cryptoRequest: ... ) userService .login(with: params) .asPublisher() .sink { result in switch result { case .success: // ... case .failure(let error): // ... } } .store(in: ...) // ... Each API is returned as ServiceConsumer and can be consumed in three different ways: asPublisher() , used to handle the result in a declarative way leveraging on Combine ; asCallback() , used to handle the result in closure/lambda style as self-contained block; run() , used to execute the API without handling the result. // asPublisher() let cancellable = userService .logout() .asPublisher() .sink { result in // ... } // asCallback() userService logout() .asCallback { result in // ... } // run() userService .logout() .run()","title":"iOS"},{"location":"Configuration/Ios/#ios-configuration","text":"ConioB2BSDK is divided into multiple services, each one providing a different set of APIs. Each service is independent and can be initialized through a ServiceConfiguration configuration using its own factory. let conioConfig = ConioConfiguration.makeTestConfiguration(baseUrl: ...) let userService = UserServiceFactory().makeServiceUsingConfiguration(conioConfig) // User Service ready to be used userService .login(with: ...) .asPublisher() .sink { ... } // ... Otherwise, ConioB2BServiceFactory factory leverages on a single ServiceFactory to make the requested Service . let conioConfig = ConioConfiguration.makeTestConfiguration(baseUrl: ...) let userService = ConioB2BServiceFactory.makeServiceUsingFactory(UserServiceFactory(), serviceConfiguration: conioConfig) let walletService = ConioB2BServiceFactory.makeServiceUsingFactory(WalletServiceFactory(), serviceConfiguration: conioConfig) let activitiesService = ConioB2BServiceFactory.makeServiceUsingFactory(ActivitiesServiceFactory(), serviceConfiguration: conioConfig) // ...","title":"iOS Configuration"},{"location":"Configuration/Ios/#usage","text":"The single Service API is initialized with its specific Params parameters (if necessary) and the output can be read through its OperationResult result. // ... let params = LoginParams .make( username: ..., password: ..., cryptoRequest: ... ) userService .login(with: params) .asPublisher() .sink { result in switch result { case .success: // ... case .failure(let error): // ... } } .store(in: ...) // ... Each API is returned as ServiceConsumer and can be consumed in three different ways: asPublisher() , used to handle the result in a declarative way leveraging on Combine ; asCallback() , used to handle the result in closure/lambda style as self-contained block; run() , used to execute the API without handling the result. // asPublisher() let cancellable = userService .logout() .asPublisher() .sink { result in // ... } // asCallback() userService logout() .asCallback { result in // ... } // run() userService .logout() .run()","title":"Usage"},{"location":"Features/ActivitiesService/","text":"Activities Service The ActivitiesService contains all the API that provides information about wallets transactions. APIs Activities Fetch Activities Single Activity Fetch Activity","title":"Activities Service"},{"location":"Features/ActivitiesService/#activities-service","text":"The ActivitiesService contains all the API that provides information about wallets transactions.","title":"Activities Service"},{"location":"Features/ActivitiesService/#apis","text":"","title":"APIs"},{"location":"Features/ActivitiesService/#activities","text":"Fetch Activities","title":"Activities"},{"location":"Features/ActivitiesService/#single-activity","text":"Fetch Activity","title":"Single Activity"},{"location":"Features/BtcTransactionManagementService/","text":"BTC Transaction Management Service The BtcTransactionManagementService contains all the APIs responsible for managing Bitcoin transactions, including sending bitcoin, receiving bitcoin and speeding up transactions. APIs Receive Fetch Address Send Send Bitcoin Speed Up Speed Up Transaction Transaction Available Fees Fetch Transaction Available Fees Speed Up Transaction Available Fees Fetch Speed Up Available Fees","title":"BTC Transaction Management Service"},{"location":"Features/BtcTransactionManagementService/#btc-transaction-management-service","text":"The BtcTransactionManagementService contains all the APIs responsible for managing Bitcoin transactions, including sending bitcoin, receiving bitcoin and speeding up transactions.","title":"BTC Transaction Management Service"},{"location":"Features/BtcTransactionManagementService/#apis","text":"","title":"APIs"},{"location":"Features/BtcTransactionManagementService/#receive","text":"Fetch Address","title":"Receive"},{"location":"Features/BtcTransactionManagementService/#send","text":"Send Bitcoin","title":"Send"},{"location":"Features/BtcTransactionManagementService/#speed-up","text":"Speed Up Transaction","title":"Speed Up"},{"location":"Features/BtcTransactionManagementService/#transaction-available-fees","text":"Fetch Transaction Available Fees","title":"Transaction Available Fees"},{"location":"Features/BtcTransactionManagementService/#speed-up-transaction-available-fees","text":"Fetch Speed Up Available Fees","title":"Speed Up Transaction Available Fees"},{"location":"Features/SwapService/","text":"Swap Service The SwapService contains all the APIs designed to facilitate the cryptocurrency swap functionality. It provides methods for creating, updating, fetching and finalizing swap quotations between cryptos. APIs Create New Swap Create Swap Update Existing Swap Update Swap Fetch Existing Swap Fetch Swap Swap Cryptocurrency Swap","title":"Swap Service"},{"location":"Features/SwapService/#swap-service","text":"The SwapService contains all the APIs designed to facilitate the cryptocurrency swap functionality. It provides methods for creating, updating, fetching and finalizing swap quotations between cryptos.","title":"Swap Service"},{"location":"Features/SwapService/#apis","text":"","title":"APIs"},{"location":"Features/SwapService/#create-new-swap","text":"Create Swap","title":"Create New Swap"},{"location":"Features/SwapService/#update-existing-swap","text":"Update Swap","title":"Update Existing Swap"},{"location":"Features/SwapService/#fetch-existing-swap","text":"Fetch Swap","title":"Fetch Existing Swap"},{"location":"Features/SwapService/#swap-cryptocurrency","text":"Swap","title":"Swap Cryptocurrency"},{"location":"Features/TradingBuyService/","text":"Trading Buy Service The TradingBuyService contains all the APIs designed to facilitate the purchase of cryptocurrencies through trading operations. It provides methods for creating, updating, fetching and finalizing bid quotations. APIs Create New Bid Create Bid Update Existing Bid Update Bid Fetch Existing Bid Fetch Bid Buy Cryptocurrency Buy","title":"Trading Buy Service"},{"location":"Features/TradingBuyService/#trading-buy-service","text":"The TradingBuyService contains all the APIs designed to facilitate the purchase of cryptocurrencies through trading operations. It provides methods for creating, updating, fetching and finalizing bid quotations.","title":"Trading Buy Service"},{"location":"Features/TradingBuyService/#apis","text":"","title":"APIs"},{"location":"Features/TradingBuyService/#create-new-bid","text":"Create Bid","title":"Create New Bid"},{"location":"Features/TradingBuyService/#update-existing-bid","text":"Update Bid","title":"Update Existing Bid"},{"location":"Features/TradingBuyService/#fetch-existing-bid","text":"Fetch Bid","title":"Fetch Existing Bid"},{"location":"Features/TradingBuyService/#buy-cryptocurrency","text":"Buy","title":"Buy Cryptocurrency"},{"location":"Features/TradingInfoService/","text":"Trading Info Service The TradingInfoService contains all the APIs used to manage a Conio user trading profile and information. APIs Fetch Trading Fees Fetch Trading Fees Fetch Trading Summary Fetch Trading Summary Fetch Trading Limits Fetch Trading Limits Fetch Trading Report Fetch Trading Report","title":"Trading Info Service"},{"location":"Features/TradingInfoService/#trading-info-service","text":"The TradingInfoService contains all the APIs used to manage a Conio user trading profile and information.","title":"Trading Info Service"},{"location":"Features/TradingInfoService/#apis","text":"","title":"APIs"},{"location":"Features/TradingInfoService/#fetch-trading-fees","text":"Fetch Trading Fees","title":"Fetch Trading Fees"},{"location":"Features/TradingInfoService/#fetch-trading-summary","text":"Fetch Trading Summary","title":"Fetch Trading Summary"},{"location":"Features/TradingInfoService/#fetch-trading-limits","text":"Fetch Trading Limits","title":"Fetch Trading Limits"},{"location":"Features/TradingInfoService/#fetch-trading-report","text":"Fetch Trading Report","title":"Fetch Trading Report"},{"location":"Features/TradingPriceService/","text":"Trading Price Service The TradingPriceService contains all the APIs that provides cryptocurrencies trading price information. It provides methods for fetching current or historical crypto prices and tradable metadata, including cryptocurrency ids. APIs Fetch Current Cryptocurrency Price Fetch Price Fetch Historical Cryptocurrency Price Fetch Historical Prices Fetch All Current Cryptocurrencies Prices Fetch All Prices Fetch Tradable Cryptocurrencies Metadata Fetch Tradable Crypto Metadata","title":"Trading Price Service"},{"location":"Features/TradingPriceService/#trading-price-service","text":"The TradingPriceService contains all the APIs that provides cryptocurrencies trading price information. It provides methods for fetching current or historical crypto prices and tradable metadata, including cryptocurrency ids.","title":"Trading Price Service"},{"location":"Features/TradingPriceService/#apis","text":"","title":"APIs"},{"location":"Features/TradingPriceService/#fetch-current-cryptocurrency-price","text":"Fetch Price","title":"Fetch Current Cryptocurrency Price"},{"location":"Features/TradingPriceService/#fetch-historical-cryptocurrency-price","text":"Fetch Historical Prices","title":"Fetch Historical Cryptocurrency Price"},{"location":"Features/TradingPriceService/#fetch-all-current-cryptocurrencies-prices","text":"Fetch All Prices","title":"Fetch All Current Cryptocurrencies Prices"},{"location":"Features/TradingPriceService/#fetch-tradable-cryptocurrencies-metadata","text":"Fetch Tradable Crypto Metadata","title":"Fetch Tradable Cryptocurrencies Metadata"},{"location":"Features/TradingSellService/","text":"Trading Sell Service The TradingSellService contains all the APIs designed to facilitate the sale of cryptocurrencies through trading operations. It provides methods for creating, updating, fetching and finalizing ask quotations. APIs Create New Ask Create Ask Update Existing Ask Update Ask Fetch Existing Ask Fetch Ask Sell Cryptocurrency Sell","title":"Trading Sell Service"},{"location":"Features/TradingSellService/#trading-sell-service","text":"The TradingSellService contains all the APIs designed to facilitate the sale of cryptocurrencies through trading operations. It provides methods for creating, updating, fetching and finalizing ask quotations.","title":"Trading Sell Service"},{"location":"Features/TradingSellService/#apis","text":"","title":"APIs"},{"location":"Features/TradingSellService/#create-new-ask","text":"Create Ask","title":"Create New Ask"},{"location":"Features/TradingSellService/#update-existing-ask","text":"Update Ask","title":"Update Existing Ask"},{"location":"Features/TradingSellService/#fetch-existing-ask","text":"Fetch Ask","title":"Fetch Existing Ask"},{"location":"Features/TradingSellService/#sell-cryptocurrency","text":"Sell","title":"Sell Cryptocurrency"},{"location":"Features/TransferService/","text":"Transfer Service The TransferService contains all the APIs designed to facilitate the cryptocurrency amount transferring from an On-Chain Wallet to an Off-Chain Wallet of the same cryptocurrency and viceversa. It provides methods for creating, updating, fetching and finalizing transfer cryptocurrency between On-Chain and Off-Chain Wallet. APIs Create New Transfer Create Transfer Update Existing Transfer Update Transfer Fetch Existing Transfer Fetch Transfer Transfer Cryptocurrency Amount Transfer","title":"Transfer Service"},{"location":"Features/TransferService/#transfer-service","text":"The TransferService contains all the APIs designed to facilitate the cryptocurrency amount transferring from an On-Chain Wallet to an Off-Chain Wallet of the same cryptocurrency and viceversa. It provides methods for creating, updating, fetching and finalizing transfer cryptocurrency between On-Chain and Off-Chain Wallet.","title":"Transfer Service"},{"location":"Features/TransferService/#apis","text":"","title":"APIs"},{"location":"Features/TransferService/#create-new-transfer","text":"Create Transfer","title":"Create New Transfer"},{"location":"Features/TransferService/#update-existing-transfer","text":"Update Transfer","title":"Update Existing Transfer"},{"location":"Features/TransferService/#fetch-existing-transfer","text":"Fetch Transfer","title":"Fetch Existing Transfer"},{"location":"Features/TransferService/#transfer-cryptocurrency-amount","text":"Transfer","title":"Transfer Cryptocurrency Amount"},{"location":"Features/UserService/","text":"User Service The UserService contains all the APIs used to manage a Conio user. It provides methods to manage a Conio user. APIs Login User Login Signup User Signup Logout User Logout Fetch Legal Acceptances Fetch Legal Acceptances Fech User Permissions Fetch Permissions Accept New Legal Acceptances Accept New Legal Acceptances","title":"User Service"},{"location":"Features/UserService/#user-service","text":"The UserService contains all the APIs used to manage a Conio user. It provides methods to manage a Conio user.","title":"User Service"},{"location":"Features/UserService/#apis","text":"","title":"APIs"},{"location":"Features/UserService/#login","text":"User Login","title":"Login"},{"location":"Features/UserService/#signup","text":"User Signup","title":"Signup"},{"location":"Features/UserService/#logout","text":"User Logout","title":"Logout"},{"location":"Features/UserService/#fetch-legal-acceptances","text":"Fetch Legal Acceptances","title":"Fetch Legal Acceptances"},{"location":"Features/UserService/#fech-user-permissions","text":"Fetch Permissions","title":"Fech User Permissions"},{"location":"Features/UserService/#accept-new-legal-acceptances","text":"Accept New Legal Acceptances","title":"Accept New Legal Acceptances"},{"location":"Features/WalletService/","text":"Wallet Service The WalletService contains all the APIs that provides information about the user Wallets, such balance and mnemonic. APIs Balance Fetch Balances Mnemonic Fetch Mnemonic","title":"Wallet Service"},{"location":"Features/WalletService/#wallet-service","text":"The WalletService contains all the APIs that provides information about the user Wallets, such balance and mnemonic.","title":"Wallet Service"},{"location":"Features/WalletService/#apis","text":"","title":"APIs"},{"location":"Features/WalletService/#balance","text":"Fetch Balances","title":"Balance"},{"location":"Features/WalletService/#mnemonic","text":"Fetch Mnemonic","title":"Mnemonic"},{"location":"Features/ActivitiesService/FetchActivities/","text":"Fetch Activities Overview fetchActivities API is used to retrieve the paginated list of Wallet activities. It allows client to filter activity by cryptocurrency, the type of activities and timeframe. Params The FetchActivitiesParams used to initialize and perform fetchActivities API. crypto id: filter to retrieve only activities of a specific crypto currency activities types: filter to retrieve only specific activities types time frame: filter to retrieve activities created in a specific time frame pagination limit: the maximum activities number to fetch page: identifier of a specific activity page Result The ActivitiesResult contains the list of activities and an identifier to fetch the next page. activities: the Wallet activities matching the information specified in params next page: the identifier of the next activities page, that can be used to call again fetchActivities with the same filters to retrive more activities. Code iOS let params = FetchActivitiesParams .makeUsingAllActivityTypes( cryptoId: \"cETH\", timeFrame: .makeUsingLasYear(), paginationLimit: 6 ) activitiesService .fetchActivities(with: params) .asPublisher() .sink { result in // ... } Android import kotlin.time.Duration.Companion.days val params = FetchActivitiesParams( cryptoId = \"cETH\", timeFrame = TimeFrame( fromTimeInMillis = TimeFrame.now() - 365.days.inWholeMilliseconds ), paginationLimit = 6 ) conio.activityService .fetchActivities(params) .asFlow() .collect { // ... }","title":"Fetch Activities"},{"location":"Features/ActivitiesService/FetchActivities/#fetch-activities","text":"","title":"Fetch Activities"},{"location":"Features/ActivitiesService/FetchActivities/#overview","text":"fetchActivities API is used to retrieve the paginated list of Wallet activities. It allows client to filter activity by cryptocurrency, the type of activities and timeframe.","title":"Overview"},{"location":"Features/ActivitiesService/FetchActivities/#params","text":"The FetchActivitiesParams used to initialize and perform fetchActivities API. crypto id: filter to retrieve only activities of a specific crypto currency activities types: filter to retrieve only specific activities types time frame: filter to retrieve activities created in a specific time frame pagination limit: the maximum activities number to fetch page: identifier of a specific activity page","title":"Params"},{"location":"Features/ActivitiesService/FetchActivities/#result","text":"The ActivitiesResult contains the list of activities and an identifier to fetch the next page. activities: the Wallet activities matching the information specified in params next page: the identifier of the next activities page, that can be used to call again fetchActivities with the same filters to retrive more activities.","title":"Result"},{"location":"Features/ActivitiesService/FetchActivities/#code","text":"","title":"Code"},{"location":"Features/ActivitiesService/FetchActivities/#ios","text":"let params = FetchActivitiesParams .makeUsingAllActivityTypes( cryptoId: \"cETH\", timeFrame: .makeUsingLasYear(), paginationLimit: 6 ) activitiesService .fetchActivities(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/ActivitiesService/FetchActivities/#android","text":"import kotlin.time.Duration.Companion.days val params = FetchActivitiesParams( cryptoId = \"cETH\", timeFrame = TimeFrame( fromTimeInMillis = TimeFrame.now() - 365.days.inWholeMilliseconds ), paginationLimit = 6 ) conio.activityService .fetchActivities(params) .asFlow() .collect { // ... }","title":"Android"},{"location":"Features/ActivitiesService/FetchActivity/","text":"Fetch Activity Overview fetchActivity API fetches a specific Wallet activity. It allows client to specify an activity identifier to query and retrieve the related activity. Params The FetchActivityParams used to initialize and perform fetchActivity API. activity id: the activity unique identifier Result The ActivityResult contains. activity: the Wallet activity related to the identifier specified in params Code iOS let params = FetchActivityParams.make(activityId: ...) activitiesService .fetchActivities(with: params) .asPublisher() .sink { result in // ... } Android val params = FetchActivityParams( activityId = \"...\" ) conio.activityService .fetchActivity(params) .asFlow() .collect { // ... }","title":"Fetch Activity"},{"location":"Features/ActivitiesService/FetchActivity/#fetch-activity","text":"","title":"Fetch Activity"},{"location":"Features/ActivitiesService/FetchActivity/#overview","text":"fetchActivity API fetches a specific Wallet activity. It allows client to specify an activity identifier to query and retrieve the related activity.","title":"Overview"},{"location":"Features/ActivitiesService/FetchActivity/#params","text":"The FetchActivityParams used to initialize and perform fetchActivity API. activity id: the activity unique identifier","title":"Params"},{"location":"Features/ActivitiesService/FetchActivity/#result","text":"The ActivityResult contains. activity: the Wallet activity related to the identifier specified in params","title":"Result"},{"location":"Features/ActivitiesService/FetchActivity/#code","text":"","title":"Code"},{"location":"Features/ActivitiesService/FetchActivity/#ios","text":"let params = FetchActivityParams.make(activityId: ...) activitiesService .fetchActivities(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/ActivitiesService/FetchActivity/#android","text":"val params = FetchActivityParams( activityId = \"...\" ) conio.activityService .fetchActivity(params) .asFlow() .collect { // ... }","title":"Android"},{"location":"Features/BtcTransactionManagementService/FetchAddress/","text":"Fetch Address Overview fetchAddress API is used to retrieve the BTC wallet address. It allows client to fetch the BTC Wallet address and URI data. Result The BtcAddressResult BTC wallet address data. address: the alphanumeric unique BTC wallet address uri: the Uniform Resource Identifier used to facilitate payments as per BIP-21 Code iOS btcTransactionManagementService .fetchAddress() .asPublisher .sink { result in // ... } Android conio.btcTransactionService .fetchAddress() .asFlow() .collect { result -> // ... }","title":"Fetch Address"},{"location":"Features/BtcTransactionManagementService/FetchAddress/#fetch-address","text":"","title":"Fetch Address"},{"location":"Features/BtcTransactionManagementService/FetchAddress/#overview","text":"fetchAddress API is used to retrieve the BTC wallet address. It allows client to fetch the BTC Wallet address and URI data.","title":"Overview"},{"location":"Features/BtcTransactionManagementService/FetchAddress/#result","text":"The BtcAddressResult BTC wallet address data. address: the alphanumeric unique BTC wallet address uri: the Uniform Resource Identifier used to facilitate payments as per BIP-21","title":"Result"},{"location":"Features/BtcTransactionManagementService/FetchAddress/#code","text":"","title":"Code"},{"location":"Features/BtcTransactionManagementService/FetchAddress/#ios","text":"btcTransactionManagementService .fetchAddress() .asPublisher .sink { result in // ... }","title":"iOS"},{"location":"Features/BtcTransactionManagementService/FetchAddress/#android","text":"conio.btcTransactionService .fetchAddress() .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/","text":"Fetch Speed Up Available Fees Overview fetchSpeedUpAvailableFees API fetches the available speed up fees for accelerating a BTC transaction. It allows client to obtain fee information based on the transaction hash identifier for which it wants to accelerate. Params The FetchSpeedUpAvailableFeesParams used to initialize and perform fetchSpeedUpAvailableFees API. transaction hash: the transaction hash to use for retrieving available speed up fees Result The BtcSpeedUpFeesResult BTC available speed up fees data. available fees: the speedup available fees list with details transaction mempool status: the actual mempool status compared to the transaction Code iOS let params = FetchSpeedUpAvailableFeesParams.make(transactionHash: ...) btcTransactionManagementService .fetchSpeedUpAvailableFees(with: params) .asPublisher() .sink { result in // ... } Android val params = FetchSpeedUpAvailableFeesParams( transactionHash = \"...\", ) conio.btcTransactionService .fetchSpeedUpAvailableFees(params) .asFlow() .collect { result -> // ... }","title":"Fetch Speed Up Available Fees"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#fetch-speed-up-available-fees","text":"","title":"Fetch Speed Up Available Fees"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#overview","text":"fetchSpeedUpAvailableFees API fetches the available speed up fees for accelerating a BTC transaction. It allows client to obtain fee information based on the transaction hash identifier for which it wants to accelerate.","title":"Overview"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#params","text":"The FetchSpeedUpAvailableFeesParams used to initialize and perform fetchSpeedUpAvailableFees API. transaction hash: the transaction hash to use for retrieving available speed up fees","title":"Params"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#result","text":"The BtcSpeedUpFeesResult BTC available speed up fees data. available fees: the speedup available fees list with details transaction mempool status: the actual mempool status compared to the transaction","title":"Result"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#code","text":"","title":"Code"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#ios","text":"let params = FetchSpeedUpAvailableFeesParams.make(transactionHash: ...) btcTransactionManagementService .fetchSpeedUpAvailableFees(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/BtcTransactionManagementService/FetchSpeedUpAvailableFees/#android","text":"val params = FetchSpeedUpAvailableFeesParams( transactionHash = \"...\", ) conio.btcTransactionService .fetchSpeedUpAvailableFees(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/","text":"Fetch Transaction Available Fees Overview fetchTransactionAvailableFees API fetches the BTC available transaction fees. It allows client to obtain fee information based on the transaction crypto amount, transaction speed type and recipient wallet address. Params The FetchTransactionAvailableFeesParams used to initialized and perform fetchTransactionAvailableFees API. btc amount: the transaction BTC crypto amount. It can be a specific amount or the whole wallet spendable balance transaction speeds: the transaction speeds types use to retrieve available fees destination address: the BTC recipient wallet address Result The BtcTransactionFeesResult BTC available transaction fees data. available fees: the transaction available fees list with details Code iOS let params = FetchTransactionAvailableFeesParams .makeForAllSpeeds( destinationAddress: ..., amount: .cryptoAmount(value: ...) ) btcTransactionManagementService .fetchTransactionAvailableFees(with: params) .asPublisher() .sink { result in // ... } Android // val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) // val speeds = TransactionSpeed.Type.all val speeds = setOf( TransactionSpeed.Type.SpeedOne, // Fastest TransactionSpeed.Type.SpeedFive, // Slowest ... ) val params = FetchTransactionAvailableFeesParams( destinationAddress = \"...\", btcAmount = amount, transactionSpeeds = speeds, ) conio.btcTransactionService .fetchTransactionAvailableFees(params) .asFlow() .collect { result -> // ... }","title":"Fetch Transaction Available Fees"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#fetch-transaction-available-fees","text":"","title":"Fetch Transaction Available Fees"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#overview","text":"fetchTransactionAvailableFees API fetches the BTC available transaction fees. It allows client to obtain fee information based on the transaction crypto amount, transaction speed type and recipient wallet address.","title":"Overview"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#params","text":"The FetchTransactionAvailableFeesParams used to initialized and perform fetchTransactionAvailableFees API. btc amount: the transaction BTC crypto amount. It can be a specific amount or the whole wallet spendable balance transaction speeds: the transaction speeds types use to retrieve available fees destination address: the BTC recipient wallet address","title":"Params"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#result","text":"The BtcTransactionFeesResult BTC available transaction fees data. available fees: the transaction available fees list with details","title":"Result"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#code","text":"","title":"Code"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#ios","text":"let params = FetchTransactionAvailableFeesParams .makeForAllSpeeds( destinationAddress: ..., amount: .cryptoAmount(value: ...) ) btcTransactionManagementService .fetchTransactionAvailableFees(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/BtcTransactionManagementService/FetchTransactionAvailableFees/#android","text":"// val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) // val speeds = TransactionSpeed.Type.all val speeds = setOf( TransactionSpeed.Type.SpeedOne, // Fastest TransactionSpeed.Type.SpeedFive, // Slowest ... ) val params = FetchTransactionAvailableFeesParams( destinationAddress = \"...\", btcAmount = amount, transactionSpeeds = speeds, ) conio.btcTransactionService .fetchTransactionAvailableFees(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/","text":"Send Bitcoin Overview send API is used to send Bitcoin to a recipient. It allows client to send Bitcoin to a recipient based on the wallet destination address, the BTC amount to send and the fee per byte to be paid for the transaction. Params The SendParams used to initialized and perform send API. destination address: the recipient BTC wallet address btc amount: the BTC amount to send. It can be a specific amount or the whole wallet spendable balance fee per byte: the fee per byte to be paid for the send transaction Result The SendTransactionResult executed BTC send transaction data. hash: the transaction hash identifier activity id: the Conio services transaction activity identifier Code iOS let params = SendParams .makeSendingExactAmount( cryptoAmountValue: ..., destinationAddress: ..., feePerByte: ... ) btcTransactionManagementService .send(with: params) .asPublisher() .sink { result in // ... } Android // val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = SendParams( destinationAddress = \"...\", btcAmount = amount, feePerByte = CryptoAmount(...) ) conio.btcTransactionService .send(params) .asFlow() .collect { result -> // ... }","title":"Send Bitcoin"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#send-bitcoin","text":"","title":"Send Bitcoin"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#overview","text":"send API is used to send Bitcoin to a recipient. It allows client to send Bitcoin to a recipient based on the wallet destination address, the BTC amount to send and the fee per byte to be paid for the transaction.","title":"Overview"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#params","text":"The SendParams used to initialized and perform send API. destination address: the recipient BTC wallet address btc amount: the BTC amount to send. It can be a specific amount or the whole wallet spendable balance fee per byte: the fee per byte to be paid for the send transaction","title":"Params"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#result","text":"The SendTransactionResult executed BTC send transaction data. hash: the transaction hash identifier activity id: the Conio services transaction activity identifier","title":"Result"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#code","text":"","title":"Code"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#ios","text":"let params = SendParams .makeSendingExactAmount( cryptoAmountValue: ..., destinationAddress: ..., feePerByte: ... ) btcTransactionManagementService .send(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/BtcTransactionManagementService/SendBitcoin/#android","text":"// val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = SendParams( destinationAddress = \"...\", btcAmount = amount, feePerByte = CryptoAmount(...) ) conio.btcTransactionService .send(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/","text":"Speed Up Transaction Overview speedUp API is used to accelerate a pending Bitcoin transaction by increasing its fees. It allows client to speed up the transaction based on the transaction hash identifier and the new fee per byte to be paid for the transaction. Params The SpeedUpParams used to initialized and perform speedUp API. transaction hash: the transaction hash to use for submit speed up fee per byte: the new fee per byte to be paid for submit speed up Result The SpeededUpTransactionResult speeded up BTC transaction data. hash: the transaction hash identifier activity id: the Conio services transaction activity identifier Code iOS let params = SpeedUpParams .make( transactionHash: ..., feePerByte: ... ) btcTransactionManagementService .speedUp(with: params) .asPublisher() .sink { result in // ... } Android val params = SpeedUpParams( transactionHash = \"...\", feePerByte = CryptoAmount(...) ) conio.btcTransactionService .speedUp(params) .asFlow() .collect { result -> // ... }","title":"Speed Up Transaction"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#speed-up-transaction","text":"","title":"Speed Up Transaction"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#overview","text":"speedUp API is used to accelerate a pending Bitcoin transaction by increasing its fees. It allows client to speed up the transaction based on the transaction hash identifier and the new fee per byte to be paid for the transaction.","title":"Overview"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#params","text":"The SpeedUpParams used to initialized and perform speedUp API. transaction hash: the transaction hash to use for submit speed up fee per byte: the new fee per byte to be paid for submit speed up","title":"Params"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#result","text":"The SpeededUpTransactionResult speeded up BTC transaction data. hash: the transaction hash identifier activity id: the Conio services transaction activity identifier","title":"Result"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#code","text":"","title":"Code"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#ios","text":"let params = SpeedUpParams .make( transactionHash: ..., feePerByte: ... ) btcTransactionManagementService .speedUp(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/BtcTransactionManagementService/SpeedUpTransaction/#android","text":"val params = SpeedUpParams( transactionHash = \"...\", feePerByte = CryptoAmount(...) ) conio.btcTransactionService .speedUp(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/SwapService/CreateSwap/","text":"Create Swap Overview createSwap API is used to create swap quotation details between two specified cryptocurrencies. It allows client to specify the source cryptocurrency, the destination cryptocurrency and the source cryptocurrency amount to exchange. Params The CreateSwapParams used to initialized and perform createSwap API. source crypto id: the source cryptocurrency identifier used to create the swap operation destination crypto id: the destination cryptocurrency identifier used to create the swap operation source amount: the source cryptocurrency amount used to create the swap Result Swap Result Code iOS let params = CreateSwapParams .make( sourceCryptoId: \"cBTC\", destinationCryptoId: \"cETH\", sourceCryptoAmount: .max ) swapService .createSwap(with: params) .asPublisher() .sink { result in // ... } Android // val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = CreateSwapParams( sourceCryptoId = \"...\", destinationCryptoId = \"...\", sourceAmount = amount ) conio.swapService .createSwap(params) .asFlow() .collect { // ... }","title":"Create Swap"},{"location":"Features/SwapService/CreateSwap/#create-swap","text":"","title":"Create Swap"},{"location":"Features/SwapService/CreateSwap/#overview","text":"createSwap API is used to create swap quotation details between two specified cryptocurrencies. It allows client to specify the source cryptocurrency, the destination cryptocurrency and the source cryptocurrency amount to exchange.","title":"Overview"},{"location":"Features/SwapService/CreateSwap/#params","text":"The CreateSwapParams used to initialized and perform createSwap API. source crypto id: the source cryptocurrency identifier used to create the swap operation destination crypto id: the destination cryptocurrency identifier used to create the swap operation source amount: the source cryptocurrency amount used to create the swap","title":"Params"},{"location":"Features/SwapService/CreateSwap/#result","text":"Swap Result","title":"Result"},{"location":"Features/SwapService/CreateSwap/#code","text":"","title":"Code"},{"location":"Features/SwapService/CreateSwap/#ios","text":"let params = CreateSwapParams .make( sourceCryptoId: \"cBTC\", destinationCryptoId: \"cETH\", sourceCryptoAmount: .max ) swapService .createSwap(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/SwapService/CreateSwap/#android","text":"// val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = CreateSwapParams( sourceCryptoId = \"...\", destinationCryptoId = \"...\", sourceAmount = amount ) conio.swapService .createSwap(params) .asFlow() .collect { // ... }","title":"Android"},{"location":"Features/SwapService/FetchSwap/","text":"Fetch Swap Overview fetchSwap API is used to retrieve information about a specific swap. It allows client to specify the swap identifier to fetch the specific swap quotation with information such as the source cryptocurrency, source cryptocurrency amount, destination cryptocurrency, fiat amount and fees. Params The FetchSwapParams used to initialized and perform fetchSwap API. swap id: the existing swap identifier used to retrieve the specific swap quotation Result Swap Result Code iOS let params = FetchSwapParams.make(swapId: ...) swapService .fetchSwap(with: params) .asPublisher() .sink { result in // ... } Android val params = FetchSwapParams( swapId = \"...\" ) conio.swapService .fetchSwap(params) .asFlow() .collect { // ... }","title":"Fetch Swap"},{"location":"Features/SwapService/FetchSwap/#fetch-swap","text":"","title":"Fetch Swap"},{"location":"Features/SwapService/FetchSwap/#overview","text":"fetchSwap API is used to retrieve information about a specific swap. It allows client to specify the swap identifier to fetch the specific swap quotation with information such as the source cryptocurrency, source cryptocurrency amount, destination cryptocurrency, fiat amount and fees.","title":"Overview"},{"location":"Features/SwapService/FetchSwap/#params","text":"The FetchSwapParams used to initialized and perform fetchSwap API. swap id: the existing swap identifier used to retrieve the specific swap quotation","title":"Params"},{"location":"Features/SwapService/FetchSwap/#result","text":"Swap Result","title":"Result"},{"location":"Features/SwapService/FetchSwap/#code","text":"","title":"Code"},{"location":"Features/SwapService/FetchSwap/#ios","text":"let params = FetchSwapParams.make(swapId: ...) swapService .fetchSwap(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/SwapService/FetchSwap/#android","text":"val params = FetchSwapParams( swapId = \"...\" ) conio.swapService .fetchSwap(params) .asFlow() .collect { // ... }","title":"Android"},{"location":"Features/SwapService/Swap/","text":"Swap Overview swap API is used to execute and finalize the exchange between two specified cryptocurrencies based on a specified swap quotation and crypto signature request. It allows client to specify the swap identifier and the signature request to execute and finalize swap operation. Params The SwapParams used to initialized and perform swap API. swap id: the existing swap quotation identifier used to execute and finalize the swap operation crypto request: the crypto signature used to validate the swap operation wait until paid: prevent the service to complete until the swap is not in paid status (or in another end status, like finalized or error ) Result The SwapResult with the updated status . If the status is different from paid or finalized , the transaction can still end with an error (use the Fetch Swap service to keep checking the status). Code iOS let cryptoRequest = SwapParams.CryptoRequest .make( proofId: ..., expiration: ..., cryptoProof: ... ) let params = SwapParams .make( swapId: ..., cryptoRequest: cryptoRequest ) swapService .swap(with: params) .asPublisher() .sink { result in // .., } Android val cryptoRequest = SwapCryptoRequest( cryptoProof = ..., proofId = ..., expiration = ..., ) val params = SwapParams( swapId = \"...\", cryptoRequest = cryptoRequest ) conio.swapService .swap(params) .asFlow() .collect { // ... }","title":"Swap"},{"location":"Features/SwapService/Swap/#swap","text":"","title":"Swap"},{"location":"Features/SwapService/Swap/#overview","text":"swap API is used to execute and finalize the exchange between two specified cryptocurrencies based on a specified swap quotation and crypto signature request. It allows client to specify the swap identifier and the signature request to execute and finalize swap operation.","title":"Overview"},{"location":"Features/SwapService/Swap/#params","text":"The SwapParams used to initialized and perform swap API. swap id: the existing swap quotation identifier used to execute and finalize the swap operation crypto request: the crypto signature used to validate the swap operation wait until paid: prevent the service to complete until the swap is not in paid status (or in another end status, like finalized or error )","title":"Params"},{"location":"Features/SwapService/Swap/#result","text":"The SwapResult with the updated status . If the status is different from paid or finalized , the transaction can still end with an error (use the Fetch Swap service to keep checking the status).","title":"Result"},{"location":"Features/SwapService/Swap/#code","text":"","title":"Code"},{"location":"Features/SwapService/Swap/#ios","text":"let cryptoRequest = SwapParams.CryptoRequest .make( proofId: ..., expiration: ..., cryptoProof: ... ) let params = SwapParams .make( swapId: ..., cryptoRequest: cryptoRequest ) swapService .swap(with: params) .asPublisher() .sink { result in // .., }","title":"iOS"},{"location":"Features/SwapService/Swap/#android","text":"val cryptoRequest = SwapCryptoRequest( cryptoProof = ..., proofId = ..., expiration = ..., ) val params = SwapParams( swapId = \"...\", cryptoRequest = cryptoRequest ) conio.swapService .swap(params) .asFlow() .collect { // ... }","title":"Android"},{"location":"Features/SwapService/SwapResult/","text":"Swap Result Overview The SwapResult quotation with updated data used execute a swap operation. Properties swap id: the swap unique identifier source cryptocurrency: the swap source Cryptocurrency destination cryptocurrency: the swap destination Cryptocurrency status: the swap updated operation status fiat amount: the swap updated fiat amount source crypto amount: the swap updated source crypto amount destination crypto amount: the swap updated destination crypto amount source service fees: the updated Conio service fee applied to the swap quotation source mining fees: the update blockchain mining fees applied to the swap quotation source cryptocurrency exchange rate: the swap source cryptocurrency current exchange rate destination cryptocurrency exchange rate: the swap destination cryptocurrency current exchange rate","title":"Swap Result"},{"location":"Features/SwapService/SwapResult/#swap-result","text":"","title":"Swap Result"},{"location":"Features/SwapService/SwapResult/#overview","text":"The SwapResult quotation with updated data used execute a swap operation.","title":"Overview"},{"location":"Features/SwapService/SwapResult/#properties","text":"swap id: the swap unique identifier source cryptocurrency: the swap source Cryptocurrency destination cryptocurrency: the swap destination Cryptocurrency status: the swap updated operation status fiat amount: the swap updated fiat amount source crypto amount: the swap updated source crypto amount destination crypto amount: the swap updated destination crypto amount source service fees: the updated Conio service fee applied to the swap quotation source mining fees: the update blockchain mining fees applied to the swap quotation source cryptocurrency exchange rate: the swap source cryptocurrency current exchange rate destination cryptocurrency exchange rate: the swap destination cryptocurrency current exchange rate","title":"Properties"},{"location":"Features/SwapService/UpdateSwap/","text":"Update Swap Overview updateSwap API is used to update an existing swap quotation for exchange two specified cryptocurrencies. It allows client to specify the new source crypto amount it is willing to update the swap quotation given its identifier. Params The UpdateSwapParams used to initialized and perform updateSwap API. swap id: the existing swap identifier used to update the selected swap quotation source amount: the new swap source crypto amount used to update the selected swap quotation Result Swap Result Code iOS let params = UpdateSwapParams .make( swapId: ..., newSourceAmount: ... ) swapService .updateSwap(with: params) .asPublisher() .sink { result in // ... } Android // val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = UpdateSwapParams( swapId = \"...\", sourceAmount = amount ) conio.swapService .updateSwap(params) .asFlow() .collect { // ... }","title":"Update Swap"},{"location":"Features/SwapService/UpdateSwap/#update-swap","text":"","title":"Update Swap"},{"location":"Features/SwapService/UpdateSwap/#overview","text":"updateSwap API is used to update an existing swap quotation for exchange two specified cryptocurrencies. It allows client to specify the new source crypto amount it is willing to update the swap quotation given its identifier.","title":"Overview"},{"location":"Features/SwapService/UpdateSwap/#params","text":"The UpdateSwapParams used to initialized and perform updateSwap API. swap id: the existing swap identifier used to update the selected swap quotation source amount: the new swap source crypto amount used to update the selected swap quotation","title":"Params"},{"location":"Features/SwapService/UpdateSwap/#result","text":"Swap Result","title":"Result"},{"location":"Features/SwapService/UpdateSwap/#code","text":"","title":"Code"},{"location":"Features/SwapService/UpdateSwap/#ios","text":"let params = UpdateSwapParams .make( swapId: ..., newSourceAmount: ... ) swapService .updateSwap(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/SwapService/UpdateSwap/#android","text":"// val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = UpdateSwapParams( swapId = \"...\", sourceAmount = amount ) conio.swapService .updateSwap(params) .asFlow() .collect { // ... }","title":"Android"},{"location":"Features/TradingBuyService/BidResult/","text":"Bid Result Overview The BidResult purchase quotation with updated data used to execute a purchase operation. Properties bid id: the bid unique identifier status: the updated bid status purchased fiat amount: the bid updated purchased fiat amount purchased amount: the bid updated purchased crypto amount amount to pay: the bid updated amount to pay with fees service fees: the updated service fees applied to the bid","title":"Bid Result"},{"location":"Features/TradingBuyService/BidResult/#bid-result","text":"","title":"Bid Result"},{"location":"Features/TradingBuyService/BidResult/#overview","text":"The BidResult purchase quotation with updated data used to execute a purchase operation.","title":"Overview"},{"location":"Features/TradingBuyService/BidResult/#properties","text":"bid id: the bid unique identifier status: the updated bid status purchased fiat amount: the bid updated purchased fiat amount purchased amount: the bid updated purchased crypto amount amount to pay: the bid updated amount to pay with fees service fees: the updated service fees applied to the bid","title":"Properties"},{"location":"Features/TradingBuyService/Buy/","text":"Buy Overview buy API is used to execute the cryptocurrency purchase based on a specified bid quotation and crypto signature request. It allows client to specify the bid identifier and the signature request to execute and finalize purchase operation. Params The BuyParams used to initialized and perform buy API. bid id: the existing bid identifier used to execute and finalize the purchase operation crypto request: the crypto signature used to validate the purchase operation Result Success or error. Code iOS let cryptoRequest = BuyParams.CryptoRequest .make( proofId: ..., expiration: ..., cryptoProof: ... ) let params = BuyParams .make( bidId: ..., cryptoRequest: cryptoRequest ) tradingBuyService .buy(with: params) .asPublisher() .sink { result in // .., } Android val cryptoRequest = BidCryptoRequest( cryptoProof = ..., proofId = ..., expiration = ..., ) val params = BuyParams( bidId = \"...\", cryptoRequest = cryptoRequest ) conio.buyService .buy(params) .asFlow() .collect { result -> // ... }","title":"Buy"},{"location":"Features/TradingBuyService/Buy/#buy","text":"","title":"Buy"},{"location":"Features/TradingBuyService/Buy/#overview","text":"buy API is used to execute the cryptocurrency purchase based on a specified bid quotation and crypto signature request. It allows client to specify the bid identifier and the signature request to execute and finalize purchase operation.","title":"Overview"},{"location":"Features/TradingBuyService/Buy/#params","text":"The BuyParams used to initialized and perform buy API. bid id: the existing bid identifier used to execute and finalize the purchase operation crypto request: the crypto signature used to validate the purchase operation","title":"Params"},{"location":"Features/TradingBuyService/Buy/#result","text":"Success or error.","title":"Result"},{"location":"Features/TradingBuyService/Buy/#code","text":"","title":"Code"},{"location":"Features/TradingBuyService/Buy/#ios","text":"let cryptoRequest = BuyParams.CryptoRequest .make( proofId: ..., expiration: ..., cryptoProof: ... ) let params = BuyParams .make( bidId: ..., cryptoRequest: cryptoRequest ) tradingBuyService .buy(with: params) .asPublisher() .sink { result in // .., }","title":"iOS"},{"location":"Features/TradingBuyService/Buy/#android","text":"val cryptoRequest = BidCryptoRequest( cryptoProof = ..., proofId = ..., expiration = ..., ) val params = BuyParams( bidId = \"...\", cryptoRequest = cryptoRequest ) conio.buyService .buy(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingBuyService/CreateBid/","text":"Create Bid Overview createBid API is used to create a bid for purchasing a cryptocurrency. It allows client to specify either the amount as crypto amount or fiat amount it is willing to create the bid. Params The CreateBidParams used to initialized and perform createBid API. crypto id: the cryptocurrency identifier used to create the bid quotation fiat currency: the bid fiat currency amount: the bid amount intended either as fiat amount or cryptocurrency amount Result BidResult Code iOS let params = CreateBidParams.makeBTC(amount: ...) tradingBuyService .createBid(with: params) .asPublisher() .sink { result in // ... } Android // val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = CreateBidParams( cryptoId = \"...\", amount = amount ) conio.buyService .createBid(params) .asFlow() .collect { result -> // ... }","title":"Create Bid"},{"location":"Features/TradingBuyService/CreateBid/#create-bid","text":"","title":"Create Bid"},{"location":"Features/TradingBuyService/CreateBid/#overview","text":"createBid API is used to create a bid for purchasing a cryptocurrency. It allows client to specify either the amount as crypto amount or fiat amount it is willing to create the bid.","title":"Overview"},{"location":"Features/TradingBuyService/CreateBid/#params","text":"The CreateBidParams used to initialized and perform createBid API. crypto id: the cryptocurrency identifier used to create the bid quotation fiat currency: the bid fiat currency amount: the bid amount intended either as fiat amount or cryptocurrency amount","title":"Params"},{"location":"Features/TradingBuyService/CreateBid/#result","text":"BidResult","title":"Result"},{"location":"Features/TradingBuyService/CreateBid/#code","text":"","title":"Code"},{"location":"Features/TradingBuyService/CreateBid/#ios","text":"let params = CreateBidParams.makeBTC(amount: ...) tradingBuyService .createBid(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TradingBuyService/CreateBid/#android","text":"// val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = CreateBidParams( cryptoId = \"...\", amount = amount ) conio.buyService .createBid(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingBuyService/FetchBid/","text":"Fetch Bid Overview fetchBid API is used to retrieve information about a specific cryptocurrency bid. It allows client to specify the bid identifier to fetch the specific purchase quotation with information such as crypto amount and fiat amount. Params The FetchBidParams used to initialize and perform fetchBid API. bid id: the existing bid identifier used to retrieve the specific bid quotation Result BidResult Code iOS let params = FatchBidParams.make(bidId: ...) tradingBuyService .fetchBid(with: params) .asPublisher() .sink { result in // ... } Android val params = FetchBidParams( bidId = \"...\" ) conio.buyService .fetchBid(params) .asFlow() .collect { result -> // ... }","title":"Fetch Bid"},{"location":"Features/TradingBuyService/FetchBid/#fetch-bid","text":"","title":"Fetch Bid"},{"location":"Features/TradingBuyService/FetchBid/#overview","text":"fetchBid API is used to retrieve information about a specific cryptocurrency bid. It allows client to specify the bid identifier to fetch the specific purchase quotation with information such as crypto amount and fiat amount.","title":"Overview"},{"location":"Features/TradingBuyService/FetchBid/#params","text":"The FetchBidParams used to initialize and perform fetchBid API. bid id: the existing bid identifier used to retrieve the specific bid quotation","title":"Params"},{"location":"Features/TradingBuyService/FetchBid/#result","text":"BidResult","title":"Result"},{"location":"Features/TradingBuyService/FetchBid/#code","text":"","title":"Code"},{"location":"Features/TradingBuyService/FetchBid/#ios","text":"let params = FatchBidParams.make(bidId: ...) tradingBuyService .fetchBid(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TradingBuyService/FetchBid/#android","text":"val params = FetchBidParams( bidId = \"...\" ) conio.buyService .fetchBid(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingBuyService/UpdateBid/","text":"Update Bid Overview updateBid API is used to update an existing bid for purchasing a cryptocurrency. It allows client to specify either the amount as crypto amount or fiat amount it is willing to update the bid, given its identifier. Params The UpdateBidParams used to initialized and perform updateBid API. bid id: the existing bid identifier used to update the selected bid new amount: the new bid amount intended either as fiat amount or cryptocurrency amount Result BidResult Code iOS let params = UpdateBidParams .make( bidId: ..., newAmount: ... ) tradingBuyService .updateBid(with: params) .asPublisher() .sink { result in // ... } Android // val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = UpdateBidParams( bidId = \"...\", newAmount = amount ) conio.buyService .updateBid(params) .asFlow() .collect { result -> // ... }","title":"Update Bid"},{"location":"Features/TradingBuyService/UpdateBid/#update-bid","text":"","title":"Update Bid"},{"location":"Features/TradingBuyService/UpdateBid/#overview","text":"updateBid API is used to update an existing bid for purchasing a cryptocurrency. It allows client to specify either the amount as crypto amount or fiat amount it is willing to update the bid, given its identifier.","title":"Overview"},{"location":"Features/TradingBuyService/UpdateBid/#params","text":"The UpdateBidParams used to initialized and perform updateBid API. bid id: the existing bid identifier used to update the selected bid new amount: the new bid amount intended either as fiat amount or cryptocurrency amount","title":"Params"},{"location":"Features/TradingBuyService/UpdateBid/#result","text":"BidResult","title":"Result"},{"location":"Features/TradingBuyService/UpdateBid/#code","text":"","title":"Code"},{"location":"Features/TradingBuyService/UpdateBid/#ios","text":"let params = UpdateBidParams .make( bidId: ..., newAmount: ... ) tradingBuyService .updateBid(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TradingBuyService/UpdateBid/#android","text":"// val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = UpdateBidParams( bidId = \"...\", newAmount = amount ) conio.buyService .updateBid(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingInfoService/FetchTradingFees/","text":"Fetch Trading Fees Overview fetchTradingFees API is used to retrieve the trading fees linked to Conio user. It allows client to fetch the trading fees involved in the Conio user trading operations. Result The TradingFeesResult trading fees involved in the Conio user trading operations. buy service fees: the buy trading fees list sell service fees: the sell trading fees list swap service fees: the swap trading fees list transfer service fees: the transfer trading fees list Code iOS tradingInfoService .fetchTradingFees() .asPublisher() .sink { result in ... } Android conio.tradingInfoService .fetchTradingFees() .asFlow() .collect { result -> // ... }","title":"Fetch Trading Fees"},{"location":"Features/TradingInfoService/FetchTradingFees/#fetch-trading-fees","text":"","title":"Fetch Trading Fees"},{"location":"Features/TradingInfoService/FetchTradingFees/#overview","text":"fetchTradingFees API is used to retrieve the trading fees linked to Conio user. It allows client to fetch the trading fees involved in the Conio user trading operations.","title":"Overview"},{"location":"Features/TradingInfoService/FetchTradingFees/#result","text":"The TradingFeesResult trading fees involved in the Conio user trading operations. buy service fees: the buy trading fees list sell service fees: the sell trading fees list swap service fees: the swap trading fees list transfer service fees: the transfer trading fees list","title":"Result"},{"location":"Features/TradingInfoService/FetchTradingFees/#code","text":"","title":"Code"},{"location":"Features/TradingInfoService/FetchTradingFees/#ios","text":"tradingInfoService .fetchTradingFees() .asPublisher() .sink { result in ... }","title":"iOS"},{"location":"Features/TradingInfoService/FetchTradingFees/#android","text":"conio.tradingInfoService .fetchTradingFees() .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingInfoService/FetchTradingLimits/","text":"Fetch Trading Limits Overview fetchTradingLimits API is used to retrieve the trading limits linked to Conio user. It allows client to fetch the trading limits involved in the Conio user trading operations. Parameters The FetchTradingLimitsParams used to initialized and perform fetchTradingLimits API. fiat currency: The fiat currency used to fetch trading limits Result The TradingLimitsResult trading limits info involved in the Conio user trading operations. sell limits: the crypto trading sell limits buy limits: the crypto trading buy limits Code iOS let params = FetchTradingLimitsParams.make() tradingInfoService .fetchTradingLimits(with: params) .asPublisher() .sink { result in ... } Android conio.tradingInfoService .fetchTradingLimits() .asFlow() .collect { result -> // ... }","title":"Fetch Trading Limits"},{"location":"Features/TradingInfoService/FetchTradingLimits/#fetch-trading-limits","text":"","title":"Fetch Trading Limits"},{"location":"Features/TradingInfoService/FetchTradingLimits/#overview","text":"fetchTradingLimits API is used to retrieve the trading limits linked to Conio user. It allows client to fetch the trading limits involved in the Conio user trading operations.","title":"Overview"},{"location":"Features/TradingInfoService/FetchTradingLimits/#parameters","text":"The FetchTradingLimitsParams used to initialized and perform fetchTradingLimits API. fiat currency: The fiat currency used to fetch trading limits","title":"Parameters"},{"location":"Features/TradingInfoService/FetchTradingLimits/#result","text":"The TradingLimitsResult trading limits info involved in the Conio user trading operations. sell limits: the crypto trading sell limits buy limits: the crypto trading buy limits","title":"Result"},{"location":"Features/TradingInfoService/FetchTradingLimits/#code","text":"","title":"Code"},{"location":"Features/TradingInfoService/FetchTradingLimits/#ios","text":"let params = FetchTradingLimitsParams.make() tradingInfoService .fetchTradingLimits(with: params) .asPublisher() .sink { result in ... }","title":"iOS"},{"location":"Features/TradingInfoService/FetchTradingLimits/#android","text":"conio.tradingInfoService .fetchTradingLimits() .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingInfoService/FetchTradingReport/","text":"Fetch Trading Report Overview fetchTradingReport API is used to retrieve the trading financial report linked to Conio user. It allows client to either specify the exact year or the last year trading effective time to fetch the trading report involved in the Conio user trading operations. Parameters The FetchTradingReportParams used to initialized and perform fetchTradingReport API. period: the trading report period of time either as exact year or last year Result The TradingReportResult trading report info involved in the Conio user trading operations. pdf: the trading report in PDF format Code iOS let params = FetchTradingReportParams.make(period: .lastYear) tradingInfoService .fetchTradingReport(with: params) .asPublisher() .sink { result in ... } Android // val reportPeriod = FetchTradingReportParams.ReportPeriod.LastYear val reportPeriod = FetchTradingReportParams.ReportPeriod(\"2023\") val params = FetchTradingReportParams( period = reportPeriod ) conio.tradingInfoService .fetchTradingReport(params) .asFlow() .collect { result -> // ... }","title":"Fetch Trading Report"},{"location":"Features/TradingInfoService/FetchTradingReport/#fetch-trading-report","text":"","title":"Fetch Trading Report"},{"location":"Features/TradingInfoService/FetchTradingReport/#overview","text":"fetchTradingReport API is used to retrieve the trading financial report linked to Conio user. It allows client to either specify the exact year or the last year trading effective time to fetch the trading report involved in the Conio user trading operations.","title":"Overview"},{"location":"Features/TradingInfoService/FetchTradingReport/#parameters","text":"The FetchTradingReportParams used to initialized and perform fetchTradingReport API. period: the trading report period of time either as exact year or last year","title":"Parameters"},{"location":"Features/TradingInfoService/FetchTradingReport/#result","text":"The TradingReportResult trading report info involved in the Conio user trading operations. pdf: the trading report in PDF format","title":"Result"},{"location":"Features/TradingInfoService/FetchTradingReport/#code","text":"","title":"Code"},{"location":"Features/TradingInfoService/FetchTradingReport/#ios","text":"let params = FetchTradingReportParams.make(period: .lastYear) tradingInfoService .fetchTradingReport(with: params) .asPublisher() .sink { result in ... }","title":"iOS"},{"location":"Features/TradingInfoService/FetchTradingReport/#android","text":"// val reportPeriod = FetchTradingReportParams.ReportPeriod.LastYear val reportPeriod = FetchTradingReportParams.ReportPeriod(\"2023\") val params = FetchTradingReportParams( period = reportPeriod ) conio.tradingInfoService .fetchTradingReport(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingInfoService/FetchTradingSummary/","text":"Fetch Trading Summary Overview fetchTradingSummary API is used to retrieve the trading stats and info linked to Conio user. It allows client to fetch the trading info involved in the Conio user trading operations. Parameters The FetchTradingSummaryParams used to initialized and perform fetchTradingSummary API. fiat currency: The fiat currency used to fetch trading limits Result The TradingSummaryResult trading stats and info involved in the Conio user trading operations. buy info: the trading buy stats sell info: the trading sell stats Code iOS let params = FetchTradingSummaryParams.make() tradingInfoService .fetchTradingSummary(with: params) .asPublisher() .sink { result in ... } Android conio.tradingInfoService .fetchTradingSummary() .asFlow() .collect { result -> // ... }","title":"Fetch Trading Summary"},{"location":"Features/TradingInfoService/FetchTradingSummary/#fetch-trading-summary","text":"","title":"Fetch Trading Summary"},{"location":"Features/TradingInfoService/FetchTradingSummary/#overview","text":"fetchTradingSummary API is used to retrieve the trading stats and info linked to Conio user. It allows client to fetch the trading info involved in the Conio user trading operations.","title":"Overview"},{"location":"Features/TradingInfoService/FetchTradingSummary/#parameters","text":"The FetchTradingSummaryParams used to initialized and perform fetchTradingSummary API. fiat currency: The fiat currency used to fetch trading limits","title":"Parameters"},{"location":"Features/TradingInfoService/FetchTradingSummary/#result","text":"The TradingSummaryResult trading stats and info involved in the Conio user trading operations. buy info: the trading buy stats sell info: the trading sell stats","title":"Result"},{"location":"Features/TradingInfoService/FetchTradingSummary/#code","text":"","title":"Code"},{"location":"Features/TradingInfoService/FetchTradingSummary/#ios","text":"let params = FetchTradingSummaryParams.make() tradingInfoService .fetchTradingSummary(with: params) .asPublisher() .sink { result in ... }","title":"iOS"},{"location":"Features/TradingInfoService/FetchTradingSummary/#android","text":"conio.tradingInfoService .fetchTradingSummary() .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingPriceService/FetchAllPrices/","text":"Fetch All Prices Overview fetchAllUnitPrices API is used to retrieve information about all tradable cryptocurrencies current unit prices values. Params The FetchAllUnitPricesParams used to initialized and perform fetchAllUnitPrices API. fiat currency: the fiat currency used to fetch the pricing information Result The UnitPricesResult data with all tradable cryptocurrencies current unit prices values. current prices: the current unit prices data and values CurrentPrice list Code iOS let params = FetchAllUnitPricesParams.makeEuro() tradingPriceService .fetchAllUnitPrices(with: params) .asPublisher() .sink { result in // ... } Android conio.tradingPriceService .fetchAllUnitPrices() .asFlow() .collect { result -> // ... }","title":"Fetch All Prices"},{"location":"Features/TradingPriceService/FetchAllPrices/#fetch-all-prices","text":"","title":"Fetch All Prices"},{"location":"Features/TradingPriceService/FetchAllPrices/#overview","text":"fetchAllUnitPrices API is used to retrieve information about all tradable cryptocurrencies current unit prices values.","title":"Overview"},{"location":"Features/TradingPriceService/FetchAllPrices/#params","text":"The FetchAllUnitPricesParams used to initialized and perform fetchAllUnitPrices API. fiat currency: the fiat currency used to fetch the pricing information","title":"Params"},{"location":"Features/TradingPriceService/FetchAllPrices/#result","text":"The UnitPricesResult data with all tradable cryptocurrencies current unit prices values. current prices: the current unit prices data and values CurrentPrice list","title":"Result"},{"location":"Features/TradingPriceService/FetchAllPrices/#code","text":"","title":"Code"},{"location":"Features/TradingPriceService/FetchAllPrices/#ios","text":"let params = FetchAllUnitPricesParams.makeEuro() tradingPriceService .fetchAllUnitPrices(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TradingPriceService/FetchAllPrices/#android","text":"conio.tradingPriceService .fetchAllUnitPrices() .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/","text":"Fetch Historical Prices Overview fetchHistoricalPrices API is used to retrieve information about a specific cryptocurrency past time interval price value. It allows client to specify the cryptocurrency, the time frame and the time interval to fetch the cryptocurrency historical price points, analytics and time interval. Params The FetchHistoricalPricesParams used to initialized and perform fetchHistoricalPrices API. crypto id: the cryptocurrency identifier used to retrieve the specific cryptocurrency historical price data time frame: the available time frames used to retrieve the specific cryptocurrency historical price data fiat currency: the fiat currency used to retrieve historical price data Result The HistoricalPricesResult data with cryptocurrency historical prices values. cryptocurrency: the Wallet Cryptocurrency price points: the cryptocurrency historical price points price analytics: the cryptocurrency historical analytics Code iOS let params = FetchHistoricalPricesParams .make( cryptoId: ..., timeFrame: .max, ) tradingPriceService .fetchHistoricalPrices(with: params) .asPublisher() .sink { result in // ... } Android val oneDayInMillis = 24L * 60 * 60 * 1000 val timeFrame = TimeFrame( fromTimeInMillis = TimeFrame.now() - oneDayInMillis, toTimeInMillis = TimeFrame.now(), ) val params = FetchHistoricalPricesParams( cryptoId = ..., timeFrame = timeFrame, priceInterval = PriceSamplingInterval.MINUTES_15, ) conio.tradingPriceService .fetchHistoricalPrices(params) .asFlow() .collect { result -> // ... }","title":"Fetch Historical Prices"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#fetch-historical-prices","text":"","title":"Fetch Historical Prices"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#overview","text":"fetchHistoricalPrices API is used to retrieve information about a specific cryptocurrency past time interval price value. It allows client to specify the cryptocurrency, the time frame and the time interval to fetch the cryptocurrency historical price points, analytics and time interval.","title":"Overview"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#params","text":"The FetchHistoricalPricesParams used to initialized and perform fetchHistoricalPrices API. crypto id: the cryptocurrency identifier used to retrieve the specific cryptocurrency historical price data time frame: the available time frames used to retrieve the specific cryptocurrency historical price data fiat currency: the fiat currency used to retrieve historical price data","title":"Params"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#result","text":"The HistoricalPricesResult data with cryptocurrency historical prices values. cryptocurrency: the Wallet Cryptocurrency price points: the cryptocurrency historical price points price analytics: the cryptocurrency historical analytics","title":"Result"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#code","text":"","title":"Code"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#ios","text":"let params = FetchHistoricalPricesParams .make( cryptoId: ..., timeFrame: .max, ) tradingPriceService .fetchHistoricalPrices(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TradingPriceService/FetchHistoricalPrice/#android","text":"val oneDayInMillis = 24L * 60 * 60 * 1000 val timeFrame = TimeFrame( fromTimeInMillis = TimeFrame.now() - oneDayInMillis, toTimeInMillis = TimeFrame.now(), ) val params = FetchHistoricalPricesParams( cryptoId = ..., timeFrame = timeFrame, priceInterval = PriceSamplingInterval.MINUTES_15, ) conio.tradingPriceService .fetchHistoricalPrices(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingPriceService/FetchPrice/","text":"Fetch Price Overview fetchPrice API is used to retrieve information about a specific cryptocurrency current price value. It allows client to specify either the cryptocurrency current unit price or a specific cryptocurrency amount to fetch the current buy, sell and raw prices values. Params The FetchPriceParams used to initialized and perform fetchPrice API. crypto id: the cryptocurrency unique identifier used to fetch the current price type: the price type intended either as cryptocurrency current unit price or current price for a specific cryptocurrency amount Result The PriceResult data with cryptocurrency current price values. current price: the current price data and values CurrentPrice Code iOS let params = FetchPriceParams.makeUnitCurrenPrice(cryptoId: \"cADA\") tradingPriceService .fetchPrice(params: params) .asPublisher() .sink { result in // ... } Android val params = FetchPriceParams( cryptoId = ..., amount = CryptoAmount(...), // default null ) conio.tradingPriceService .fetchPrice(params) .asFlow() .collect { result -> // ... }","title":"Fetch Price"},{"location":"Features/TradingPriceService/FetchPrice/#fetch-price","text":"","title":"Fetch Price"},{"location":"Features/TradingPriceService/FetchPrice/#overview","text":"fetchPrice API is used to retrieve information about a specific cryptocurrency current price value. It allows client to specify either the cryptocurrency current unit price or a specific cryptocurrency amount to fetch the current buy, sell and raw prices values.","title":"Overview"},{"location":"Features/TradingPriceService/FetchPrice/#params","text":"The FetchPriceParams used to initialized and perform fetchPrice API. crypto id: the cryptocurrency unique identifier used to fetch the current price type: the price type intended either as cryptocurrency current unit price or current price for a specific cryptocurrency amount","title":"Params"},{"location":"Features/TradingPriceService/FetchPrice/#result","text":"The PriceResult data with cryptocurrency current price values. current price: the current price data and values CurrentPrice","title":"Result"},{"location":"Features/TradingPriceService/FetchPrice/#code","text":"","title":"Code"},{"location":"Features/TradingPriceService/FetchPrice/#ios","text":"let params = FetchPriceParams.makeUnitCurrenPrice(cryptoId: \"cADA\") tradingPriceService .fetchPrice(params: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TradingPriceService/FetchPrice/#android","text":"val params = FetchPriceParams( cryptoId = ..., amount = CryptoAmount(...), // default null ) conio.tradingPriceService .fetchPrice(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/","text":"Fetch Tradable Crypto Metadata Overview fetchTradableCryptoMetadata API is used to retrieve metadata about all tradable cryptocurrencies. It allows client to fetch the tradable cryptocurrencies metadata with information such as cryptocurrency short name, image, symbol, slug, supply, market data and more. Params The FetchTradableCryptoMetadataParams used to initialize and perform fetchTradableCryptoMetadata API. language code: The ISO language code and ISO country code (language_COUNTRY) used to retrieve tradable cryptocurrencies descriptions Result The TradableCryptoMetadataResult data with all tradable cryptocurrencies metadata. metadata: the tradable cryptocurrencies CryptoCurrencyMetadata list Code iOS let params = FetchTradableCryptoMetadataParams.makeItalian() tradingPriceService .fetchTradableCryptoMetadata() .asPublisher() .sink { result in // ... } Android // val language = Language.Italian val language = Language.English val params = FetchCryptoCurrenciesMetadataParams( language = language ) conio.tradingPriceService .fetchCryptoCurrenciesMetadata(params) .asFlow() .collect { result -> // ... }","title":"Fetch Tradable Crypto Metadata"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#fetch-tradable-crypto-metadata","text":"","title":"Fetch Tradable Crypto Metadata"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#overview","text":"fetchTradableCryptoMetadata API is used to retrieve metadata about all tradable cryptocurrencies. It allows client to fetch the tradable cryptocurrencies metadata with information such as cryptocurrency short name, image, symbol, slug, supply, market data and more.","title":"Overview"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#params","text":"The FetchTradableCryptoMetadataParams used to initialize and perform fetchTradableCryptoMetadata API. language code: The ISO language code and ISO country code (language_COUNTRY) used to retrieve tradable cryptocurrencies descriptions","title":"Params"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#result","text":"The TradableCryptoMetadataResult data with all tradable cryptocurrencies metadata. metadata: the tradable cryptocurrencies CryptoCurrencyMetadata list","title":"Result"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#code","text":"","title":"Code"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#ios","text":"let params = FetchTradableCryptoMetadataParams.makeItalian() tradingPriceService .fetchTradableCryptoMetadata() .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TradingPriceService/FetchTradableCryptocurrenciesMetadata/#android","text":"// val language = Language.Italian val language = Language.English val params = FetchCryptoCurrenciesMetadataParams( language = language ) conio.tradingPriceService .fetchCryptoCurrenciesMetadata(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingSellService/AskResult/","text":"Ask Result Overview The AskResult selling quotation with updated data used execute a sell operation. Properties ask id: the ask unique identifier status: the updated ask status sold fiat amount: the ask updated sold net fiat amount amount to withdraw: the updated ask amount to withdraw from balance with fees service fee: the updated Conio service fees applied to the ask mining fee: the ask updated mining fee","title":"Ask Result"},{"location":"Features/TradingSellService/AskResult/#ask-result","text":"","title":"Ask Result"},{"location":"Features/TradingSellService/AskResult/#overview","text":"The AskResult selling quotation with updated data used execute a sell operation.","title":"Overview"},{"location":"Features/TradingSellService/AskResult/#properties","text":"ask id: the ask unique identifier status: the updated ask status sold fiat amount: the ask updated sold net fiat amount amount to withdraw: the updated ask amount to withdraw from balance with fees service fee: the updated Conio service fees applied to the ask mining fee: the ask updated mining fee","title":"Properties"},{"location":"Features/TradingSellService/CreateAsk/","text":"Create Ask Overview createAsk API is used to create an ask for selling a cryptocurrency. It allows client to specify either the amount as crypto amount, fiat amount or max sellable amount it is willing to create the ask. Params The CreateAskParams used to initialized and perform createAsk API. crypto id: the cryptocurrency identifier used to create the ask quotation fiat currency: the ask fiat currency amount: the ask amount intended either as fiat amount, cryptocurrency amount or max sellable amount Result AskResult Code iOS let params = CreateAskParams.makeBTC(amount: ...) tradingSellService .createAsk(with: params) .asPublisher() .sink { result in // ... } Android // val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = CreateAskParams( cryptoId = \"...\", amount = amount, ) conio.sellService .createAsk(params) .asFlow() .collect { result -> // ... }","title":"Create Ask"},{"location":"Features/TradingSellService/CreateAsk/#create-ask","text":"","title":"Create Ask"},{"location":"Features/TradingSellService/CreateAsk/#overview","text":"createAsk API is used to create an ask for selling a cryptocurrency. It allows client to specify either the amount as crypto amount, fiat amount or max sellable amount it is willing to create the ask.","title":"Overview"},{"location":"Features/TradingSellService/CreateAsk/#params","text":"","title":"Params"},{"location":"Features/TradingSellService/CreateAsk/#_1","text":"The CreateAskParams used to initialized and perform createAsk API. crypto id: the cryptocurrency identifier used to create the ask quotation fiat currency: the ask fiat currency amount: the ask amount intended either as fiat amount, cryptocurrency amount or max sellable amount","title":""},{"location":"Features/TradingSellService/CreateAsk/#result","text":"AskResult","title":"Result"},{"location":"Features/TradingSellService/CreateAsk/#code","text":"","title":"Code"},{"location":"Features/TradingSellService/CreateAsk/#ios","text":"let params = CreateAskParams.makeBTC(amount: ...) tradingSellService .createAsk(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TradingSellService/CreateAsk/#android","text":"// val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = CreateAskParams( cryptoId = \"...\", amount = amount, ) conio.sellService .createAsk(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingSellService/FetchAsk/","text":"Fetch Ask Overview fetchAsk API is used to retrieve information about a specific ask. It allows client to specify the ask identifier to fetch the specific selling quotation with information such as crypto amount, fiat amount and fees. Params The FetchAskParams used to initialized and perform fetchAsk API. ask id: the existing ask identifier used to retrieve the specific ask Result AskResult Code iOS let params = FatchAskParams.make(askId: ...) tradingSellService .fetchAsk(with: params) .asPublisher() .sink { result in // ... } Android val params = FetchAskParams( askId = \"...\", ) conio.sellService .fetchAsk(params) .asFlow() .collect { result -> // ... }","title":"Fetch Ask"},{"location":"Features/TradingSellService/FetchAsk/#fetch-ask","text":"","title":"Fetch Ask"},{"location":"Features/TradingSellService/FetchAsk/#overview","text":"fetchAsk API is used to retrieve information about a specific ask. It allows client to specify the ask identifier to fetch the specific selling quotation with information such as crypto amount, fiat amount and fees.","title":"Overview"},{"location":"Features/TradingSellService/FetchAsk/#params","text":"The FetchAskParams used to initialized and perform fetchAsk API. ask id: the existing ask identifier used to retrieve the specific ask","title":"Params"},{"location":"Features/TradingSellService/FetchAsk/#result","text":"AskResult","title":"Result"},{"location":"Features/TradingSellService/FetchAsk/#code","text":"","title":"Code"},{"location":"Features/TradingSellService/FetchAsk/#ios","text":"let params = FatchAskParams.make(askId: ...) tradingSellService .fetchAsk(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TradingSellService/FetchAsk/#android","text":"val params = FetchAskParams( askId = \"...\", ) conio.sellService .fetchAsk(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingSellService/Sell/","text":"Sell Overview sell API is used to execute the cryptocurrency selling based on a specified ask quotation and crypto signature request. It allows client to specify the ask identifier and the signature request to execute and finalize selling operation. Params The SellParams used to initialized and perform sell API. ask id: the existing ask quotation identifier used to execute and finalize the sell operation crypto request: the crypto signature used to validate the sell operation wait until paid: prevent the service to complete until the ask is not in paid status (or in another end status, like charged or error ) Result The AskResult with the updated status . If the status is different from paid or charged , the transaction can still end with an error (use the Fetch Ask service to keep checking the status). Code iOS let cryptoRequest = SellParams.CryptoRequest .make( proofId: ..., expiration: ..., cryptoProof: ... ) let params = SellParams .make( askId: ..., cryptoRequest: cryptoRequest ) tradingSellService .sell(with: params) .asPublisher() .sink { result in // ... } Android val cryptoRequest = SellCryptoRequest( cryptoProof = ..., proofId = ..., expiration = ..., ) val params = SellParams( askId = \"...\", cryptoRequest = cryptoRequest, ) conio.sellService .sell(params) .asFlow() .collect { result -> // ... }","title":"Sell"},{"location":"Features/TradingSellService/Sell/#sell","text":"","title":"Sell"},{"location":"Features/TradingSellService/Sell/#overview","text":"sell API is used to execute the cryptocurrency selling based on a specified ask quotation and crypto signature request. It allows client to specify the ask identifier and the signature request to execute and finalize selling operation.","title":"Overview"},{"location":"Features/TradingSellService/Sell/#params","text":"The SellParams used to initialized and perform sell API. ask id: the existing ask quotation identifier used to execute and finalize the sell operation crypto request: the crypto signature used to validate the sell operation wait until paid: prevent the service to complete until the ask is not in paid status (or in another end status, like charged or error )","title":"Params"},{"location":"Features/TradingSellService/Sell/#result","text":"The AskResult with the updated status . If the status is different from paid or charged , the transaction can still end with an error (use the Fetch Ask service to keep checking the status).","title":"Result"},{"location":"Features/TradingSellService/Sell/#code","text":"","title":"Code"},{"location":"Features/TradingSellService/Sell/#ios","text":"let cryptoRequest = SellParams.CryptoRequest .make( proofId: ..., expiration: ..., cryptoProof: ... ) let params = SellParams .make( askId: ..., cryptoRequest: cryptoRequest ) tradingSellService .sell(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TradingSellService/Sell/#android","text":"val cryptoRequest = SellCryptoRequest( cryptoProof = ..., proofId = ..., expiration = ..., ) val params = SellParams( askId = \"...\", cryptoRequest = cryptoRequest, ) conio.sellService .sell(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TradingSellService/UpdateAsk/","text":"Update Ask Overview updateAsk API is used to update an existing ask for selling a cryptocurrency. It allows client to specify either the amount as crypto amount, fiat amount or max sellable amount it is willing to update the ask given its identifier. Params The UpdateAskParams used to initialized and perform updateAsk API. ask id: the existing ask identifier used to update the selected ask amount: the new ask amount intended either as fiat amount, cryptocurrency amount or max sellable amount Result AskResult Code iOS let params = UpdateAskParams .make( askId: ..., newAmount: ... ) tradingSellService .updateAsk(with: params) .asPublisher() .sink { result in // ... } Android // val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = UpdateAskParams( askId = \"...\", amount = amount, ) conio.sellService .updateAsk(params) .asFlow() .collect { result -> // ... }","title":"Update Ask"},{"location":"Features/TradingSellService/UpdateAsk/#update-ask","text":"","title":"Update Ask"},{"location":"Features/TradingSellService/UpdateAsk/#overview","text":"updateAsk API is used to update an existing ask for selling a cryptocurrency. It allows client to specify either the amount as crypto amount, fiat amount or max sellable amount it is willing to update the ask given its identifier.","title":"Overview"},{"location":"Features/TradingSellService/UpdateAsk/#params","text":"The UpdateAskParams used to initialized and perform updateAsk API. ask id: the existing ask identifier used to update the selected ask amount: the new ask amount intended either as fiat amount, cryptocurrency amount or max sellable amount","title":"Params"},{"location":"Features/TradingSellService/UpdateAsk/#result","text":"AskResult","title":"Result"},{"location":"Features/TradingSellService/UpdateAsk/#code","text":"","title":"Code"},{"location":"Features/TradingSellService/UpdateAsk/#ios","text":"let params = UpdateAskParams .make( askId: ..., newAmount: ... ) tradingSellService .updateAsk(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TradingSellService/UpdateAsk/#android","text":"// val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = UpdateAskParams( askId = \"...\", amount = amount, ) conio.sellService .updateAsk(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/TransferService/CreateTransfer/","text":"Create Transfer Overview createTransfer API is used to create cryptocurrency amount transfer quotation details from On-Chain Wallet to the same cryptocurrency Off-Chain Wallet or viceversa. It allows client to specify the source cryptocurrency either On-Chain or Off-Chain, the destination same cryptocurrency either Off-Chain or On-Chain and the source cryptocurrency amount to transfer. Params The CreateTransferParams used to initialized and perform createTransfer API. source crypto: the source cryptocurrency used to create the transfer quotation destination crypto: the destination cryptocurrency used to create the transfer quotation source amount: the source cryptocurrency amount used to create the transfer quotation Result TransferResult Code iOS let params = CreateTransferParams .make( sourceCrypto: .onChainBtc, destinationCrypto: .offChainBtc, sourceCryptoAmount: .max ) transferService .createTransfer(with: params) .asPublisher() .sink { result in // ... } Android // val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = CreateTransferParams( sourceCryptoId = \"...\", destinationCryptoId = \"...\", sourceAmount = amount ) conio.transferService .createTransfer(params) .asFlow() .collect { // ... }","title":"Create Transfer"},{"location":"Features/TransferService/CreateTransfer/#create-transfer","text":"","title":"Create Transfer"},{"location":"Features/TransferService/CreateTransfer/#overview","text":"createTransfer API is used to create cryptocurrency amount transfer quotation details from On-Chain Wallet to the same cryptocurrency Off-Chain Wallet or viceversa. It allows client to specify the source cryptocurrency either On-Chain or Off-Chain, the destination same cryptocurrency either Off-Chain or On-Chain and the source cryptocurrency amount to transfer.","title":"Overview"},{"location":"Features/TransferService/CreateTransfer/#params","text":"The CreateTransferParams used to initialized and perform createTransfer API. source crypto: the source cryptocurrency used to create the transfer quotation destination crypto: the destination cryptocurrency used to create the transfer quotation source amount: the source cryptocurrency amount used to create the transfer quotation","title":"Params"},{"location":"Features/TransferService/CreateTransfer/#result","text":"TransferResult","title":"Result"},{"location":"Features/TransferService/CreateTransfer/#code","text":"","title":"Code"},{"location":"Features/TransferService/CreateTransfer/#ios","text":"let params = CreateTransferParams .make( sourceCrypto: .onChainBtc, destinationCrypto: .offChainBtc, sourceCryptoAmount: .max ) transferService .createTransfer(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TransferService/CreateTransfer/#android","text":"// val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = CreateTransferParams( sourceCryptoId = \"...\", destinationCryptoId = \"...\", sourceAmount = amount ) conio.transferService .createTransfer(params) .asFlow() .collect { // ... }","title":"Android"},{"location":"Features/TransferService/FetchTransfer/","text":"Fetch Transfer Overview fetchTransfer API is used to retrieve information about a specific transfer. It allows client to specify the transfer identifier to fetch the specific transfer quotation with information such as the source cryptocurrency, source cryptocurrency amount, destination cryptocurrency, gross crypto amount and fees. Params The FetchTransferParams used to initialized and perform fetchTransfer API. transfer id: the existing transfer identifier used to retrieve the specific transfer quotation Result TransferResult Code iOS let params = FetchTransferParams.make(transferId: ...) transferService .fetchTransfer(with: params) .asPublisher() .sink { result in // ... } Android val params = FetchTransferParams( transferId = \"...\", ) conio.transferService .fetchTransfer(params) .asFlow() .collect { // ... }","title":"Fetch Transfer"},{"location":"Features/TransferService/FetchTransfer/#fetch-transfer","text":"","title":"Fetch Transfer"},{"location":"Features/TransferService/FetchTransfer/#overview","text":"fetchTransfer API is used to retrieve information about a specific transfer. It allows client to specify the transfer identifier to fetch the specific transfer quotation with information such as the source cryptocurrency, source cryptocurrency amount, destination cryptocurrency, gross crypto amount and fees.","title":"Overview"},{"location":"Features/TransferService/FetchTransfer/#params","text":"The FetchTransferParams used to initialized and perform fetchTransfer API. transfer id: the existing transfer identifier used to retrieve the specific transfer quotation","title":"Params"},{"location":"Features/TransferService/FetchTransfer/#result","text":"TransferResult","title":"Result"},{"location":"Features/TransferService/FetchTransfer/#code","text":"","title":"Code"},{"location":"Features/TransferService/FetchTransfer/#ios","text":"let params = FetchTransferParams.make(transferId: ...) transferService .fetchTransfer(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TransferService/FetchTransfer/#android","text":"val params = FetchTransferParams( transferId = \"...\", ) conio.transferService .fetchTransfer(params) .asFlow() .collect { // ... }","title":"Android"},{"location":"Features/TransferService/Transfer/","text":"Transfer Overview transfer API is used to execute and finalize the transfer operation of a cryptocurrency amount from On-Chain Wallet to the same cryptocurrency Off-Chain Wallet or viceversa. It allows client to specify the transfer identifier and the signature request to execute and finalize transfer operation. Params The TransferParams used to initialized and perform transfer API. transfer id: the existing transfer quotation identifier used to execute and finalize the transfer quotation crypto request: the crypto signature used to validate the transfer quotation wait until paid: prevent the service to complete until the transfer is not in paid status (or in another end status, like finalized or error ) Result The TransferResult with the updated status . If the status is different from paid or finalized , the transaction can still end with an error (use the Fetch Transfer service to keep checking the status). Code iOS let cryptoRequest = TransferParams.CryptoRequest .make( proofId: ..., expiration: ..., cryptoProof: ... ) let params = TransferParams .make( transferId: ..., cryptoRequest: cryptoRequest ) transferService .transfer(with: params) .asPublisher() .sink { result in // .., } Android val cryptoRequest = TransferCryptoRequest( cryptoProof = ..., proofId = \"...\", expiration = ..., ) val params = TransferParams( transferId = \"...\", cryptoRequest = cryptoRequest ) conio.transferService .transfer(params) .asFlow() .collect { // ... }","title":"Transfer"},{"location":"Features/TransferService/Transfer/#transfer","text":"","title":"Transfer"},{"location":"Features/TransferService/Transfer/#overview","text":"transfer API is used to execute and finalize the transfer operation of a cryptocurrency amount from On-Chain Wallet to the same cryptocurrency Off-Chain Wallet or viceversa. It allows client to specify the transfer identifier and the signature request to execute and finalize transfer operation.","title":"Overview"},{"location":"Features/TransferService/Transfer/#params","text":"The TransferParams used to initialized and perform transfer API. transfer id: the existing transfer quotation identifier used to execute and finalize the transfer quotation crypto request: the crypto signature used to validate the transfer quotation wait until paid: prevent the service to complete until the transfer is not in paid status (or in another end status, like finalized or error )","title":"Params"},{"location":"Features/TransferService/Transfer/#result","text":"The TransferResult with the updated status . If the status is different from paid or finalized , the transaction can still end with an error (use the Fetch Transfer service to keep checking the status).","title":"Result"},{"location":"Features/TransferService/Transfer/#code","text":"","title":"Code"},{"location":"Features/TransferService/Transfer/#ios","text":"let cryptoRequest = TransferParams.CryptoRequest .make( proofId: ..., expiration: ..., cryptoProof: ... ) let params = TransferParams .make( transferId: ..., cryptoRequest: cryptoRequest ) transferService .transfer(with: params) .asPublisher() .sink { result in // .., }","title":"iOS"},{"location":"Features/TransferService/Transfer/#android","text":"val cryptoRequest = TransferCryptoRequest( cryptoProof = ..., proofId = \"...\", expiration = ..., ) val params = TransferParams( transferId = \"...\", cryptoRequest = cryptoRequest ) conio.transferService .transfer(params) .asFlow() .collect { // ... }","title":"Android"},{"location":"Features/TransferService/TransferResult/","text":"Transfer Result Overview The TransferResult quotation with updated data used execute a transfer operation. Properties transfer id: the transfer unique identifier source cryptocurrency: the transfer source Cryptocurrency destination cryptocurrency: the transfer destination Cryptocurrency status: the transfer updated operation status gross amount: the transfer updated crypto amount service fees: the updated Conio service fee applied to the transfer quotation mining fees: the update blockchain mining fees applied to the transfer quotation exchange rate: the transfer cryptocurrency current exchange rate","title":"Transfer Result"},{"location":"Features/TransferService/TransferResult/#transfer-result","text":"","title":"Transfer Result"},{"location":"Features/TransferService/TransferResult/#overview","text":"The TransferResult quotation with updated data used execute a transfer operation.","title":"Overview"},{"location":"Features/TransferService/TransferResult/#properties","text":"transfer id: the transfer unique identifier source cryptocurrency: the transfer source Cryptocurrency destination cryptocurrency: the transfer destination Cryptocurrency status: the transfer updated operation status gross amount: the transfer updated crypto amount service fees: the updated Conio service fee applied to the transfer quotation mining fees: the update blockchain mining fees applied to the transfer quotation exchange rate: the transfer cryptocurrency current exchange rate","title":"Properties"},{"location":"Features/TransferService/UpdateTransfer/","text":"Update Transfer Overview updateTransfer API is used to update an existing transfer quotation for transfer a cryptocurrency amount from On-Chain Wallet to the same cryptocurrency Off-Chain Wallet or viceversa. It allows client to specify the new source crypto amount it is willing to update the transfer quotation given its identifier. Params The UpdateTransferParams used to initialized and perform updateTransfer API. transfer id: the existing transfer identifier used to update the selected transfer quotation source amount: the new transfer source crypto amount used to update the selected transfer quotation Result TransferResult Code iOS let params = UpdateTransferParams .make( transferId: ..., newSourceAmount: ... ) transferService .updateTransfer(with: params) .asPublisher() .sink { result in // ... } Android // val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = UpdateTransferParams( transferId = \"...\", sourceAmount = amount ) conio.transferService .updateTransfer(params) .asFlow() .collect { // ... }","title":"Update Transfer"},{"location":"Features/TransferService/UpdateTransfer/#update-transfer","text":"","title":"Update Transfer"},{"location":"Features/TransferService/UpdateTransfer/#overview","text":"updateTransfer API is used to update an existing transfer quotation for transfer a cryptocurrency amount from On-Chain Wallet to the same cryptocurrency Off-Chain Wallet or viceversa. It allows client to specify the new source crypto amount it is willing to update the transfer quotation given its identifier.","title":"Overview"},{"location":"Features/TransferService/UpdateTransfer/#params","text":"The UpdateTransferParams used to initialized and perform updateTransfer API. transfer id: the existing transfer identifier used to update the selected transfer quotation source amount: the new transfer source crypto amount used to update the selected transfer quotation","title":"Params"},{"location":"Features/TransferService/UpdateTransfer/#result","text":"TransferResult","title":"Result"},{"location":"Features/TransferService/UpdateTransfer/#code","text":"","title":"Code"},{"location":"Features/TransferService/UpdateTransfer/#ios","text":"let params = UpdateTransferParams .make( transferId: ..., newSourceAmount: ... ) transferService .updateTransfer(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/TransferService/UpdateTransfer/#android","text":"// val amount = AmountParams.Max val amount = AmountParams.Crypto( value = CryptoAmount(...) ) val params = UpdateTransferParams( transferId = \"...\", sourceAmount = amount ) conio.transferService .updateTransfer(params) .asFlow() .collect { // ... }","title":"Android"},{"location":"Features/UserService/AcceptNewLegalAcceptances/","text":"Accept New Legal Acceptances Overview acceptNewLegalAcceptances API is used to mark as accepted the new legal acceptances. It allows client to mark as accepted possible new legal acceptances and let user continue operate on Conio services. Parameters The AcceptNewLegalAcceptancesParams used to initialized and perform acceptNewLegalAcceptances API. credentials: the username and password used to execute the signup acceptances: the new legal acceptances user preferences Result Success or error. Code iOS let acceptences = [ SignupParams.LegalAcceptance.makeAccepted(type: .clientSupport), SignupParams.LegalAcceptance.makeAccepted(type: .appImprovement) ] let params = AcceptNewLegalAcceptancesParams .make( username: ..., password: ..., legalAcceptances: acceptances ) luserService .acceptNewLegalAcceptances(with: params) .asPublisher() .sink { result in ... } Android val acceptances = listOf( Acceptance(AcceptanceType.AppImprovement, isAccepted = true), Acceptance(AcceptanceType.ClientSupport, isAccepted = true), ) val credentials = Credentials( username = \"...\" // user unique identifier, password = \"...\" ) val params = AcceptNewLegalAcceptancesParams( acceptances = B2BModelAcceptances.acceptedAcceptances, credentials = credentials ) conio.userService .acceptNewLegalAcceptances(params) .asFlow() .collect { result -> // ... }","title":"Accept New Legal Acceptances"},{"location":"Features/UserService/AcceptNewLegalAcceptances/#accept-new-legal-acceptances","text":"","title":"Accept New Legal Acceptances"},{"location":"Features/UserService/AcceptNewLegalAcceptances/#overview","text":"acceptNewLegalAcceptances API is used to mark as accepted the new legal acceptances. It allows client to mark as accepted possible new legal acceptances and let user continue operate on Conio services.","title":"Overview"},{"location":"Features/UserService/AcceptNewLegalAcceptances/#parameters","text":"The AcceptNewLegalAcceptancesParams used to initialized and perform acceptNewLegalAcceptances API. credentials: the username and password used to execute the signup acceptances: the new legal acceptances user preferences","title":"Parameters"},{"location":"Features/UserService/AcceptNewLegalAcceptances/#result","text":"Success or error.","title":"Result"},{"location":"Features/UserService/AcceptNewLegalAcceptances/#code","text":"","title":"Code"},{"location":"Features/UserService/AcceptNewLegalAcceptances/#ios","text":"let acceptences = [ SignupParams.LegalAcceptance.makeAccepted(type: .clientSupport), SignupParams.LegalAcceptance.makeAccepted(type: .appImprovement) ] let params = AcceptNewLegalAcceptancesParams .make( username: ..., password: ..., legalAcceptances: acceptances ) luserService .acceptNewLegalAcceptances(with: params) .asPublisher() .sink { result in ... }","title":"iOS"},{"location":"Features/UserService/AcceptNewLegalAcceptances/#android","text":"val acceptances = listOf( Acceptance(AcceptanceType.AppImprovement, isAccepted = true), Acceptance(AcceptanceType.ClientSupport, isAccepted = true), ) val credentials = Credentials( username = \"...\" // user unique identifier, password = \"...\" ) val params = AcceptNewLegalAcceptancesParams( acceptances = B2BModelAcceptances.acceptedAcceptances, credentials = credentials ) conio.userService .acceptNewLegalAcceptances(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/UserService/FetchLegalAcceptances/","text":"Fetch Legal Acceptances Overview fetchLegalAcceptances API fetches the acceptances, terms and conditions and privacy policies information. Parameters The FetchLegalAcceptancesParams used to initialized and perform fetchLegalAcceptances API. language: the legal acceptances language translation Result The LegalAcceptancesResult acceptances, terms and conditions and privacy policies information. terms and conditions url: the T&C url privacy policies url: the privacy policies url acceptances: the acceptances list Code iOS let params = FetchLegalAcceptancesParams.makeItalian() userService .fetchLegalAcceptances(with: params) .asPublisher() .sink { result in ... } Android val params = FetchLegalAcceptancesParams( language = Language.English, ) conio.userService .fetchLegalAcceptances(params) .asFlow() .collect { result -> // ... }","title":"Fetch Legal Acceptances"},{"location":"Features/UserService/FetchLegalAcceptances/#fetch-legal-acceptances","text":"","title":"Fetch Legal Acceptances"},{"location":"Features/UserService/FetchLegalAcceptances/#overview","text":"fetchLegalAcceptances API fetches the acceptances, terms and conditions and privacy policies information.","title":"Overview"},{"location":"Features/UserService/FetchLegalAcceptances/#parameters","text":"The FetchLegalAcceptancesParams used to initialized and perform fetchLegalAcceptances API. language: the legal acceptances language translation","title":"Parameters"},{"location":"Features/UserService/FetchLegalAcceptances/#result","text":"The LegalAcceptancesResult acceptances, terms and conditions and privacy policies information. terms and conditions url: the T&C url privacy policies url: the privacy policies url acceptances: the acceptances list","title":"Result"},{"location":"Features/UserService/FetchLegalAcceptances/#code","text":"","title":"Code"},{"location":"Features/UserService/FetchLegalAcceptances/#ios","text":"let params = FetchLegalAcceptancesParams.makeItalian() userService .fetchLegalAcceptances(with: params) .asPublisher() .sink { result in ... }","title":"iOS"},{"location":"Features/UserService/FetchLegalAcceptances/#android","text":"val params = FetchLegalAcceptancesParams( language = Language.English, ) conio.userService .fetchLegalAcceptances(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/UserService/FetchPermissions/","text":"Fetch User Permissions Overview fetchPermissions API is used to retrieve the service permissions list the user can currently use. Result The PermissionsResult contains the PermissionType list. If a service permission is not on the list means that the related service can not be completed without an error. types: the available permission types list Code iOS userService .fetchPermissions() .asPublisher() .sink { result in ... } Android conio.userService .fetchPermissions() .asFlow() .collect { result -> }","title":"Fetch User Permissions"},{"location":"Features/UserService/FetchPermissions/#fetch-user-permissions","text":"","title":"Fetch User Permissions"},{"location":"Features/UserService/FetchPermissions/#overview","text":"fetchPermissions API is used to retrieve the service permissions list the user can currently use.","title":"Overview"},{"location":"Features/UserService/FetchPermissions/#result","text":"The PermissionsResult contains the PermissionType list. If a service permission is not on the list means that the related service can not be completed without an error. types: the available permission types list","title":"Result"},{"location":"Features/UserService/FetchPermissions/#code","text":"","title":"Code"},{"location":"Features/UserService/FetchPermissions/#ios","text":"userService .fetchPermissions() .asPublisher() .sink { result in ... }","title":"iOS"},{"location":"Features/UserService/FetchPermissions/#android","text":"conio.userService .fetchPermissions() .asFlow() .collect { result -> }","title":"Android"},{"location":"Features/UserService/UserLogin/","text":"User Login Overview login API executes the login in Conio services. It allows client to obtain a valid user session with passed username, password and crypto signature request. Parameters The LoginParams used to initialized and perform login API. username: the username used to execute the login password: the user password used to execute the login crypto request: the crypto signature used to validate the login Result Success or error. Code iOS let username: String = ... let password: String = ... let cryptoRequest = LoginParams .CryptoRequest .make( username: username, expiration: Timestamp(Date().timeIntervalSince1970 + (30 * 60 * 1000)), cryptoProof: ... ) userService .login(with: params) .asPublisher() .sink { result in // ... } Android val username: String = ... val credentials = Credentials( username = username, password = ... ) val loginCryptoRequest = LoginCryptoRequest( cryptoProof = \"...\", username = username, expiration = Date().time + (30 * 60 * 1000) ) val loginParams = LoginParams( credentials = credentials, cryptoRequest = loginCryptoRequest ) conio.userService .login(params) .asFlow() .collect { result -> // ... }","title":"User Login"},{"location":"Features/UserService/UserLogin/#user-login","text":"","title":"User Login"},{"location":"Features/UserService/UserLogin/#overview","text":"login API executes the login in Conio services. It allows client to obtain a valid user session with passed username, password and crypto signature request.","title":"Overview"},{"location":"Features/UserService/UserLogin/#parameters","text":"The LoginParams used to initialized and perform login API. username: the username used to execute the login password: the user password used to execute the login crypto request: the crypto signature used to validate the login","title":"Parameters"},{"location":"Features/UserService/UserLogin/#result","text":"Success or error.","title":"Result"},{"location":"Features/UserService/UserLogin/#code","text":"","title":"Code"},{"location":"Features/UserService/UserLogin/#ios","text":"let username: String = ... let password: String = ... let cryptoRequest = LoginParams .CryptoRequest .make( username: username, expiration: Timestamp(Date().timeIntervalSince1970 + (30 * 60 * 1000)), cryptoProof: ... ) userService .login(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/UserService/UserLogin/#android","text":"val username: String = ... val credentials = Credentials( username = username, password = ... ) val loginCryptoRequest = LoginCryptoRequest( cryptoProof = \"...\", username = username, expiration = Date().time + (30 * 60 * 1000) ) val loginParams = LoginParams( credentials = credentials, cryptoRequest = loginCryptoRequest ) conio.userService .login(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/UserService/UserLogout/","text":"User Logout Overview logout API executes the user logout from Conio services invalidating user session. Result Success or error. Code iOS userService .logout() .asPublisher() .sink { result in // ... } Android conio.userService .logout() .asFlow() .collect { result -> // ... }","title":"User Logout"},{"location":"Features/UserService/UserLogout/#user-logout","text":"","title":"User Logout"},{"location":"Features/UserService/UserLogout/#overview","text":"logout API executes the user logout from Conio services invalidating user session.","title":"Overview"},{"location":"Features/UserService/UserLogout/#result","text":"Success or error.","title":"Result"},{"location":"Features/UserService/UserLogout/#code","text":"","title":"Code"},{"location":"Features/UserService/UserLogout/#ios","text":"userService .logout() .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/UserService/UserLogout/#android","text":"conio.userService .logout() .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/UserService/UserSignup/","text":"User Signup Overview signup API executes the signup process in Conio services. It allows client to create a new user and setting up a valid user session with passed username, password and crypto signature request. Parameters The SignupParams used to initialize and perform signup API. credentials: the username and password used to execute the signup acceptances: the legal acceptances list accepted or not by the user during the signup crypto request: the crypto signature used to validate the signup Result Success or error. Code iOS let username: String = ... let password: String = ... let cryptoRequest = SignupParams .CryptoRequest .make( proofId: ..., cryptoProof: ..., proofExpiration: Timestamp(Date().timeIntervalSince1970 + (30 * 60 * 1000)), username: username., userLevel: ..., iban: ..., email: ..., firstName: ..., lastName: ... ) let acceptences = [ SignupParams.LegalAcceptance.makeAccepted(type: .clientSupport), SignupParams.LegalAcceptance.makeAccepted(type: .appImprovement) ] let params = SignupParams .make( username: usernamem password: password: acceptances: acceptances, cryptoRequest: cryptoRequest ) userService .signup(with: params) .asPublisher() .sink { result in // ... } Android val username: String = \"...\" // user unique identifier val credentials = Credentials( username = username, password = \"...\" ) val signupCryptoRequest = SignupCryptoRequest( cryptoProof = \"...\", proofId = \"...\", username = username, userLevel = \"...\", expiration = Date().time + (30 * 60 * 1000), // [example] 30 minutes from now iban = \"...\", email = \"...\", firstName = \"...\", lastName = \"...\", ) val acceptances = listOf( Acceptance(AcceptanceType.AppImprovement, isAccepted = true), Acceptance(AcceptanceType.ClientSupport, isAccepted = true), ) val signupParams = SignupParams( credentials = credentials, acceptances = acceptances, cryptoRequest = signupCryptoRequest ) conio.userService .signup(params) .asFlow() .collect { result -> // ... }","title":"User Signup"},{"location":"Features/UserService/UserSignup/#user-signup","text":"","title":"User Signup"},{"location":"Features/UserService/UserSignup/#overview","text":"signup API executes the signup process in Conio services. It allows client to create a new user and setting up a valid user session with passed username, password and crypto signature request.","title":"Overview"},{"location":"Features/UserService/UserSignup/#parameters","text":"The SignupParams used to initialize and perform signup API. credentials: the username and password used to execute the signup acceptances: the legal acceptances list accepted or not by the user during the signup crypto request: the crypto signature used to validate the signup","title":"Parameters"},{"location":"Features/UserService/UserSignup/#result","text":"Success or error.","title":"Result"},{"location":"Features/UserService/UserSignup/#code","text":"","title":"Code"},{"location":"Features/UserService/UserSignup/#ios","text":"let username: String = ... let password: String = ... let cryptoRequest = SignupParams .CryptoRequest .make( proofId: ..., cryptoProof: ..., proofExpiration: Timestamp(Date().timeIntervalSince1970 + (30 * 60 * 1000)), username: username., userLevel: ..., iban: ..., email: ..., firstName: ..., lastName: ... ) let acceptences = [ SignupParams.LegalAcceptance.makeAccepted(type: .clientSupport), SignupParams.LegalAcceptance.makeAccepted(type: .appImprovement) ] let params = SignupParams .make( username: usernamem password: password: acceptances: acceptances, cryptoRequest: cryptoRequest ) userService .signup(with: params) .asPublisher() .sink { result in // ... }","title":"iOS"},{"location":"Features/UserService/UserSignup/#android","text":"val username: String = \"...\" // user unique identifier val credentials = Credentials( username = username, password = \"...\" ) val signupCryptoRequest = SignupCryptoRequest( cryptoProof = \"...\", proofId = \"...\", username = username, userLevel = \"...\", expiration = Date().time + (30 * 60 * 1000), // [example] 30 minutes from now iban = \"...\", email = \"...\", firstName = \"...\", lastName = \"...\", ) val acceptances = listOf( Acceptance(AcceptanceType.AppImprovement, isAccepted = true), Acceptance(AcceptanceType.ClientSupport, isAccepted = true), ) val signupParams = SignupParams( credentials = credentials, acceptances = acceptances, cryptoRequest = signupCryptoRequest ) conio.userService .signup(params) .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/WalletService/FetchBalances/","text":"Fetch Balances Overview fetchBalances API is used to retrieve the wallet balances of all cryptocurrencies. It allows client to fetch the Wallets balances amounts, either confirmed and unconfirmed. Result The BalancesResult contains the WalletBalance list. wallets balances: the available wallets balances list Code iOS userService .fetchBalances() .asPublisher() .sink { result in ... } Android conio.walletService .fetchBalances() .asFlow() .collect { result -> // ... }","title":"Fetch Balances"},{"location":"Features/WalletService/FetchBalances/#fetch-balances","text":"","title":"Fetch Balances"},{"location":"Features/WalletService/FetchBalances/#overview","text":"fetchBalances API is used to retrieve the wallet balances of all cryptocurrencies. It allows client to fetch the Wallets balances amounts, either confirmed and unconfirmed.","title":"Overview"},{"location":"Features/WalletService/FetchBalances/#result","text":"The BalancesResult contains the WalletBalance list. wallets balances: the available wallets balances list","title":"Result"},{"location":"Features/WalletService/FetchBalances/#code","text":"","title":"Code"},{"location":"Features/WalletService/FetchBalances/#ios","text":"userService .fetchBalances() .asPublisher() .sink { result in ... }","title":"iOS"},{"location":"Features/WalletService/FetchBalances/#android","text":"conio.walletService .fetchBalances() .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Features/WalletService/FetchMnemonic/","text":"Fetch Mnemonic Overview fetchMnemonic API is used to retrieve the user wallet mnemonic, a list of secret words necessary to restore user wallet during account recovery. Result The MnemonicResult contains the list of words that represent the user wallet mnemonic. words: the mnemonic words list Code iOS walletService .fetchMnemonic() .asPublisher() .sink { result in ... } Android conio.walletService .fetchBalances() .asFlow() .collect { result -> // ... }","title":"Fetch Mnemonic"},{"location":"Features/WalletService/FetchMnemonic/#fetch-mnemonic","text":"","title":"Fetch Mnemonic"},{"location":"Features/WalletService/FetchMnemonic/#overview","text":"fetchMnemonic API is used to retrieve the user wallet mnemonic, a list of secret words necessary to restore user wallet during account recovery.","title":"Overview"},{"location":"Features/WalletService/FetchMnemonic/#result","text":"The MnemonicResult contains the list of words that represent the user wallet mnemonic. words: the mnemonic words list","title":"Result"},{"location":"Features/WalletService/FetchMnemonic/#code","text":"","title":"Code"},{"location":"Features/WalletService/FetchMnemonic/#ios","text":"walletService .fetchMnemonic() .asPublisher() .sink { result in ... }","title":"iOS"},{"location":"Features/WalletService/FetchMnemonic/#android","text":"conio.walletService .fetchBalances() .asFlow() .collect { result -> // ... }","title":"Android"},{"location":"Installation/Android/","text":"Android Installation Prerequisites Min Android SDK: 23 (Android 6.0 \u201cMarshmallow\u201d) Installation The Conio Android SDK is located in a private Maven repository on JFrog Artifactory , so it is necessary to configure the authentication as follow. Add the Artifactory credentials provided by Conio to your global gradle.properties artifactory_user=<username provided by Conio> artifactory_password=<password provided by Conio> Add the Conio Artifactory repository to your build.gradle repositories { // ... maven { url \"https://artifactory.conio.com/artifactory/gradle-release-local\" credentials(PasswordCredentials) { username \"${artifactory_user}\" password \"${artifactory_password}\" } } } Add the Conio SDK dependency dependencies { // ... implementation 'com.conio:sdk-b2b:[VERSION]' }","title":"Android"},{"location":"Installation/Android/#android-installation","text":"","title":"Android Installation"},{"location":"Installation/Android/#prerequisites","text":"Min Android SDK: 23 (Android 6.0 \u201cMarshmallow\u201d)","title":"Prerequisites"},{"location":"Installation/Android/#installation","text":"The Conio Android SDK is located in a private Maven repository on JFrog Artifactory , so it is necessary to configure the authentication as follow. Add the Artifactory credentials provided by Conio to your global gradle.properties artifactory_user=<username provided by Conio> artifactory_password=<password provided by Conio> Add the Conio Artifactory repository to your build.gradle repositories { // ... maven { url \"https://artifactory.conio.com/artifactory/gradle-release-local\" credentials(PasswordCredentials) { username \"${artifactory_user}\" password \"${artifactory_password}\" } } } Add the Conio SDK dependency dependencies { // ... implementation 'com.conio:sdk-b2b:[VERSION]' }","title":"Installation"},{"location":"Installation/Ios/","text":"iOS Installation Prerequisites iOS 13+ Swift 5.9 Swift Package Manger Via Xcode In Xcode, install Conio B2B SDK by navigating to File > Add Packages In the prompt that appears, insert the repository: git@bitbucket.org:squadrone/conio-sdk-b2b-ios.git or https://bitbucket.org/squadrone/conio-sdk-b2b-ios.git Via Package.swift Simply add the following lines to dependencies of your Package.swift manifest: dependencies: [ .package(url: \"git@bitbucket.org:squadrone/conio-sdk-b2b-ios.git\") // ... ], Note: in order to correctly fetch package you will need to have access to project repository. Troubleshooting If you get the following error: autoreconf: failed to run aclocal: No such file or directory try the following command using Brew : brew install autoconf && brew install automake If you get the following error: Can't exec \"/opt/local/bin/aclocal\": No such file or directory Uninstall MacPorts with: sudo port -fp uninstall --follow-dependents installed","title":"iOS"},{"location":"Installation/Ios/#ios-installation","text":"","title":"iOS Installation"},{"location":"Installation/Ios/#prerequisites","text":"iOS 13+ Swift 5.9","title":"Prerequisites"},{"location":"Installation/Ios/#swift-package-manger","text":"","title":"Swift Package Manger"},{"location":"Installation/Ios/#via-xcode","text":"In Xcode, install Conio B2B SDK by navigating to File > Add Packages In the prompt that appears, insert the repository: git@bitbucket.org:squadrone/conio-sdk-b2b-ios.git or https://bitbucket.org/squadrone/conio-sdk-b2b-ios.git","title":"Via Xcode"},{"location":"Installation/Ios/#via-packageswift","text":"Simply add the following lines to dependencies of your Package.swift manifest: dependencies: [ .package(url: \"git@bitbucket.org:squadrone/conio-sdk-b2b-ios.git\") // ... ], Note: in order to correctly fetch package you will need to have access to project repository.","title":"Via Package.swift"},{"location":"Installation/Ios/#troubleshooting","text":"If you get the following error: autoreconf: failed to run aclocal: No such file or directory try the following command using Brew : brew install autoconf && brew install automake If you get the following error: Can't exec \"/opt/local/bin/aclocal\": No such file or directory Uninstall MacPorts with: sudo port -fp uninstall --follow-dependents installed","title":"Troubleshooting"},{"location":"Old/","text":"Conio Questo SDK rende semplice integrare un portafoglio Bitcoin Conio nella propria app. Cosa si pu\u00f2 fare? Creare un portafoglio Bitcoin Ottenere le informazioni del portafoglio creato Comprare e Vendere Bitcoin Leggere il dettaglio storico delle operazioni di un utente Ottenere il prezzo storico ed attuale del Bitcoin Come posso utilizzarlo? Installazione Android iOS Configurazione Operazioni Introduzione Operazioni sull'utente Termini di servizio Signup Login Logout Operazioni sul portafoglio Indirizzo bitcoin attuale Lista dei movimenti Dettaglio di un movimento Bilancio del portafoglio Codice di recupero Bitcoin Operazioni sul mercato Prezzo attuale del Bitcoin Prezzo storico del Bitcoin Riepilogo trading Commissioni trading Limiti di trading Acquisto di Bitcoin Vendita di Bitcoin","title":"Conio #"},{"location":"Old/#conio","text":"Questo SDK rende semplice integrare un portafoglio Bitcoin Conio nella propria app.","title":"Conio"},{"location":"Old/#cosa-si-puo-fare","text":"Creare un portafoglio Bitcoin Ottenere le informazioni del portafoglio creato Comprare e Vendere Bitcoin Leggere il dettaglio storico delle operazioni di un utente Ottenere il prezzo storico ed attuale del Bitcoin","title":"Cosa si pu\u00f2 fare?"},{"location":"Old/#come-posso-utilizzarlo","text":"Installazione Android iOS Configurazione Operazioni Introduzione Operazioni sull'utente Termini di servizio Signup Login Logout Operazioni sul portafoglio Indirizzo bitcoin attuale Lista dei movimenti Dettaglio di un movimento Bilancio del portafoglio Codice di recupero Bitcoin Operazioni sul mercato Prezzo attuale del Bitcoin Prezzo storico del Bitcoin Riepilogo trading Commissioni trading Limiti di trading Acquisto di Bitcoin Vendita di Bitcoin","title":"Come posso utilizzarlo?"},{"location":"Old/index.en/","text":"Conio This SDK makes it simple to integrate a Bitcoin wallet Conio in your app. What can you do? Create a Bitcoin wallet Show wallet details Show the historical and current Bitcoin price Send and receive Bitcoin Buy and Sell Bitcoin Show all the transactions made by the wallet How does it work? Installation Android iOS Configuration User Terms of service Signup Login Logout Wallet Bitcoin address Movements list Activity details Wallet details Send Bitcoin Market Bitcoin Price Historical Price Trading limits Trade Bitcoin General exceptions Outdated SDK","title":"Conio #"},{"location":"Old/index.en/#conio","text":"This SDK makes it simple to integrate a Bitcoin wallet Conio in your app.","title":"Conio"},{"location":"Old/index.en/#what-can-you-do","text":"Create a Bitcoin wallet Show wallet details Show the historical and current Bitcoin price Send and receive Bitcoin Buy and Sell Bitcoin Show all the transactions made by the wallet","title":"What can you do?"},{"location":"Old/index.en/#how-does-it-work","text":"Installation Android iOS Configuration User Terms of service Signup Login Logout Wallet Bitcoin address Movements list Activity details Wallet details Send Bitcoin Market Bitcoin Price Historical Price Trading limits Trade Bitcoin General exceptions Outdated SDK","title":"How does it work?"},{"location":"Old/configuration/Configuration.en/","text":"Initialize the SDK Conio object The Conio object needs to be initialized with a ConioConfiguration . You can use the test configuration that will connect to the staging environment and the Bitcoin testnet blockchain. The prod environment instead will connect to the production server and the Bitcoin original blockchain. You can also initialize the SDK with a custom environment, with the url of the backend and a Bitcoin blockchain. Parameters configuration : configuration to initialize the SDK: ConioConfiguration type (Android) context : context will save in the Shared Preferences Conio Configuration identifier : name of the configuration bitcoinNetwork : the Bitcoin network, either .testnet or .mainnet networkEnvironment : the environment (which backend): NetworkEnvironment type Network Environment name : name of the environment host : the host Code Android import com.conio.sdk.Conio; import com.conio.sdk.models.shared.BitcoinNetwork; import com.conio.sdk.models.shared.ConioConfiguration; import com.conio.sdk.providers.networking.NetworkEnvironment; // Test configuration Conio conio = new Conio(ConioConfiguration.test, getApplicationContext()); // Production configuration Conio conio = new Conio(ConioConfiguration.prod, getApplicationContext()); iOS import ConioSDK // Test configuration let conio = Conio(configuration: ConioConfiguration.test) // Production configuration let conio = Conio(configuration: ConioConfiguration.prod)","title":"Initialize the SDK"},{"location":"Old/configuration/Configuration.en/#initialize-the-sdk","text":"","title":"Initialize the SDK"},{"location":"Old/configuration/Configuration.en/#conio-object","text":"The Conio object needs to be initialized with a ConioConfiguration . You can use the test configuration that will connect to the staging environment and the Bitcoin testnet blockchain. The prod environment instead will connect to the production server and the Bitcoin original blockchain. You can also initialize the SDK with a custom environment, with the url of the backend and a Bitcoin blockchain.","title":"Conio object"},{"location":"Old/configuration/Configuration.en/#parameters","text":"configuration : configuration to initialize the SDK: ConioConfiguration type (Android) context : context will save in the Shared Preferences","title":"Parameters"},{"location":"Old/configuration/Configuration.en/#conio-configuration","text":"identifier : name of the configuration bitcoinNetwork : the Bitcoin network, either .testnet or .mainnet networkEnvironment : the environment (which backend): NetworkEnvironment type","title":"Conio Configuration"},{"location":"Old/configuration/Configuration.en/#network-environment","text":"name : name of the environment host : the host","title":"Network Environment"},{"location":"Old/configuration/Configuration.en/#code","text":"","title":"Code"},{"location":"Old/configuration/Configuration.en/#android","text":"import com.conio.sdk.Conio; import com.conio.sdk.models.shared.BitcoinNetwork; import com.conio.sdk.models.shared.ConioConfiguration; import com.conio.sdk.providers.networking.NetworkEnvironment; // Test configuration Conio conio = new Conio(ConioConfiguration.test, getApplicationContext()); // Production configuration Conio conio = new Conio(ConioConfiguration.prod, getApplicationContext());","title":"Android"},{"location":"Old/configuration/Configuration.en/#ios","text":"import ConioSDK // Test configuration let conio = Conio(configuration: ConioConfiguration.test) // Production configuration let conio = Conio(configuration: ConioConfiguration.prod)","title":"iOS"},{"location":"Old/configuration/Configuration/","text":"Inizializzazione dell'SDK L'oggetto Conio Per usare l'SDK, occorre inizializzare l'oggetto Conio con una ConioConfiguration . La configurazione determiner\u00e0 l'ambiente con il quale l'SDK interagir\u00e0. \u00c8 necessario inizializzare l'SDK con un ambiente personalizzato, specificando l'url del backend e la rete Bitcoin da utilizzare. Di seguito le specifiche per inizializzare un oggetto di tipo Conio . Parametri: Conio configuration : di tipo ConioConfiguration , la configurazione per inizializzare l'SDK; (Android) context : di tipo Context , il context dell'applicazione Android. Parametri: ConioConfiguration baseUrl : di tipo String , url del backend; bitcoinNetwork : di tipo BitcoinNetwork , la rete Bitcoin. Pu\u00f2 essere .testnet , .mainnet , privateMainnet o privateTestnet . Codice Android import com.conio.sdk.Conio; import com.conio.sdk.models.shared.BitcoinNetwork; import com.conio.sdk.models.shared.ConioConfiguration; import com.conio.sdk.providers.networking.NetworkEnvironment; // Test configuration ConioConfiguration testConfig = new ConioConfiguration(\"https://example.test.com\", BitcoinNetwork.TESTNET); Conio conio = new Conio(testConfig, context); // Production configuration ConioConfiguration config = new ConioConfiguration(\"https://example.production.com\", BitcoinNetwork.MAINNET); Conio conio = new Conio(config, context); iOS import ConioSDK // Test configuration let testConfig = ConioConfiguration( withBaseUrl: \"https://example.test.com\", bitcoinNetwork: .testnet ) let conio = Conio(config: testConfig) // Production configuration let config = ConioConfiguration( withBaseUrl: \"https://example.production.com\", bitcoinNetwork: .testnet ) let conio = Conio(config: config)","title":"Inizializzazione dell'SDK"},{"location":"Old/configuration/Configuration/#inizializzazione-dellsdk","text":"","title":"Inizializzazione dell'SDK"},{"location":"Old/configuration/Configuration/#loggetto-conio","text":"Per usare l'SDK, occorre inizializzare l'oggetto Conio con una ConioConfiguration . La configurazione determiner\u00e0 l'ambiente con il quale l'SDK interagir\u00e0. \u00c8 necessario inizializzare l'SDK con un ambiente personalizzato, specificando l'url del backend e la rete Bitcoin da utilizzare. Di seguito le specifiche per inizializzare un oggetto di tipo Conio .","title":"L'oggetto Conio"},{"location":"Old/configuration/Configuration/#parametri-conio","text":"configuration : di tipo ConioConfiguration , la configurazione per inizializzare l'SDK; (Android) context : di tipo Context , il context dell'applicazione Android.","title":"Parametri: Conio"},{"location":"Old/configuration/Configuration/#parametri-conioconfiguration","text":"baseUrl : di tipo String , url del backend; bitcoinNetwork : di tipo BitcoinNetwork , la rete Bitcoin. Pu\u00f2 essere .testnet , .mainnet , privateMainnet o privateTestnet .","title":"Parametri: ConioConfiguration"},{"location":"Old/configuration/Configuration/#codice","text":"","title":"Codice"},{"location":"Old/configuration/Configuration/#android","text":"import com.conio.sdk.Conio; import com.conio.sdk.models.shared.BitcoinNetwork; import com.conio.sdk.models.shared.ConioConfiguration; import com.conio.sdk.providers.networking.NetworkEnvironment; // Test configuration ConioConfiguration testConfig = new ConioConfiguration(\"https://example.test.com\", BitcoinNetwork.TESTNET); Conio conio = new Conio(testConfig, context); // Production configuration ConioConfiguration config = new ConioConfiguration(\"https://example.production.com\", BitcoinNetwork.MAINNET); Conio conio = new Conio(config, context);","title":"Android"},{"location":"Old/configuration/Configuration/#ios","text":"import ConioSDK // Test configuration let testConfig = ConioConfiguration( withBaseUrl: \"https://example.test.com\", bitcoinNetwork: .testnet ) let conio = Conio(config: testConfig) // Production configuration let config = ConioConfiguration( withBaseUrl: \"https://example.production.com\", bitcoinNetwork: .testnet ) let conio = Conio(config: config)","title":"iOS"},{"location":"Old/exchange/Exchange.en/","text":"Exchange operations Current Bitcoin Price You can get the current buy or sell Bitcoin price. The SDK can also give you the Bitcoin equivalent for a set amount of currency. Parameters An object of type CurrentPriceParams : currency : which fiat currency (EUR) you want to have the exchange rate for. @Optional amount : the amount of Fiat currency (EUR) that you want to know the equivalent in BTC Returns A CurrentPrice object: buyPrice : Buy exchange rate sellPrice : Sell exchange rate timestamp : price timestamp Code Android // Current price CurrentPriceParams params = new CurrentPriceParams(Currency.EUR); // Conversion of 50.000.000 satoshi (0,5 BTC) in euro CurrentPriceParams params = new CurrentPriceParams(Currency.EUR, 50_000_000L) conio.exchangeService.currentPrice(params, result->{ result.analysis(price-> { // CurrentPrice }, error-> { // Exception }); }); iOS // Current price let params = CurrentPriceParams(currency: .eur) // Conversion of 50.000.000 satoshi (0,5 BTC) in euro let params = CurrentPriceParams(currency: .eur, satoshiAmount: 50_000_000) conio.exchangeService.currentPrice(params: params) { result in result.analysis(ifSuccess: { prices in // CurrentPrice }, ifFailure: { error in // ServiceError }) }); Bitcoin hystorical price You can get the Bitcoin hystorical price during a set amount of time. Parameters An object HistoricalPriceParams : currency : which fiat currency you want to have the exchange rate for. startTimestamp : Initial timestamp. endTimestamp : Final timespamp. @Optional interval : Time between each price (week, day, hour...) Returns Object HistoricalPrices : Contains a list of CurrentPrice An object PriceAnalytics containing: deltaFiat : absolute exchange rate change during the selected period. deltaPercentage : percentage change of the exchange rate during the selected period. trend : enum: price increased, decreased or stayed the same. Code Android // Price from April 16, 2019 to April 16, 2018 // Standard Interval: 1 day HistoricalPriceParams params = new HistoricalPriceParams( Currency.EUR, 1523885446000L, 1563465540000L ); // Price from April 16, 2019 to April 16, 2018 // Selected Interval: 1 week HistoricalPriceParams params = new HistoricalPriceParams( Currency.EUR, 1523885446000L, 1563465540000L, 604800000 ); conio.exchangeService.historicalPrices(params, result->{ result.analysis(prices-> { // HistoricalPrices }, error-> { // Exception }); }); iOS // Price from April 16, 2019 to April 16, 2018 // Standard Interval: 1 day let params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000) // Price from April 16, 2019 to April 16, 2018 // Selected Interval: 1 week let params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000, interval: 604800000) conio.exchangeService.historicalPrices(params: params) { result in result.analysis(ifSuccess: { prices in // HistoricalPrices }, ifFailure: { error in // ServiceError }) }); Trading limits Request user trading limits (assigned at signup) Returns An object AllTradingLimits (Android) or Limits (iOS) containing: Two objects: TradingLimits , one for buying limits and one for selling limits. Inside of it we get: currentLimit : current limit limits : a list containing each limit (daily, monthly, yearly) and their maximum values. currentLimitsByType : current limit for each of the limits. minimumBuyAmount : minimum amount in fiat currency (EUR) required to buy Bitcoin minimumSellAmount : minimum amount in fiat currency (EUR) required to sell Bitcoin Codice Android conio.exchangeService.tradingLimits(result -> { result.analysis(limits -> { // TradingLimits }, error -> { // Exception }); }); iOS conio.exchangeService.tradingLimits { result in result.analysis(ifSuccess: { limits in // TradingLimits }, ifFailure: { error in // ServiceError }) }); Buy Bitcoin In order to buy Bitcoin you will have to perform 2 operations. The first one creates a Bid (a request to buy some BTC at some price). Inside the created Bid you will find the WiretransferInfo that you will use to make the wire transfer necessary to pay for the Bitcoin. Once the wire transfer is completed you can perfom the second operation that will inform Conio that you payed the Bid by sending over a CryptoProof , required to proof the validity of the transaction. Bid creation You can create a RequestBid with a currency (BTC or EUR) and an amount, expressed either in satoshi, or in Fiat currency. For example you can create a RequestBid in Euro to buy an amount in Bitcoin for the equivalent of 20\u20ac, or a RequestBid in Euro to buy 100.000.000 satoshi. If the request will be successful you will get a Bid containing an ID . With this identifier you will be able to update the Bid to get fresh info about it. This will be necessary if the user takes some time (more than 2 minutes) from the Bid request to the actual payment. Parameters (Optional) id : Bid id, insert only if you need to refresh the bid (one of) satoshi : amount of Bitcoin that the user wants to buy (one of) fiatAmount : amount of Fiat currency the user wants to spend to buy an equivalent Bitcoin amount currency : Fiat currency used to buy (EUR) The SDK will allow you to insert only one of satoshi or fiatAmount . You should never input both of them at the same time. Returns An object CreatedBid containing: id : identifier required to refresh or finalize a bid currency : Fiat currency used to buy (EUR) satoshi : Satoshi amount of the request fiatAmount : Fiat amount (EUR) of the request serviceFees : Fees for the transaction in the selected currency expiration : Bid expiration timestamp. If expired please refresh the Bid. wiretransferInfo : necessary info to pay for the bid Code Android // Buy request for 100\u20ac CreateOrRefreshBidParams params = new CreateOrRefreshBidParams(Currency.EUR, 100d); // Buy request for 1.000.000 satoshi CreateOrRefreshBidParams params = new CreateOrRefreshBidParams(Currency.EUR, 100000000l); // Bid refresh for 100\u20ac CreateOrRefreshBidParams params = new CreateOrRefreshBidParams( \"bididentifier\", Currency.EUR, 100d ); conio.exchangeService.createOrRefreshBid(params, result -> { result.analysis(bid -> { // CreatedBid }, error -> { // Exception }); }); iOS // Buy request for 50\u20ac let params = CreateOrRefreshBidParams(currency: .eur, fiatAmount: 50.0) // Buy request for 1.000.000 satoshi let params = CreateOrRefreshBidParams(currency: .eur, satoshi: 1000000) // Bid refresh for 100\u20ac let params = CreateOrRefreshBidParams(bidID: \"bididentifier\", currency: .eur, fiatAmount: 100.0) conio.exchangeService.createOrRefreshBid(params: params) { result in result.analysis(ifSuccess: { createdBid in // CreatedBid }, ifFailure: { error in // ServiceError }) }); Bid Payment Once you have payed the Bid you can use the Purchase operation to receive the Bitcoin. You will have to submit a CryptoProof , that you can create in the same way as the one created during the signup. The only difference is the following DATA to concatenate (exactly in this order): [proofID, \"PAY_FOR_BID_WT\", bidID, userID, Expiration] Parameters An object PurchaseParams containing: bidId : Bid identifier referring to the bid you want to finalize cryptoRequest : a BidCryptoRequest Returns An object PurchaseResult containing: bidId : Bid identifier Errors INVALID_CRYPTO_PROOF Crypto proof is not valid INVALID_PAYMENT_METHOD Payment method is not valid UNSUPPORTED_PAYMENT_METHOD Payment method is not supported TRADING_LIMITS_EXCEEDED Bid exceed the maximum buy limit of the user TRADE_EXPIRED Bid is expired BID_ALREADY_PAID Bid was already paid BID_NOT_YET_PAID Bid has not been paid yet UNRECOVERABLE_BID Bid is in an error state FIAT_AMOUNT_TOO_LOW Fiat amount is lower than minimum limit Code Android BidCryptoRequest bidCryptoRequest = createCryptoRequest() // Your implementation PurchaseParams params = new PurchaseParams(\"bidId\", bidCryptoRequest, card); conio.exchangeService.purchase(params, result -> { result.analysis(bid -> { // PurchaseResult }, error -> { // Exception }); }); iOS let cryptoRequest = createCryptoRequest() // Your implementation let params = PurchaseParams(bidID: \"bidID\", paymentCard: card, cryptoRequest: cryptoRequest) conio.exchangeService.purchase(params: params) { result in result.analysis(ifSuccess: { bid in // PurchaseResult }, ifFailure: { error in // ServiceError }) }); Sell Bitcoin In order to buy Bitcoin you will have to perform 2 operations. The first one creates a Ask (a request to sell some BTC at some price). The second one will pay said Ask , by using the ask identifier. The SDK will sign the Bitcoin transaction that moves the bitcoins from the user wallet, returning the id of said completed Ask. Ask Creation You can create a CreatedAsk in Euro to sell an amount in Bitcoin for the equivalent of 50\u20ac, or a CreatedAsk in Euro to sell 100.000.000 satoshi. The request will return an Ask containing an ID . With this identifier you will be able to update the Ask to get fresh info about it. This will be necessary if the user takes some time (more than 2 minutes) from the Ask request to the actual sell. Parameters (Optional) id : Ask id, insert only if you need to refresh the Ask (one of) satoshi : bitcoin amount the user wants to sell (one of) fiatAmount : amount of Fiat currency the user wants to receive when selling Bitcoin currency : Fiat currency to receive (EUR) The SDK will allow you to insert only one of satoshi or fiatAmount . You should never input both of them at the same time. Returns An object CreatedAsk containing: id : identifier required to refresh or finalize a ask currency : Fiat currency to receive (EUR) satoshi : Satoshi amount of the request fiatAmount : Fiat amount (EUR) of the request serviceFees : Fees for the transaction in the selected currency expiration : Ask expiration timestamp. If expired please refresh the Ask. minerFees : Bitcoin network fees, used to pay for the inclusion of the transaction in the blockchain. Errors TRADING_LIMITS_EXCEEDED NOT_ENOUGH_BTC_AMOUNT NO_SUCH_SELLER (Internal selling error) NO_SUCH_WALLET (Internal wallet error) iOS // Sell request for 50\u20ac let params = CreateOrRefreshAskParams(currency: .eur, fiatAmount: 50.0) // Sell request for 100000000 satoshi let params = CreateOrRefreshAskParams(currency: .eur, satoshi: 100000000) // Refresh ask let params = CreateOrRefreshAskParams(askID: \"id\", currency: .eur, fiatAmount: 100.0) conio.exchangeService.createOrRefreshAsk(params: params) { result in result.analysis(ifSuccess: { createdAsk in // CreatedBid }, ifFailure: { error in // ServiceError }) } Android // Sell request for 50\u20ac CreateOrRefreshAskParams params = new CreateOrRefreshAskParams(Currency.EUR, 50d); // Refresh ask CreateOrRefreshAskParams params = new CreateOrRefreshAskParams(\"id\", Currency.EUR, 50d); conio.exchangeService.createOrRefreshAsk(params: params) { result in result.analysis(ifSuccess: { createdAsk in // CreatedAsk }, ifFailure: { error in // Exception }) }); Finalize Ask To finalize the sell you just need to input the ID of the CreatedAsk in the Sell operation. Parameters An object SellParams containing: askId : Ask identifier Returns An object SellResult containing: askId : Ask identifier Errors TRADING_LIMITS_EXCEEDED TRADE_EXPIRED UNRECOVERABLE_ASK ASK_ALREADY_PAID NOT_ENOUGH_BTC_AMOUNT_E DUST_ASK (Bitcoin amount is too low) FIAT_AMOUNT_TOO_LOW Code iOS let params = SellParams(askID: askID) conio.exchangeService.sell(params: params) { result in result.analysis(ifSuccess: { sellResult in // SellResult }, ifFailure: { error in // ServiceError }) } Android SellParams sellParams = new SellParams(\"askId\"); conio.exchangeService.sell(params: params) { result in result.analysis(ifSuccess: { sellResult in // SellResult }, ifFailure: { error in // Exception }) });","title":"Exchange operations"},{"location":"Old/exchange/Exchange.en/#exchange-operations","text":"","title":"Exchange operations"},{"location":"Old/exchange/Exchange.en/#current-bitcoin-price","text":"You can get the current buy or sell Bitcoin price. The SDK can also give you the Bitcoin equivalent for a set amount of currency.","title":"Current Bitcoin Price"},{"location":"Old/exchange/Exchange.en/#parameters","text":"An object of type CurrentPriceParams : currency : which fiat currency (EUR) you want to have the exchange rate for. @Optional amount : the amount of Fiat currency (EUR) that you want to know the equivalent in BTC","title":"Parameters"},{"location":"Old/exchange/Exchange.en/#returns","text":"A CurrentPrice object: buyPrice : Buy exchange rate sellPrice : Sell exchange rate timestamp : price timestamp","title":"Returns"},{"location":"Old/exchange/Exchange.en/#code","text":"","title":"Code"},{"location":"Old/exchange/Exchange.en/#android","text":"// Current price CurrentPriceParams params = new CurrentPriceParams(Currency.EUR); // Conversion of 50.000.000 satoshi (0,5 BTC) in euro CurrentPriceParams params = new CurrentPriceParams(Currency.EUR, 50_000_000L) conio.exchangeService.currentPrice(params, result->{ result.analysis(price-> { // CurrentPrice }, error-> { // Exception }); });","title":"Android"},{"location":"Old/exchange/Exchange.en/#ios","text":"// Current price let params = CurrentPriceParams(currency: .eur) // Conversion of 50.000.000 satoshi (0,5 BTC) in euro let params = CurrentPriceParams(currency: .eur, satoshiAmount: 50_000_000) conio.exchangeService.currentPrice(params: params) { result in result.analysis(ifSuccess: { prices in // CurrentPrice }, ifFailure: { error in // ServiceError }) });","title":"iOS"},{"location":"Old/exchange/Exchange.en/#bitcoin-hystorical-price","text":"You can get the Bitcoin hystorical price during a set amount of time.","title":"Bitcoin hystorical price"},{"location":"Old/exchange/Exchange.en/#parameters_1","text":"An object HistoricalPriceParams : currency : which fiat currency you want to have the exchange rate for. startTimestamp : Initial timestamp. endTimestamp : Final timespamp. @Optional interval : Time between each price (week, day, hour...)","title":"Parameters"},{"location":"Old/exchange/Exchange.en/#returns_1","text":"Object HistoricalPrices : Contains a list of CurrentPrice An object PriceAnalytics containing: deltaFiat : absolute exchange rate change during the selected period. deltaPercentage : percentage change of the exchange rate during the selected period. trend : enum: price increased, decreased or stayed the same.","title":"Returns"},{"location":"Old/exchange/Exchange.en/#code_1","text":"","title":"Code"},{"location":"Old/exchange/Exchange.en/#android_1","text":"// Price from April 16, 2019 to April 16, 2018 // Standard Interval: 1 day HistoricalPriceParams params = new HistoricalPriceParams( Currency.EUR, 1523885446000L, 1563465540000L ); // Price from April 16, 2019 to April 16, 2018 // Selected Interval: 1 week HistoricalPriceParams params = new HistoricalPriceParams( Currency.EUR, 1523885446000L, 1563465540000L, 604800000 ); conio.exchangeService.historicalPrices(params, result->{ result.analysis(prices-> { // HistoricalPrices }, error-> { // Exception }); });","title":"Android"},{"location":"Old/exchange/Exchange.en/#ios_1","text":"// Price from April 16, 2019 to April 16, 2018 // Standard Interval: 1 day let params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000) // Price from April 16, 2019 to April 16, 2018 // Selected Interval: 1 week let params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000, interval: 604800000) conio.exchangeService.historicalPrices(params: params) { result in result.analysis(ifSuccess: { prices in // HistoricalPrices }, ifFailure: { error in // ServiceError }) });","title":"iOS"},{"location":"Old/exchange/Exchange.en/#trading-limits","text":"Request user trading limits (assigned at signup)","title":"Trading limits"},{"location":"Old/exchange/Exchange.en/#returns_2","text":"An object AllTradingLimits (Android) or Limits (iOS) containing: Two objects: TradingLimits , one for buying limits and one for selling limits. Inside of it we get: currentLimit : current limit limits : a list containing each limit (daily, monthly, yearly) and their maximum values. currentLimitsByType : current limit for each of the limits. minimumBuyAmount : minimum amount in fiat currency (EUR) required to buy Bitcoin minimumSellAmount : minimum amount in fiat currency (EUR) required to sell Bitcoin","title":"Returns"},{"location":"Old/exchange/Exchange.en/#codice","text":"","title":"Codice"},{"location":"Old/exchange/Exchange.en/#android_2","text":"conio.exchangeService.tradingLimits(result -> { result.analysis(limits -> { // TradingLimits }, error -> { // Exception }); });","title":"Android"},{"location":"Old/exchange/Exchange.en/#ios_2","text":"conio.exchangeService.tradingLimits { result in result.analysis(ifSuccess: { limits in // TradingLimits }, ifFailure: { error in // ServiceError }) });","title":"iOS"},{"location":"Old/exchange/Exchange.en/#buy-bitcoin","text":"In order to buy Bitcoin you will have to perform 2 operations. The first one creates a Bid (a request to buy some BTC at some price). Inside the created Bid you will find the WiretransferInfo that you will use to make the wire transfer necessary to pay for the Bitcoin. Once the wire transfer is completed you can perfom the second operation that will inform Conio that you payed the Bid by sending over a CryptoProof , required to proof the validity of the transaction.","title":"Buy Bitcoin"},{"location":"Old/exchange/Exchange.en/#bid-creation","text":"You can create a RequestBid with a currency (BTC or EUR) and an amount, expressed either in satoshi, or in Fiat currency. For example you can create a RequestBid in Euro to buy an amount in Bitcoin for the equivalent of 20\u20ac, or a RequestBid in Euro to buy 100.000.000 satoshi. If the request will be successful you will get a Bid containing an ID . With this identifier you will be able to update the Bid to get fresh info about it. This will be necessary if the user takes some time (more than 2 minutes) from the Bid request to the actual payment.","title":"Bid creation"},{"location":"Old/exchange/Exchange.en/#parameters_2","text":"(Optional) id : Bid id, insert only if you need to refresh the bid (one of) satoshi : amount of Bitcoin that the user wants to buy (one of) fiatAmount : amount of Fiat currency the user wants to spend to buy an equivalent Bitcoin amount currency : Fiat currency used to buy (EUR) The SDK will allow you to insert only one of satoshi or fiatAmount . You should never input both of them at the same time.","title":"Parameters"},{"location":"Old/exchange/Exchange.en/#returns_3","text":"An object CreatedBid containing: id : identifier required to refresh or finalize a bid currency : Fiat currency used to buy (EUR) satoshi : Satoshi amount of the request fiatAmount : Fiat amount (EUR) of the request serviceFees : Fees for the transaction in the selected currency expiration : Bid expiration timestamp. If expired please refresh the Bid. wiretransferInfo : necessary info to pay for the bid","title":"Returns"},{"location":"Old/exchange/Exchange.en/#code_2","text":"","title":"Code"},{"location":"Old/exchange/Exchange.en/#android_3","text":"// Buy request for 100\u20ac CreateOrRefreshBidParams params = new CreateOrRefreshBidParams(Currency.EUR, 100d); // Buy request for 1.000.000 satoshi CreateOrRefreshBidParams params = new CreateOrRefreshBidParams(Currency.EUR, 100000000l); // Bid refresh for 100\u20ac CreateOrRefreshBidParams params = new CreateOrRefreshBidParams( \"bididentifier\", Currency.EUR, 100d ); conio.exchangeService.createOrRefreshBid(params, result -> { result.analysis(bid -> { // CreatedBid }, error -> { // Exception }); });","title":"Android"},{"location":"Old/exchange/Exchange.en/#ios_3","text":"// Buy request for 50\u20ac let params = CreateOrRefreshBidParams(currency: .eur, fiatAmount: 50.0) // Buy request for 1.000.000 satoshi let params = CreateOrRefreshBidParams(currency: .eur, satoshi: 1000000) // Bid refresh for 100\u20ac let params = CreateOrRefreshBidParams(bidID: \"bididentifier\", currency: .eur, fiatAmount: 100.0) conio.exchangeService.createOrRefreshBid(params: params) { result in result.analysis(ifSuccess: { createdBid in // CreatedBid }, ifFailure: { error in // ServiceError }) });","title":"iOS"},{"location":"Old/exchange/Exchange.en/#bid-payment","text":"Once you have payed the Bid you can use the Purchase operation to receive the Bitcoin. You will have to submit a CryptoProof , that you can create in the same way as the one created during the signup. The only difference is the following DATA to concatenate (exactly in this order): [proofID, \"PAY_FOR_BID_WT\", bidID, userID, Expiration]","title":"Bid Payment"},{"location":"Old/exchange/Exchange.en/#parameters_3","text":"An object PurchaseParams containing: bidId : Bid identifier referring to the bid you want to finalize cryptoRequest : a BidCryptoRequest","title":"Parameters"},{"location":"Old/exchange/Exchange.en/#returns_4","text":"An object PurchaseResult containing: bidId : Bid identifier","title":"Returns"},{"location":"Old/exchange/Exchange.en/#errors","text":"INVALID_CRYPTO_PROOF Crypto proof is not valid INVALID_PAYMENT_METHOD Payment method is not valid UNSUPPORTED_PAYMENT_METHOD Payment method is not supported TRADING_LIMITS_EXCEEDED Bid exceed the maximum buy limit of the user TRADE_EXPIRED Bid is expired BID_ALREADY_PAID Bid was already paid BID_NOT_YET_PAID Bid has not been paid yet UNRECOVERABLE_BID Bid is in an error state FIAT_AMOUNT_TOO_LOW Fiat amount is lower than minimum limit","title":"Errors"},{"location":"Old/exchange/Exchange.en/#code_3","text":"","title":"Code"},{"location":"Old/exchange/Exchange.en/#android_4","text":"BidCryptoRequest bidCryptoRequest = createCryptoRequest() // Your implementation PurchaseParams params = new PurchaseParams(\"bidId\", bidCryptoRequest, card); conio.exchangeService.purchase(params, result -> { result.analysis(bid -> { // PurchaseResult }, error -> { // Exception }); });","title":"Android"},{"location":"Old/exchange/Exchange.en/#ios_4","text":"let cryptoRequest = createCryptoRequest() // Your implementation let params = PurchaseParams(bidID: \"bidID\", paymentCard: card, cryptoRequest: cryptoRequest) conio.exchangeService.purchase(params: params) { result in result.analysis(ifSuccess: { bid in // PurchaseResult }, ifFailure: { error in // ServiceError }) });","title":"iOS"},{"location":"Old/exchange/Exchange.en/#sell-bitcoin","text":"In order to buy Bitcoin you will have to perform 2 operations. The first one creates a Ask (a request to sell some BTC at some price). The second one will pay said Ask , by using the ask identifier. The SDK will sign the Bitcoin transaction that moves the bitcoins from the user wallet, returning the id of said completed Ask.","title":"Sell Bitcoin"},{"location":"Old/exchange/Exchange.en/#ask-creation","text":"You can create a CreatedAsk in Euro to sell an amount in Bitcoin for the equivalent of 50\u20ac, or a CreatedAsk in Euro to sell 100.000.000 satoshi. The request will return an Ask containing an ID . With this identifier you will be able to update the Ask to get fresh info about it. This will be necessary if the user takes some time (more than 2 minutes) from the Ask request to the actual sell.","title":"Ask Creation"},{"location":"Old/exchange/Exchange.en/#parameters_4","text":"(Optional) id : Ask id, insert only if you need to refresh the Ask (one of) satoshi : bitcoin amount the user wants to sell (one of) fiatAmount : amount of Fiat currency the user wants to receive when selling Bitcoin currency : Fiat currency to receive (EUR) The SDK will allow you to insert only one of satoshi or fiatAmount . You should never input both of them at the same time.","title":"Parameters"},{"location":"Old/exchange/Exchange.en/#returns_5","text":"An object CreatedAsk containing: id : identifier required to refresh or finalize a ask currency : Fiat currency to receive (EUR) satoshi : Satoshi amount of the request fiatAmount : Fiat amount (EUR) of the request serviceFees : Fees for the transaction in the selected currency expiration : Ask expiration timestamp. If expired please refresh the Ask. minerFees : Bitcoin network fees, used to pay for the inclusion of the transaction in the blockchain.","title":"Returns"},{"location":"Old/exchange/Exchange.en/#errors_1","text":"TRADING_LIMITS_EXCEEDED NOT_ENOUGH_BTC_AMOUNT NO_SUCH_SELLER (Internal selling error) NO_SUCH_WALLET (Internal wallet error)","title":"Errors"},{"location":"Old/exchange/Exchange.en/#ios_5","text":"// Sell request for 50\u20ac let params = CreateOrRefreshAskParams(currency: .eur, fiatAmount: 50.0) // Sell request for 100000000 satoshi let params = CreateOrRefreshAskParams(currency: .eur, satoshi: 100000000) // Refresh ask let params = CreateOrRefreshAskParams(askID: \"id\", currency: .eur, fiatAmount: 100.0) conio.exchangeService.createOrRefreshAsk(params: params) { result in result.analysis(ifSuccess: { createdAsk in // CreatedBid }, ifFailure: { error in // ServiceError }) }","title":"iOS"},{"location":"Old/exchange/Exchange.en/#android_5","text":"// Sell request for 50\u20ac CreateOrRefreshAskParams params = new CreateOrRefreshAskParams(Currency.EUR, 50d); // Refresh ask CreateOrRefreshAskParams params = new CreateOrRefreshAskParams(\"id\", Currency.EUR, 50d); conio.exchangeService.createOrRefreshAsk(params: params) { result in result.analysis(ifSuccess: { createdAsk in // CreatedAsk }, ifFailure: { error in // Exception }) });","title":"Android"},{"location":"Old/exchange/Exchange.en/#finalize-ask","text":"To finalize the sell you just need to input the ID of the CreatedAsk in the Sell operation.","title":"Finalize Ask"},{"location":"Old/exchange/Exchange.en/#parameters_5","text":"An object SellParams containing: askId : Ask identifier","title":"Parameters"},{"location":"Old/exchange/Exchange.en/#returns_6","text":"An object SellResult containing: askId : Ask identifier","title":"Returns"},{"location":"Old/exchange/Exchange.en/#errors_2","text":"TRADING_LIMITS_EXCEEDED TRADE_EXPIRED UNRECOVERABLE_ASK ASK_ALREADY_PAID NOT_ENOUGH_BTC_AMOUNT_E DUST_ASK (Bitcoin amount is too low) FIAT_AMOUNT_TOO_LOW","title":"Errors"},{"location":"Old/exchange/Exchange.en/#code_4","text":"","title":"Code"},{"location":"Old/exchange/Exchange.en/#ios_6","text":"let params = SellParams(askID: askID) conio.exchangeService.sell(params: params) { result in result.analysis(ifSuccess: { sellResult in // SellResult }, ifFailure: { error in // ServiceError }) }","title":"iOS"},{"location":"Old/exchange/Exchange.en/#android_6","text":"SellParams sellParams = new SellParams(\"askId\"); conio.exchangeService.sell(params: params) { result in result.analysis(ifSuccess: { sellResult in // SellResult }, ifFailure: { error in // Exception }) });","title":"Android"},{"location":"Old/exchange/Exchange/","text":"Operazioni sul mercato Prezzo attuale del Bitcoin \u00c8 possibile recuperare il miglior prezzo di acquisto e di vendita attuale del bitcoin, specificando la valuta nel quale lo si vuole ottenere. Inoltre, l'SDK offre la possibilit\u00e0 di convertire un ammontare in bitcoin nella valuta specificata. Metodo exchangeService.currentPrice Parametri Un oggetto di tipo CurrentPriceParams contenente: currency : di tipo Currency , la valuta in cui si vuole ottenere il prezzo; @Opzionale cryptoAmount : di tipo long , l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi) che si vuole convertire nella valuta indicata. Risposta Un CurrentPrice contenente: buyFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il prezzo di acquisto, calcolato nella valuta indicata tramite il campo currency ; sellFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il prezzo di vendita, calcolato nella valuta indicata tramite il campo currency . Codice Android // Example 1: get current price CurrentPriceParams params = new CurrentPriceParams(Currency.EUR); // Example 2: get current price of a specified amount CurrentPriceParams params = new CurrentPriceParams(Currency.EUR, 100000000); conio.exchangeService.currentPrice(params) .asCallback(result -> result.analysis( currentPrice -> { /* Handle CurrentPrice */ }, error -> { /* ... */ } )); iOS // Recupero del prezzo attuale let params = CurrentPriceParams(currency: .eur) // Conversione di 50.000.000 satoshi (0,5 BTC) in euro let params = CurrentPriceParams(currency: .eur, satoshiAmount: 50_000_000) let consumer = conio.exchangeService.currentPrice(params: params) consumer.asCallback { result in switch result { case .success(let prices): // CurrentPrice case .failure(let error): // Operation Error } } Prezzo storico del Bitcoin \u00c8 possibile recuperare il prezzo storico del Bitcoin selezionando una finestra temporale di riferimento. Metodo exchangeService.historicalPrices Parametri Un oggetto di tipo HistoricalPricesParams contenente: currency : di tipo Currency , la valuta in cui si vuole ottenere il prezzo; timeFrame : di tipo TimeFrame , la finestra temporale di riferimento; @Default(24h) interval : di tipo long , l'intervallo che si vuole porre tra i prezzi restituiti; Risposta Un HistoricalPrices contenente: prices : di tipo List<PricePoint> , la lista dei prezzi del bitcoin nella finestra temporale specificata; analytics : di tipo PriceAnalytics , contenente: deltaFiat : di tipo Decimal (iOS) / BigDecimal (Android), la variazione in valuta del prezzo del Bitcoin dall'inizio del periodo di riferimento; deltaPercentage : la variazione in percentuale del prezzo del Bitcoin dall'inizio del periodo di riferimento; trend : di tipo PriceTrend , un enumerato che rappresenta se il prezzo del Bitcoin, dall'inizio del periodo di riferimento, \u00e8 cresciuto, \u00e8 diminuito o \u00e8 rimasto stagnante; Codice Android // Example 1: get last month prices with default interval (1 day) HistoricalPricesParams params = new HistoricalPricesParams( Currency.EUR, TimeFrame.lastMonth() ); // Example 2: get prices from 16th April 2018 to 16th April 2019 with 1 week interval HistoricalPricesParams params = new HistoricalPricesParams( Currency.EUR, new TimeFrame(1523885446000L, 1563465540000L), 604800000 ); conio.exchangeService.historicalPrices(params) .asCallback(result -> result.analysis( prices -> { /* Handle HistoricalPrices */ }, error -> { /* ... */ } )); iOS // Prezzo dal 16 aprile 2019 al 16 aprile 2018 // Intervallo standard: 1 giorno let params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000) // Prezzo dal 16 aprile 2019 al 16 aprile 2018 // Intervallo selezionato: 1 settimana let params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000, interval: 604800000) let consumer = conio.exchangeService.historicalPrices(params: params) consumer.asCallback { result in switch result { case .success(let prices): // HistoricalPrices case .failure(let error): // Operation Error } } Recupero informazioni di trading Recupero delle informazioni riassuntive delle operazioni di compravendita eseguite dall'utente. Metodo exchangeService.tradingInfo Parametri Un oggetto di tipo TradingInfoParams , contenente: currency : di tipo Currency , la valuta sulla quale si vuole ottenere la risposta; Risposta weightedBidBalance : di tipo Decimal (iOS) / BigDecimal (Android), controvalore investito, calcolato come la media pesata del valore (in valuta fiat) degli acquisti moltiplicato per il bilancio attuale; currency : di tipo Currency , la valuta di riferimento della risposta; bidSummary : di tipo TradingSummary , contenente un riepilogo delle operazioni di acquisto; askSummary : di tipo TradingSummary , contenente un riepilogo delle operazioni di vendita; Le propriet\u00e0 di tipo TradingSummary contengono: operationsCount : di tipo intero , il numero totale di operazioni; totalFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), l'ammontare totale delle operazioni. Codice Android TradingInfoParams params = new TradingInfoParams(Currency.EUR); conio.exchangeService.tradingInfo(params) .asCallback(result -> result.analysis( info -> { /* Handle TradingInfo */ }, error -> { /* ... */ } )); let consumer = conio.exchangeService.tradingInfo() consumer.asCallback { result in switch result { case .success(let info): // Handle TradingInfo case .failure(let error): // Operation Error } } Recupero commissioni di trading Per recuperare le informazioni delle commissioni sulle operazioni di compravendita. Metodo exchangeService.tradingFees Parametri Un oggetto di tipo TradingFeesParams , contenente: currency : di tipo Currency , la valuta sulla quale si vuole ottenere la risposta; Risposta Un oggetto di tipo TradingFees , contenente: currency : di tipo Currency , la valuta di riferimento della risposta; bidServiceFees : di tipo List<ServiceFee> , contenente la lista delle fascie di commissioni per le operazioni di acquisto; askServiceFees : di tipo List<ServiceFee> , contenente la lista delle fascie di commissioni per le operazioni di vendita. Le propriet\u00e0 di tipo ServiceFee contengono: rangeFrom : di tipo Decimal (iOS) / BigDecimal (Android), il valore (in valuta fiat) dal quale viene applicata; @Opzionale percentage : di tipo double , la percentuale di commissione rispetto al valore del operazione, nulla se la ServiceFee rappresenta una commissione assoluta; @Opzionale fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), la commisione assuluta applicata su ogni operazione, nulla se la ServiceFee rappresenta una commissione in percentuale. Codice Android TradingFeesParams params = new TradingFeesParams(Currency.EUR); conio.exchangeService.tradingFees(params) .asCallback(result -> result.analysis( fees -> { /* Handle TradingFees */ }, error -> { /* ... */ } )); let consumer = conio.exchangeService.tradingFees() consumer.asCallback { result in switch result { case .success(let fees): // Handle TradingFees case .failure(let error): // Operation Error } } Recupero limiti di trading Per recuperare i limiti di compravendita associati ad un utente, assegnati in fase di signup tramite il campo userLevel . Metodo exchangeService.tradingLimits Risposta Un oggetto di tipo AllTradingLimits , contenente: buyLimits : di tipo TradingLimits , contenenti informazioni sui limiti di acquisto; sellLimits : di tipo TradingLimits , contenenti informazioni sui limiti di vendita. Le propriet\u00e0 di tipo TradingLimits contengono: minFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il limite minimo attualmente a disposizione; maxFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il limite massimo attualmente a disposizione; allLimits : di tipo List<Limit> , una lista di limiti, ciascuno conterr\u00e0 la rispettiva tipologia ( DAILY , MONTHLY , YEARLY ) ed il valore per ciascuno di essi; currentLimits : di tipo List<Limit> , il valore residuo per ciascuno dei limiti contenuti nell'oggetto allLimits del punto precedente. Codice Android conio.exchangeService.tradingLimits() .asCallback(result -> result.analysis( limits -> { /* Handle AllTradingLimits */ }, error -> { /* ... */ } )); iOS let consumer = conio.exchangeService.tradingLimits() consumer.asCallback { result in switch result { case .success(let fees): // Handle AllTradingLimits case .failure(let error): // Operation Error } } Acquisto di Bitcoin Per poter acquistare dei Bitcoin \u00e8 necessario effettuare due operazioni. La prima \u00e8 quella di creazione di una Bid , ovvero di una richiesta di acquisto di una determinata somma di Bitcoin ad un certo prezzo. All'interno della Bid si troveranno le WiretransferInfo che dovranno essere usate dal client per effettuare il pagamento. Infine si dovr\u00e0 utilizzare la seconda operazione verso Conio per comunicare l'avvenuto pagamento della Bid allegando anche una BidCryptoRequest , generata client side, per testimoniare la legittimit\u00e0 dell'operazione. Creazione della Bid Una Bid si crea specificando la valuta che si intende utilizzare per la transazione e l'importo, o in satoshi o in valuta corrente. Ad esempio, sar\u00e0 quindi possibile richiedere una Bid per l'acquisto di 150\u20ac di Bitcoin o una Bid per l'acquisto di 100.000.000 satoshi. Una volta inviata la richiesta, si otterr\u00e0 una CreatedBid contenente, tra le altre informazioni un bidId . Con questo identificativo sar\u00e0 possibile aggiornare la richiesta di Bid per rimandarne la scadenza e per ottenere le informazioni sul tasso di cambio pi\u00f9 aggiornate. Questo scenario \u00e8 utile nei casi in cui tra la richiesta della Bid e l'effettiva azione dell'utente passi del tempo che renderebbe il tasso di cambio obsoleto. Metodo exchangeService.createOrRefreshBid Parametri Un oggetto di tipo CreateOrRefreshBidParams , costruibile tramite i metodi factory CreateOrRefreshBidParams.fromFiat o CreateOrRefreshBidParams.fromCrypto che richiedono: currency : di tipo Currency , la valuta dell'operazione; amount : di tipo long per .fromCrypto o Decimal (iOS) / BigDecimal (Android) per .fromFiat , l'ammontare, a seconda del metodo usato, in satoshi o nella valuta scelta che si vuole acquistare; @Opzionale bidId : di tipo String , l'id della bid, da valorizzare solo in caso di refresh della bid stessa. Risposta Un oggetto di tipo CreatedBid che contiene: id : di tipo String , l'id utile al refresh o alla finalizzazione della bid; currency : di tipo Currency , la valuta dell'operazione; cryptoAmount : di tipo long , l'ammontare in satoshi della richiesta d'acquisto; fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), l'ammontare in valuta corrente della richiesta d'acquisto al netto delle commissioni; grossFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), l'ammontare in valuta corrente della richiesta d'acquisto comprensivo delle commissioni; serviceFee : di tipo Decimal (iOS) / BigDecimal (Android), le commissioni di servizio per la transazione, espresse nella currency di riferimento expiration : di tipo long , il timestamp di scadenza della richiesta di pagamento. Se la bid scade sar\u00e0 necessario aggiornarla per proseguire wireTransferInfo : di tipo WireTransferInfo , le informazioni necessarie per procedere al pagamento della Bid tramite bonifico. Codice Android // Example 1: \u20ac200 bid CreateOrRefreshBidParams params = CreateOrRefreshBidParams.fromFiat(Currency.EUR, 20000); // Example 2: 1.000.000.000 satoshi bid CreateOrRefreshBidParams params = CreateOrRefreshBidParams.fromCrypto(Currency.EUR, 1000000000); conio.exchangeService.createOrRefreshBid(params) .asCallback(result -> result.analysis( bid -> { /* Handle CreatedBid */ }, error -> { /* ... */ } )); iOS // Richiesta d'acquisto per 50\u20ac let params = CreateOrRefreshBidParams(currency: .eur, fiatAmount: 50.0) // Richiesta d'acquisto per 1.000.000 satoshi let params = CreateOrRefreshBidParams(currency: .eur, satoshi: 1000000) // Aggiornamento di una richiesta d'acquisto per 100\u20ac let params = CreateOrRefreshBidParams(bidID: \"bididentifier\", currency: .eur, fiatAmount: 100.0) let consumer = conio.exchangeService.createOrRefreshBid(params: params) consumer.asCallback { result in switch result { case .success(let bid): // Handle CreatedBid case .failure(let error): // Operation Error } } Utilizzo della Bid (pagamento) Una volta effettuato il pagamento tramite bonifico si dovr\u00e0 usare l'operazione purchase per comunicare a Conio l'avvenuto pagamento. Questa operazione richieder\u00e0 una BidCryptoRequest . Metodo exchangeService.purchase Parametri Un oggetto di tipo PurchaseParams contenente: bidId : d tipo String , l'id della Bid da pagare cryptoRequest : di tipo BidCryptoRequest , configurabile come descritto nell'apposita sezione Risposta Un oggetto di tipo Success , che conferma l'avvenuta operazione. Errori INVALID_CRYPTO_PROOF La crypto proof non \u00e8 valida INVALID_PAYMENT_METHOD Il metodo di pagamento non \u00e8 valido UNSUPPORTED_PAYMENT_METHOD Il metodo di pagamento non \u00e8 supportato TRADING_LIMITS_EXCEEDED La bid viola i limiti massimi di acquisto dell'utente TRADE_EXPIRED La bid \u00e8 scaduta BID_ALREADY_PAID La bid \u00e8 gi\u00e0 stata pagata BID_NOT_YET_PAID La bid non \u00e8 ancora stata pagata UNRECOVERABLE_BID La bid \u00e8 in errore FIAT_AMOUNT_TOO_LOW L'importo in Fiat \u00e8 inferiore al limite minimo Codice Android PurchaseParams params = new PurchaseParams(\"bidId\", bidCryptoRequest); conio.exchangeService.purchase(params) .asCallback(result -> result.analysis( success -> { /* Handle Success */ }, error -> { /* ... */ } )); iOS let params = PurchaseParams(bidId: \"bidId\", cryptoRequest: bidCryptoRequest) let consumer = conio.exchangeService.purchase(params: params) consumer.asCallback { result in switch result { case .success: // Handle Success case .failure(let error): // Operation Error } } Vendita di Bitcoin Per poter vendere dei Bitcoin \u00e8 necessario effettuare due operazioni. La prima \u00e8 quella di creazione di una Ask , ovvero di una richiesta di vendita di una determinata somma di Bitcoin ad un certo prezzo. Si procede poi con il pagamento di tale Ask , passando l' askId e allegando anche una AskCryptoRequest , generata client side, per testimoniare la legittimit\u00e0 dell'operazione. L'SDK firmer\u00e0 la transazione che sposter\u00e0 i Bitcoin dal wallet dell'utente, restituendo alla fine l'id della Ask completata. Creazione della Ask Per richiedere una Ask si dovr\u00e0 procedere analogamente a quanto visto per la Bid. Sar\u00e0 quindi possibile richiedere una CreatedAsk per la vendita di 150\u20ac o una per la vendita di 100.000.000 satoshi. Una volta inviata la richiesta, si otterr\u00e0 una CreatedAsk contenente, tra le altre informazioni un askId . Con questo identificativo sar\u00e0 possibile aggiornare la richiesta di Ask per rimandarne la scadenza e per ottenere le informazioni sul tasso di cambio pi\u00f9 aggiornate. Questo scenario \u00e8 utile nei casi in cui tra la richiesta della Ask e l'effettiva azione dell'utente passi del tempo che renderebbe il tasso di cambio obsoleto. Metodo exchangeService.createOrRefreshAsk Parametri Un oggetto di tipo CreateOrRefreshAskParams , costruibile tramite i metodi factory CreateOrRefreshAskParams.fromFiat , CreateOrRefreshAskParams.fromCrypto o CreateOrRefreshAskParams.withAll che richiedono: currency : di tipo Currency , la valuta dell'operazione; @Opzionale cryptoAmount : di tipo long per .fromCrypto , l'ammontare in satoshi che si vuole vendere; @Opzionale fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android) per .fromFiat , l'ammontare nella valuta scelta che si vuole vendere; @Opzionale askId : di tipo String , l'id della ask, da valorizzare solo in caso di refresh della ask stessa. Tramite il metodo factory CreateOrRefreshAskParams.withAll \u00e8 possibile richiedere l'importo massimo vendibile. Tale importo sar\u00e0 sogetto, oltre che alla disponibilit\u00e0 del utente, anche ai suoi limiti di vendita. Risposta Un oggetto di tipo CreatedAsk che contiene: askId : di tipo String , l'id utile al refresh o alla finalizzazione della ask; currency : di tipo Currency , la valuta dell'operazione; cryptoAmount : di tipo long , l'ammontare in satoshi della richiesta d'acquisto fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), l'ammontare in valuta corrente della richiesta d'acquisto; serviceFee : di tipo Decimal (iOS) / BigDecimal (Android), le commissioni di servizio per la transazione, espresse nella currency di riferimento; miningFee : di tipo long , le commissioni per scrivere la transazione in blockchain, espresse in satoshi; expiration : di tipo long , lo Unix Timestamp di scadenza della richiesta di pagamento. Se la bid scade sar\u00e0 necessario aggiornarla per proseguire Errori TRADING_LIMITS_EXCEEDED L'utente ha 0 Eur di limiti residui NOT_ENOUGH_BTC_AMOUNT solo se non ha btc L'utente non ha alcun bitcoin NO_SUCH_SELLER Errore interno del sottosistema di vendita NO_SUCH_WALLET Errore interno del sottosistema di wallet Android // Example 1: \u20ac200 ask CreateOrRefreshAskParams params = CreateOrRefreshAskParams.fromFiat(Currency.EUR, BigDecimal(\"200\")); // Example 2: 1.000.000.000 satoshi ask CreateOrRefreshAskParams params = CreateOrRefreshAskParams.fromCrypto(Currency.EUR, 1000000000); conio.exchangeService.createOrRefreshAsk(params) .asCallback(result -> result.analysis( ask -> { /* Handle CreatedAsk */ }, error -> { /* ... */ } )); iOS // Richiesta di vendita per 50\u20ac let params = CreateOrRefreshAskParams(currency: .eur, fiatAmount: 50.0) // Richiesta di vendita per 100000000 satoshi let params = CreateOrRefreshAskParams(currency: .eur, satoshi: 100000000) // Aggiornamento del valore di una Ask esistente let params = CreateOrRefreshAskParams(askID: \"id\", currency: .eur, fiatAmount: 100.0) conio.exchangeService.createOrRefreshAsk(params: params).asCallback { result in switch result { case .success(let createdAsk): // CreatedBid case .failure(let error): // Operation Error } } Utilizzo della Ask Ottenuta la Ask da utilizzare \u00e8 possibile procedere con la finalizzazione della vendita. Per effettuare questa operazione bisogner\u00e0 passare l'ID della CreatedAsk alla Sell operation, insieme alla AskCryptoRequest . Metodo exchangeService.sell Parametri Un oggetto di tipo CryptoSellParams contenente: askId : di tipo String , l'id della Ask cryptoRequest : di tipo AskCryptoRequest , configurabile come descritto nell'apposita sezione Risposta Un oggetto di tipo Success che conferma l'avvenuta operazione. Errori TRADING_LIMITS_EXCEEDED La ask viola i limiti massimi di acquisto dell'utente TRADE_EXPIRED La ask \u00e8 scaduta UNRECOVERABLE_ASK La ask \u00e8 in errore ASK_ALREADY_PAID La ask \u00e8 gi\u00e0 stata pagata NOT_ENOUGH_BTC_AMOUNT_E Bitcoin disponibili non sufficienti DUST_ASK Importo in Bitcoin troppo piccolo FIAT_AMOUNT_TOO_LOW Importo in Eur troppo basso Codice Android CryptoSellParams params = new CryptoSellParams(\"askId\", askCryptoRequest); conio.exchangeService.sell(params) .asCallback(result -> result.analysis( success -> { /* Handle Success */ }, error -> { /* ... */ } )); iOS let params = CryptoSellParams(askId: askId, cryptoRequest: askCryptoRequest) conio.exchangeService.createOrRefreshAsk(params: params).asCallback { result in switch result { case .success: // Handle Succes case .failure(let error): // Operation Error } }","title":"Operazioni sul mercato"},{"location":"Old/exchange/Exchange/#operazioni-sul-mercato","text":"","title":"Operazioni sul mercato"},{"location":"Old/exchange/Exchange/#prezzo-attuale-del-bitcoin","text":"\u00c8 possibile recuperare il miglior prezzo di acquisto e di vendita attuale del bitcoin, specificando la valuta nel quale lo si vuole ottenere. Inoltre, l'SDK offre la possibilit\u00e0 di convertire un ammontare in bitcoin nella valuta specificata.","title":"Prezzo attuale del Bitcoin"},{"location":"Old/exchange/Exchange/#metodo","text":"exchangeService.currentPrice","title":"Metodo"},{"location":"Old/exchange/Exchange/#parametri","text":"Un oggetto di tipo CurrentPriceParams contenente: currency : di tipo Currency , la valuta in cui si vuole ottenere il prezzo; @Opzionale cryptoAmount : di tipo long , l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi) che si vuole convertire nella valuta indicata.","title":"Parametri"},{"location":"Old/exchange/Exchange/#risposta","text":"Un CurrentPrice contenente: buyFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il prezzo di acquisto, calcolato nella valuta indicata tramite il campo currency ; sellFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il prezzo di vendita, calcolato nella valuta indicata tramite il campo currency .","title":"Risposta"},{"location":"Old/exchange/Exchange/#codice","text":"","title":"Codice"},{"location":"Old/exchange/Exchange/#android","text":"// Example 1: get current price CurrentPriceParams params = new CurrentPriceParams(Currency.EUR); // Example 2: get current price of a specified amount CurrentPriceParams params = new CurrentPriceParams(Currency.EUR, 100000000); conio.exchangeService.currentPrice(params) .asCallback(result -> result.analysis( currentPrice -> { /* Handle CurrentPrice */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/exchange/Exchange/#ios","text":"// Recupero del prezzo attuale let params = CurrentPriceParams(currency: .eur) // Conversione di 50.000.000 satoshi (0,5 BTC) in euro let params = CurrentPriceParams(currency: .eur, satoshiAmount: 50_000_000) let consumer = conio.exchangeService.currentPrice(params: params) consumer.asCallback { result in switch result { case .success(let prices): // CurrentPrice case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/exchange/Exchange/#prezzo-storico-del-bitcoin","text":"\u00c8 possibile recuperare il prezzo storico del Bitcoin selezionando una finestra temporale di riferimento.","title":"Prezzo storico del Bitcoin"},{"location":"Old/exchange/Exchange/#metodo_1","text":"exchangeService.historicalPrices","title":"Metodo"},{"location":"Old/exchange/Exchange/#parametri_1","text":"Un oggetto di tipo HistoricalPricesParams contenente: currency : di tipo Currency , la valuta in cui si vuole ottenere il prezzo; timeFrame : di tipo TimeFrame , la finestra temporale di riferimento; @Default(24h) interval : di tipo long , l'intervallo che si vuole porre tra i prezzi restituiti;","title":"Parametri"},{"location":"Old/exchange/Exchange/#risposta_1","text":"Un HistoricalPrices contenente: prices : di tipo List<PricePoint> , la lista dei prezzi del bitcoin nella finestra temporale specificata; analytics : di tipo PriceAnalytics , contenente: deltaFiat : di tipo Decimal (iOS) / BigDecimal (Android), la variazione in valuta del prezzo del Bitcoin dall'inizio del periodo di riferimento; deltaPercentage : la variazione in percentuale del prezzo del Bitcoin dall'inizio del periodo di riferimento; trend : di tipo PriceTrend , un enumerato che rappresenta se il prezzo del Bitcoin, dall'inizio del periodo di riferimento, \u00e8 cresciuto, \u00e8 diminuito o \u00e8 rimasto stagnante;","title":"Risposta"},{"location":"Old/exchange/Exchange/#codice_1","text":"","title":"Codice"},{"location":"Old/exchange/Exchange/#android_1","text":"// Example 1: get last month prices with default interval (1 day) HistoricalPricesParams params = new HistoricalPricesParams( Currency.EUR, TimeFrame.lastMonth() ); // Example 2: get prices from 16th April 2018 to 16th April 2019 with 1 week interval HistoricalPricesParams params = new HistoricalPricesParams( Currency.EUR, new TimeFrame(1523885446000L, 1563465540000L), 604800000 ); conio.exchangeService.historicalPrices(params) .asCallback(result -> result.analysis( prices -> { /* Handle HistoricalPrices */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/exchange/Exchange/#ios_1","text":"// Prezzo dal 16 aprile 2019 al 16 aprile 2018 // Intervallo standard: 1 giorno let params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000) // Prezzo dal 16 aprile 2019 al 16 aprile 2018 // Intervallo selezionato: 1 settimana let params = HistoricalPriceParams(currency: .eur, startTimestamp: 1523885446000, endTimestamp: 1563465540000, interval: 604800000) let consumer = conio.exchangeService.historicalPrices(params: params) consumer.asCallback { result in switch result { case .success(let prices): // HistoricalPrices case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/exchange/Exchange/#recupero-informazioni-di-trading","text":"Recupero delle informazioni riassuntive delle operazioni di compravendita eseguite dall'utente.","title":"Recupero informazioni di trading"},{"location":"Old/exchange/Exchange/#metodo_2","text":"exchangeService.tradingInfo","title":"Metodo"},{"location":"Old/exchange/Exchange/#parametri_2","text":"Un oggetto di tipo TradingInfoParams , contenente: currency : di tipo Currency , la valuta sulla quale si vuole ottenere la risposta;","title":"Parametri"},{"location":"Old/exchange/Exchange/#risposta_2","text":"weightedBidBalance : di tipo Decimal (iOS) / BigDecimal (Android), controvalore investito, calcolato come la media pesata del valore (in valuta fiat) degli acquisti moltiplicato per il bilancio attuale; currency : di tipo Currency , la valuta di riferimento della risposta; bidSummary : di tipo TradingSummary , contenente un riepilogo delle operazioni di acquisto; askSummary : di tipo TradingSummary , contenente un riepilogo delle operazioni di vendita; Le propriet\u00e0 di tipo TradingSummary contengono: operationsCount : di tipo intero , il numero totale di operazioni; totalFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), l'ammontare totale delle operazioni.","title":"Risposta"},{"location":"Old/exchange/Exchange/#codice_2","text":"","title":"Codice"},{"location":"Old/exchange/Exchange/#android_2","text":"TradingInfoParams params = new TradingInfoParams(Currency.EUR); conio.exchangeService.tradingInfo(params) .asCallback(result -> result.analysis( info -> { /* Handle TradingInfo */ }, error -> { /* ... */ } )); let consumer = conio.exchangeService.tradingInfo() consumer.asCallback { result in switch result { case .success(let info): // Handle TradingInfo case .failure(let error): // Operation Error } }","title":"Android"},{"location":"Old/exchange/Exchange/#recupero-commissioni-di-trading","text":"Per recuperare le informazioni delle commissioni sulle operazioni di compravendita.","title":"Recupero commissioni di trading"},{"location":"Old/exchange/Exchange/#metodo_3","text":"exchangeService.tradingFees","title":"Metodo"},{"location":"Old/exchange/Exchange/#parametri_3","text":"Un oggetto di tipo TradingFeesParams , contenente: currency : di tipo Currency , la valuta sulla quale si vuole ottenere la risposta;","title":"Parametri"},{"location":"Old/exchange/Exchange/#risposta_3","text":"Un oggetto di tipo TradingFees , contenente: currency : di tipo Currency , la valuta di riferimento della risposta; bidServiceFees : di tipo List<ServiceFee> , contenente la lista delle fascie di commissioni per le operazioni di acquisto; askServiceFees : di tipo List<ServiceFee> , contenente la lista delle fascie di commissioni per le operazioni di vendita. Le propriet\u00e0 di tipo ServiceFee contengono: rangeFrom : di tipo Decimal (iOS) / BigDecimal (Android), il valore (in valuta fiat) dal quale viene applicata; @Opzionale percentage : di tipo double , la percentuale di commissione rispetto al valore del operazione, nulla se la ServiceFee rappresenta una commissione assoluta; @Opzionale fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), la commisione assuluta applicata su ogni operazione, nulla se la ServiceFee rappresenta una commissione in percentuale.","title":"Risposta"},{"location":"Old/exchange/Exchange/#codice_3","text":"","title":"Codice"},{"location":"Old/exchange/Exchange/#android_3","text":"TradingFeesParams params = new TradingFeesParams(Currency.EUR); conio.exchangeService.tradingFees(params) .asCallback(result -> result.analysis( fees -> { /* Handle TradingFees */ }, error -> { /* ... */ } )); let consumer = conio.exchangeService.tradingFees() consumer.asCallback { result in switch result { case .success(let fees): // Handle TradingFees case .failure(let error): // Operation Error } }","title":"Android"},{"location":"Old/exchange/Exchange/#recupero-limiti-di-trading","text":"Per recuperare i limiti di compravendita associati ad un utente, assegnati in fase di signup tramite il campo userLevel .","title":"Recupero limiti di trading"},{"location":"Old/exchange/Exchange/#metodo_4","text":"exchangeService.tradingLimits","title":"Metodo"},{"location":"Old/exchange/Exchange/#risposta_4","text":"Un oggetto di tipo AllTradingLimits , contenente: buyLimits : di tipo TradingLimits , contenenti informazioni sui limiti di acquisto; sellLimits : di tipo TradingLimits , contenenti informazioni sui limiti di vendita. Le propriet\u00e0 di tipo TradingLimits contengono: minFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il limite minimo attualmente a disposizione; maxFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il limite massimo attualmente a disposizione; allLimits : di tipo List<Limit> , una lista di limiti, ciascuno conterr\u00e0 la rispettiva tipologia ( DAILY , MONTHLY , YEARLY ) ed il valore per ciascuno di essi; currentLimits : di tipo List<Limit> , il valore residuo per ciascuno dei limiti contenuti nell'oggetto allLimits del punto precedente.","title":"Risposta"},{"location":"Old/exchange/Exchange/#codice_4","text":"","title":"Codice"},{"location":"Old/exchange/Exchange/#android_4","text":"conio.exchangeService.tradingLimits() .asCallback(result -> result.analysis( limits -> { /* Handle AllTradingLimits */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/exchange/Exchange/#ios_2","text":"let consumer = conio.exchangeService.tradingLimits() consumer.asCallback { result in switch result { case .success(let fees): // Handle AllTradingLimits case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/exchange/Exchange/#acquisto-di-bitcoin","text":"Per poter acquistare dei Bitcoin \u00e8 necessario effettuare due operazioni. La prima \u00e8 quella di creazione di una Bid , ovvero di una richiesta di acquisto di una determinata somma di Bitcoin ad un certo prezzo. All'interno della Bid si troveranno le WiretransferInfo che dovranno essere usate dal client per effettuare il pagamento. Infine si dovr\u00e0 utilizzare la seconda operazione verso Conio per comunicare l'avvenuto pagamento della Bid allegando anche una BidCryptoRequest , generata client side, per testimoniare la legittimit\u00e0 dell'operazione.","title":"Acquisto di Bitcoin"},{"location":"Old/exchange/Exchange/#creazione-della-bid","text":"Una Bid si crea specificando la valuta che si intende utilizzare per la transazione e l'importo, o in satoshi o in valuta corrente. Ad esempio, sar\u00e0 quindi possibile richiedere una Bid per l'acquisto di 150\u20ac di Bitcoin o una Bid per l'acquisto di 100.000.000 satoshi. Una volta inviata la richiesta, si otterr\u00e0 una CreatedBid contenente, tra le altre informazioni un bidId . Con questo identificativo sar\u00e0 possibile aggiornare la richiesta di Bid per rimandarne la scadenza e per ottenere le informazioni sul tasso di cambio pi\u00f9 aggiornate. Questo scenario \u00e8 utile nei casi in cui tra la richiesta della Bid e l'effettiva azione dell'utente passi del tempo che renderebbe il tasso di cambio obsoleto.","title":"Creazione della Bid"},{"location":"Old/exchange/Exchange/#metodo_5","text":"exchangeService.createOrRefreshBid","title":"Metodo"},{"location":"Old/exchange/Exchange/#parametri_4","text":"Un oggetto di tipo CreateOrRefreshBidParams , costruibile tramite i metodi factory CreateOrRefreshBidParams.fromFiat o CreateOrRefreshBidParams.fromCrypto che richiedono: currency : di tipo Currency , la valuta dell'operazione; amount : di tipo long per .fromCrypto o Decimal (iOS) / BigDecimal (Android) per .fromFiat , l'ammontare, a seconda del metodo usato, in satoshi o nella valuta scelta che si vuole acquistare; @Opzionale bidId : di tipo String , l'id della bid, da valorizzare solo in caso di refresh della bid stessa.","title":"Parametri"},{"location":"Old/exchange/Exchange/#risposta_5","text":"Un oggetto di tipo CreatedBid che contiene: id : di tipo String , l'id utile al refresh o alla finalizzazione della bid; currency : di tipo Currency , la valuta dell'operazione; cryptoAmount : di tipo long , l'ammontare in satoshi della richiesta d'acquisto; fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), l'ammontare in valuta corrente della richiesta d'acquisto al netto delle commissioni; grossFiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), l'ammontare in valuta corrente della richiesta d'acquisto comprensivo delle commissioni; serviceFee : di tipo Decimal (iOS) / BigDecimal (Android), le commissioni di servizio per la transazione, espresse nella currency di riferimento expiration : di tipo long , il timestamp di scadenza della richiesta di pagamento. Se la bid scade sar\u00e0 necessario aggiornarla per proseguire wireTransferInfo : di tipo WireTransferInfo , le informazioni necessarie per procedere al pagamento della Bid tramite bonifico.","title":"Risposta"},{"location":"Old/exchange/Exchange/#codice_5","text":"","title":"Codice"},{"location":"Old/exchange/Exchange/#android_5","text":"// Example 1: \u20ac200 bid CreateOrRefreshBidParams params = CreateOrRefreshBidParams.fromFiat(Currency.EUR, 20000); // Example 2: 1.000.000.000 satoshi bid CreateOrRefreshBidParams params = CreateOrRefreshBidParams.fromCrypto(Currency.EUR, 1000000000); conio.exchangeService.createOrRefreshBid(params) .asCallback(result -> result.analysis( bid -> { /* Handle CreatedBid */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/exchange/Exchange/#ios_3","text":"// Richiesta d'acquisto per 50\u20ac let params = CreateOrRefreshBidParams(currency: .eur, fiatAmount: 50.0) // Richiesta d'acquisto per 1.000.000 satoshi let params = CreateOrRefreshBidParams(currency: .eur, satoshi: 1000000) // Aggiornamento di una richiesta d'acquisto per 100\u20ac let params = CreateOrRefreshBidParams(bidID: \"bididentifier\", currency: .eur, fiatAmount: 100.0) let consumer = conio.exchangeService.createOrRefreshBid(params: params) consumer.asCallback { result in switch result { case .success(let bid): // Handle CreatedBid case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/exchange/Exchange/#utilizzo-della-bid-pagamento","text":"Una volta effettuato il pagamento tramite bonifico si dovr\u00e0 usare l'operazione purchase per comunicare a Conio l'avvenuto pagamento. Questa operazione richieder\u00e0 una BidCryptoRequest .","title":"Utilizzo della Bid (pagamento)"},{"location":"Old/exchange/Exchange/#metodo_6","text":"exchangeService.purchase","title":"Metodo"},{"location":"Old/exchange/Exchange/#parametri_5","text":"Un oggetto di tipo PurchaseParams contenente: bidId : d tipo String , l'id della Bid da pagare cryptoRequest : di tipo BidCryptoRequest , configurabile come descritto nell'apposita sezione","title":"Parametri"},{"location":"Old/exchange/Exchange/#risposta_6","text":"Un oggetto di tipo Success , che conferma l'avvenuta operazione.","title":"Risposta"},{"location":"Old/exchange/Exchange/#errori","text":"INVALID_CRYPTO_PROOF La crypto proof non \u00e8 valida INVALID_PAYMENT_METHOD Il metodo di pagamento non \u00e8 valido UNSUPPORTED_PAYMENT_METHOD Il metodo di pagamento non \u00e8 supportato TRADING_LIMITS_EXCEEDED La bid viola i limiti massimi di acquisto dell'utente TRADE_EXPIRED La bid \u00e8 scaduta BID_ALREADY_PAID La bid \u00e8 gi\u00e0 stata pagata BID_NOT_YET_PAID La bid non \u00e8 ancora stata pagata UNRECOVERABLE_BID La bid \u00e8 in errore FIAT_AMOUNT_TOO_LOW L'importo in Fiat \u00e8 inferiore al limite minimo","title":"Errori"},{"location":"Old/exchange/Exchange/#codice_6","text":"","title":"Codice"},{"location":"Old/exchange/Exchange/#android_6","text":"PurchaseParams params = new PurchaseParams(\"bidId\", bidCryptoRequest); conio.exchangeService.purchase(params) .asCallback(result -> result.analysis( success -> { /* Handle Success */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/exchange/Exchange/#ios_4","text":"let params = PurchaseParams(bidId: \"bidId\", cryptoRequest: bidCryptoRequest) let consumer = conio.exchangeService.purchase(params: params) consumer.asCallback { result in switch result { case .success: // Handle Success case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/exchange/Exchange/#vendita-di-bitcoin","text":"Per poter vendere dei Bitcoin \u00e8 necessario effettuare due operazioni. La prima \u00e8 quella di creazione di una Ask , ovvero di una richiesta di vendita di una determinata somma di Bitcoin ad un certo prezzo. Si procede poi con il pagamento di tale Ask , passando l' askId e allegando anche una AskCryptoRequest , generata client side, per testimoniare la legittimit\u00e0 dell'operazione. L'SDK firmer\u00e0 la transazione che sposter\u00e0 i Bitcoin dal wallet dell'utente, restituendo alla fine l'id della Ask completata.","title":"Vendita di Bitcoin"},{"location":"Old/exchange/Exchange/#creazione-della-ask","text":"Per richiedere una Ask si dovr\u00e0 procedere analogamente a quanto visto per la Bid. Sar\u00e0 quindi possibile richiedere una CreatedAsk per la vendita di 150\u20ac o una per la vendita di 100.000.000 satoshi. Una volta inviata la richiesta, si otterr\u00e0 una CreatedAsk contenente, tra le altre informazioni un askId . Con questo identificativo sar\u00e0 possibile aggiornare la richiesta di Ask per rimandarne la scadenza e per ottenere le informazioni sul tasso di cambio pi\u00f9 aggiornate. Questo scenario \u00e8 utile nei casi in cui tra la richiesta della Ask e l'effettiva azione dell'utente passi del tempo che renderebbe il tasso di cambio obsoleto.","title":"Creazione della Ask"},{"location":"Old/exchange/Exchange/#metodo_7","text":"exchangeService.createOrRefreshAsk","title":"Metodo"},{"location":"Old/exchange/Exchange/#parametri_6","text":"Un oggetto di tipo CreateOrRefreshAskParams , costruibile tramite i metodi factory CreateOrRefreshAskParams.fromFiat , CreateOrRefreshAskParams.fromCrypto o CreateOrRefreshAskParams.withAll che richiedono: currency : di tipo Currency , la valuta dell'operazione; @Opzionale cryptoAmount : di tipo long per .fromCrypto , l'ammontare in satoshi che si vuole vendere; @Opzionale fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android) per .fromFiat , l'ammontare nella valuta scelta che si vuole vendere; @Opzionale askId : di tipo String , l'id della ask, da valorizzare solo in caso di refresh della ask stessa. Tramite il metodo factory CreateOrRefreshAskParams.withAll \u00e8 possibile richiedere l'importo massimo vendibile. Tale importo sar\u00e0 sogetto, oltre che alla disponibilit\u00e0 del utente, anche ai suoi limiti di vendita.","title":"Parametri"},{"location":"Old/exchange/Exchange/#risposta_7","text":"Un oggetto di tipo CreatedAsk che contiene: askId : di tipo String , l'id utile al refresh o alla finalizzazione della ask; currency : di tipo Currency , la valuta dell'operazione; cryptoAmount : di tipo long , l'ammontare in satoshi della richiesta d'acquisto fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), l'ammontare in valuta corrente della richiesta d'acquisto; serviceFee : di tipo Decimal (iOS) / BigDecimal (Android), le commissioni di servizio per la transazione, espresse nella currency di riferimento; miningFee : di tipo long , le commissioni per scrivere la transazione in blockchain, espresse in satoshi; expiration : di tipo long , lo Unix Timestamp di scadenza della richiesta di pagamento. Se la bid scade sar\u00e0 necessario aggiornarla per proseguire","title":"Risposta"},{"location":"Old/exchange/Exchange/#errori_1","text":"TRADING_LIMITS_EXCEEDED L'utente ha 0 Eur di limiti residui NOT_ENOUGH_BTC_AMOUNT solo se non ha btc L'utente non ha alcun bitcoin NO_SUCH_SELLER Errore interno del sottosistema di vendita NO_SUCH_WALLET Errore interno del sottosistema di wallet","title":"Errori"},{"location":"Old/exchange/Exchange/#android_7","text":"// Example 1: \u20ac200 ask CreateOrRefreshAskParams params = CreateOrRefreshAskParams.fromFiat(Currency.EUR, BigDecimal(\"200\")); // Example 2: 1.000.000.000 satoshi ask CreateOrRefreshAskParams params = CreateOrRefreshAskParams.fromCrypto(Currency.EUR, 1000000000); conio.exchangeService.createOrRefreshAsk(params) .asCallback(result -> result.analysis( ask -> { /* Handle CreatedAsk */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/exchange/Exchange/#ios_5","text":"// Richiesta di vendita per 50\u20ac let params = CreateOrRefreshAskParams(currency: .eur, fiatAmount: 50.0) // Richiesta di vendita per 100000000 satoshi let params = CreateOrRefreshAskParams(currency: .eur, satoshi: 100000000) // Aggiornamento del valore di una Ask esistente let params = CreateOrRefreshAskParams(askID: \"id\", currency: .eur, fiatAmount: 100.0) conio.exchangeService.createOrRefreshAsk(params: params).asCallback { result in switch result { case .success(let createdAsk): // CreatedBid case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/exchange/Exchange/#utilizzo-della-ask","text":"Ottenuta la Ask da utilizzare \u00e8 possibile procedere con la finalizzazione della vendita. Per effettuare questa operazione bisogner\u00e0 passare l'ID della CreatedAsk alla Sell operation, insieme alla AskCryptoRequest .","title":"Utilizzo della Ask"},{"location":"Old/exchange/Exchange/#metodo_8","text":"exchangeService.sell","title":"Metodo"},{"location":"Old/exchange/Exchange/#parametri_7","text":"Un oggetto di tipo CryptoSellParams contenente: askId : di tipo String , l'id della Ask cryptoRequest : di tipo AskCryptoRequest , configurabile come descritto nell'apposita sezione","title":"Parametri"},{"location":"Old/exchange/Exchange/#risposta_8","text":"Un oggetto di tipo Success che conferma l'avvenuta operazione.","title":"Risposta"},{"location":"Old/exchange/Exchange/#errori_2","text":"TRADING_LIMITS_EXCEEDED La ask viola i limiti massimi di acquisto dell'utente TRADE_EXPIRED La ask \u00e8 scaduta UNRECOVERABLE_ASK La ask \u00e8 in errore ASK_ALREADY_PAID La ask \u00e8 gi\u00e0 stata pagata NOT_ENOUGH_BTC_AMOUNT_E Bitcoin disponibili non sufficienti DUST_ASK Importo in Bitcoin troppo piccolo FIAT_AMOUNT_TOO_LOW Importo in Eur troppo basso","title":"Errori"},{"location":"Old/exchange/Exchange/#codice_7","text":"","title":"Codice"},{"location":"Old/exchange/Exchange/#android_8","text":"CryptoSellParams params = new CryptoSellParams(\"askId\", askCryptoRequest); conio.exchangeService.sell(params) .asCallback(result -> result.analysis( success -> { /* Handle Success */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/exchange/Exchange/#ios_6","text":"let params = CryptoSellParams(askId: askId, cryptoRequest: askCryptoRequest) conio.exchangeService.createOrRefreshAsk(params: params).asCallback { result in switch result { case .success: // Handle Succes case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/installation/Android.en/","text":"Install on Android You can install the SDK using Artifactory as Maven repository. To authenticate you have to put your credentials in the app gradle.properties file: gradle.properties artifactory_user={username} artifactory_password={password} Then in the app build.gradle file add the repository address: app/build.gradle repositories { ... maven { url \"https://d314astu88ufzo.cloudfront.net/artifactory/gradle-release-local\" credentials(PasswordCredentials) { username \"${artifactory_user}\" password \"${artifactory_password}\" } } } Finally add Conio SDK as app dependency: app/build.gradle dependencies { ... implementation 'com.conio:sdk2:[VERSION]' } Then just sync Gradle files.","title":"Install on Android #"},{"location":"Old/installation/Android.en/#install-on-android","text":"You can install the SDK using Artifactory as Maven repository. To authenticate you have to put your credentials in the app gradle.properties file:","title":"Install on Android"},{"location":"Old/installation/Android.en/#gradleproperties","text":"artifactory_user={username} artifactory_password={password} Then in the app build.gradle file add the repository address:","title":"gradle.properties"},{"location":"Old/installation/Android.en/#appbuildgradle","text":"repositories { ... maven { url \"https://d314astu88ufzo.cloudfront.net/artifactory/gradle-release-local\" credentials(PasswordCredentials) { username \"${artifactory_user}\" password \"${artifactory_password}\" } } } Finally add Conio SDK as app dependency:","title":"app/build.gradle"},{"location":"Old/installation/Android.en/#appbuildgradle_1","text":"dependencies { ... implementation 'com.conio:sdk2:[VERSION]' } Then just sync Gradle files.","title":"app/build.gradle"},{"location":"Old/installation/Android/","text":"Installazione su Android L'SDK si installa utilizzando il repository Maven di Artifactory. Per potersi autenticare al repository \u00e8 necessario configurare le credenziali nel file gradle.properties come segue: gradle.properties artifactory_user={username} artifactory_password={password} A questo punto sar\u00e0 possibile aggiungere l'indirizzo del repository nel build.gradle dell'applicazione: app/build.gradle repositories { ... maven { url \"https://artifactory.conio.com/artifactory/gradle-release-local\" credentials(PasswordCredentials) { username \"${artifactory_user}\" password \"${artifactory_password}\" } } } Dopo aver specificato l'indirizzo del repository dal quale verranno sincronizzati gli artefatti sar\u00e0 possibile aggiungere il Conio SDK come dipendeza dell'applicazione: app/build.gradle dependencies { ... implementation 'com.conio:sdk2:[VERSION]' } Sincronizzando il progetto con Gradle sar\u00e0 possibile utilizzare l'SDK.","title":"Installazione su Android #"},{"location":"Old/installation/Android/#installazione-su-android","text":"L'SDK si installa utilizzando il repository Maven di Artifactory. Per potersi autenticare al repository \u00e8 necessario configurare le credenziali nel file gradle.properties come segue:","title":"Installazione su Android"},{"location":"Old/installation/Android/#gradleproperties","text":"artifactory_user={username} artifactory_password={password} A questo punto sar\u00e0 possibile aggiungere l'indirizzo del repository nel build.gradle dell'applicazione:","title":"gradle.properties"},{"location":"Old/installation/Android/#appbuildgradle","text":"repositories { ... maven { url \"https://artifactory.conio.com/artifactory/gradle-release-local\" credentials(PasswordCredentials) { username \"${artifactory_user}\" password \"${artifactory_password}\" } } } Dopo aver specificato l'indirizzo del repository dal quale verranno sincronizzati gli artefatti sar\u00e0 possibile aggiungere il Conio SDK come dipendeza dell'applicazione:","title":"app/build.gradle"},{"location":"Old/installation/Android/#appbuildgradle_1","text":"dependencies { ... implementation 'com.conio:sdk2:[VERSION]' } Sincronizzando il progetto con Gradle sar\u00e0 possibile utilizzare l'SDK.","title":"app/build.gradle"},{"location":"Old/installation/iOS.en/","text":"Installation Prerequisites iOS 10+ Autoconf installed Automake installed Libtool installed Consider using MacOS package manager Brew to install Autoconf , Automake e Libtool . # Install Brew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" # Install Autoconf, Automake and Libtool brew install autoconf automake libtool Cocoapods install Add this line to your podfile: # The ConioSDK Core pod 'ConioSDK', :git => 'git@bitbucket.org:squadrone/conio-swift-sdk.git', :branch => 'master' # BitcoinKit for encryption purposes pod 'BitcoinKit', :git => 'https://github.com/Conio/BitcoinKit.git', :branch => 'keyconvert' Then use the command: pod install --- Troubleshooting If you get the following error: autoreconf: failed to run aclocal: No such file or directory Try the following command: brew install autoconf && brew install automake . If you get the following error: Can't exec \"/opt/local/bin/aclocal\": No such file or directory Uninstall MacPorts with: sudo port -fp uninstall --follow-dependents installed","title":"Installation"},{"location":"Old/installation/iOS.en/#installation","text":"","title":"Installation"},{"location":"Old/installation/iOS.en/#prerequisites","text":"iOS 10+ Autoconf installed Automake installed Libtool installed Consider using MacOS package manager Brew to install Autoconf , Automake e Libtool . # Install Brew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" # Install Autoconf, Automake and Libtool brew install autoconf automake libtool","title":"Prerequisites"},{"location":"Old/installation/iOS.en/#cocoapods-install","text":"Add this line to your podfile: # The ConioSDK Core pod 'ConioSDK', :git => 'git@bitbucket.org:squadrone/conio-swift-sdk.git', :branch => 'master' # BitcoinKit for encryption purposes pod 'BitcoinKit', :git => 'https://github.com/Conio/BitcoinKit.git', :branch => 'keyconvert' Then use the command: pod install","title":"Cocoapods install"},{"location":"Old/installation/iOS.en/#-","text":"","title":"---"},{"location":"Old/installation/iOS.en/#troubleshooting","text":"If you get the following error: autoreconf: failed to run aclocal: No such file or directory Try the following command: brew install autoconf && brew install automake . If you get the following error: Can't exec \"/opt/local/bin/aclocal\": No such file or directory Uninstall MacPorts with: sudo port -fp uninstall --follow-dependents installed","title":"Troubleshooting"},{"location":"Old/installation/iOS/","text":"Installazione Prerequisiti SDK supporta iOS 10+ Autoconf installato Automake installato Libtool installato \u00c8 consigliato l'utilizzo del gestori di pacchetti MacOS Brew per l'installazione di Autoconf , Automake e Libtool . # Install Brew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" # Install Autoconf, Automake and Libtool brew install autoconf automake libtool Installazione con Cocoapods L'SDK Conio \u00e8 disponibile come Pod ed \u00e8 possibile includerla nei progetti aggiungendo le seguenti righe al Podfile: # The ConioSDK Core pod 'ConioSDK', :git => 'git@bitbucket.org:squadrone/conio-swift-sdk.git', :branch => 'master' # BitcoinKit for encryption purposes pod 'BitcoinKit', :git => 'https://github.com/Conio/BitcoinKit.git', :branch => 'keyconvert' Eseguire il comando pod install nella cartella per ottenere l'SDK. --- Possibili Errori nell'installazione Se si dovesse verificare il seguente messaggio di errore: autoreconf: failed to run aclocal: No such file or directory Eseguire il comando: brew install autoconf && brew install automake . Se si dovesse verificare il seguente messaggio di errore: Can't exec \"/opt/local/bin/aclocal\": No such file or directory Disinstallare dal sistema MacPorts eseguendo: sudo port -fp uninstall --follow-dependents installed","title":"Installazione"},{"location":"Old/installation/iOS/#installazione","text":"","title":"Installazione"},{"location":"Old/installation/iOS/#prerequisiti","text":"SDK supporta iOS 10+ Autoconf installato Automake installato Libtool installato \u00c8 consigliato l'utilizzo del gestori di pacchetti MacOS Brew per l'installazione di Autoconf , Automake e Libtool . # Install Brew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" # Install Autoconf, Automake and Libtool brew install autoconf automake libtool","title":"Prerequisiti"},{"location":"Old/installation/iOS/#installazione-con-cocoapods","text":"L'SDK Conio \u00e8 disponibile come Pod ed \u00e8 possibile includerla nei progetti aggiungendo le seguenti righe al Podfile: # The ConioSDK Core pod 'ConioSDK', :git => 'git@bitbucket.org:squadrone/conio-swift-sdk.git', :branch => 'master' # BitcoinKit for encryption purposes pod 'BitcoinKit', :git => 'https://github.com/Conio/BitcoinKit.git', :branch => 'keyconvert' Eseguire il comando pod install nella cartella per ottenere l'SDK.","title":"Installazione con Cocoapods"},{"location":"Old/installation/iOS/#-","text":"","title":"---"},{"location":"Old/installation/iOS/#possibili-errori-nellinstallazione","text":"Se si dovesse verificare il seguente messaggio di errore: autoreconf: failed to run aclocal: No such file or directory Eseguire il comando: brew install autoconf && brew install automake . Se si dovesse verificare il seguente messaggio di errore: Can't exec \"/opt/local/bin/aclocal\": No such file or directory Disinstallare dal sistema MacPorts eseguendo: sudo port -fp uninstall --follow-dependents installed","title":"Possibili Errori nell'installazione"},{"location":"Old/operation/CryptoRequest/","text":"Crypto Request Alcune funzionalit\u00e0 del SDK Conio sono protette da un meccanismo chiamato Crypto Request , che aggiunge un livello di sicurezza ulteriore all'invio di alcuni parametri, tramite una firma crittografica. Le richieste che sfruttano questo meccanismo sono riconoscibili dalla presenza della propriet\u00e0 cryptoRequest , di tipo [Name]CryptoRequest , presente nella funzione di costruzione (costruttore o metodo factory) del oggetto da passare come parametro all'operazione. In particolare, le funzionalit\u00e0 protette da questo meccanismo sono: userService.signup , registrazione dell'utente ( SignupCryptoRequest ); userService.login , autenticazione dell'utente ( LoginCryptoRequest ); exchangeService.purchase , acquisto di Bitcoin ( BidCryptoRequest ); exchangeService.sell , vendita di Bitcoin ( AskCryptoRequest ). La costruzione di ogni propriet\u00e0 di tipo [Name]CryptoRequest necessita di un parametro cryptoProof , un array di byte , ottenuto tramite firma RSA del hash SHA256 della concatenazione (con separatore \"|\") ordinata delle altre propriet\u00e0 del tipo [Name]CryptoRequest (come descritto per ogni tipo [Name]CryptoRequest nel apposito paragrafo). NFC=<implementazione algoritmo di conversione stringa - array di byte> SHA256=<implementazione algoritmo di hashing SHA256> RSA_SIGN=<implementazione algoritmo di firma RSA> CRYPTO_PROOF = RSA_SIGN(SHA256(NFC(DATA_TO_SIGN))) Creazione SignupCryptoRequest Propriet\u00e0 proofID : di tipo String , identificativo della Crypto Request; userID : di tipo String , identificativo esterno del utente; userLevel : di tipo String , livello del utente che ne stabilisce i limiti di compravendita; proofExpiration : di tipo long , istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida; @Opzionale iban : di tipo String , iban del conto bancario associato all'utente, utilizzato come metodo di pagamento per le operazioni di vendita; email : di tipo String , email dell'utente; firstName : di tipo String , nome dell'utente; lastName : di tipo String , cognome dell'utente; DATA_TO_SIGN DATA_TO_SIGN=\"<proofID>|SIGNUP|<userID>|<userLevel>|<proofExpiration>|<email>|<firstName>|<lastName>\" or DATA_TO_SIGN=\"<proofID>|SIGNUP|<userID>|<userLevel>|<proofExpiration>|<iban>|<email>|<firstName>|<lastName>\" Nota : il campo iban \u00e8 opzionale, pertanto, se non lo si inserisce nella SignupCryptoReqeust , va rimosso anche dalla stringa DATA_TO_SIGN (insieme al separatore \"|\") Creazione LoginCryptoRequest Propriet\u00e0 userID : di tipo String , identificativo esterno del utente; proofExpiration : di tipo long , istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida; DATA_TO_SIGN DATA_TO_SIGN=\"<userID>|LOGIN|<proofExpiration>\" Creazione AskCryptoRequest Propriet\u00e0 proofID : di tipo String , identificativo della Crypto Request; askID : di tipo String , identificativo della CreatedAsk che si vuole finalizzare; userID : di tipo String , identificativo esterno del utente; proofExpiration : di tipo long , istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida; DATA_TO_SIGN DATA_TO_SIGN=\"<proofID>|PAY_FOR_ASK|<askID>|<userID>|<proofExpiration>\" Creazione BidCryptoRequest Propriet\u00e0 proofID : di tipo String , identificativo della Crypto Request; bidID : di tipo String , identificativo dell CreatedBid che si vuole finalizzare; userID : di tipo String , identificativo esterno del utente; proofExpiration : di tipo long , istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida; DATA_TO_SIGN DATA_TO_SIGN=\"<proofID>|PAY_FOR_BID_WT|<bidID>|<userID>|<proofExpiration>\"","title":"Crypto Request"},{"location":"Old/operation/CryptoRequest/#crypto-request","text":"Alcune funzionalit\u00e0 del SDK Conio sono protette da un meccanismo chiamato Crypto Request , che aggiunge un livello di sicurezza ulteriore all'invio di alcuni parametri, tramite una firma crittografica. Le richieste che sfruttano questo meccanismo sono riconoscibili dalla presenza della propriet\u00e0 cryptoRequest , di tipo [Name]CryptoRequest , presente nella funzione di costruzione (costruttore o metodo factory) del oggetto da passare come parametro all'operazione. In particolare, le funzionalit\u00e0 protette da questo meccanismo sono: userService.signup , registrazione dell'utente ( SignupCryptoRequest ); userService.login , autenticazione dell'utente ( LoginCryptoRequest ); exchangeService.purchase , acquisto di Bitcoin ( BidCryptoRequest ); exchangeService.sell , vendita di Bitcoin ( AskCryptoRequest ). La costruzione di ogni propriet\u00e0 di tipo [Name]CryptoRequest necessita di un parametro cryptoProof , un array di byte , ottenuto tramite firma RSA del hash SHA256 della concatenazione (con separatore \"|\") ordinata delle altre propriet\u00e0 del tipo [Name]CryptoRequest (come descritto per ogni tipo [Name]CryptoRequest nel apposito paragrafo). NFC=<implementazione algoritmo di conversione stringa - array di byte> SHA256=<implementazione algoritmo di hashing SHA256> RSA_SIGN=<implementazione algoritmo di firma RSA> CRYPTO_PROOF = RSA_SIGN(SHA256(NFC(DATA_TO_SIGN)))","title":"Crypto Request"},{"location":"Old/operation/CryptoRequest/#creazione-signupcryptorequest","text":"","title":"Creazione SignupCryptoRequest"},{"location":"Old/operation/CryptoRequest/#proprieta","text":"proofID : di tipo String , identificativo della Crypto Request; userID : di tipo String , identificativo esterno del utente; userLevel : di tipo String , livello del utente che ne stabilisce i limiti di compravendita; proofExpiration : di tipo long , istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida; @Opzionale iban : di tipo String , iban del conto bancario associato all'utente, utilizzato come metodo di pagamento per le operazioni di vendita; email : di tipo String , email dell'utente; firstName : di tipo String , nome dell'utente; lastName : di tipo String , cognome dell'utente;","title":"Propriet\u00e0"},{"location":"Old/operation/CryptoRequest/#data_to_sign","text":"DATA_TO_SIGN=\"<proofID>|SIGNUP|<userID>|<userLevel>|<proofExpiration>|<email>|<firstName>|<lastName>\" or DATA_TO_SIGN=\"<proofID>|SIGNUP|<userID>|<userLevel>|<proofExpiration>|<iban>|<email>|<firstName>|<lastName>\" Nota : il campo iban \u00e8 opzionale, pertanto, se non lo si inserisce nella SignupCryptoReqeust , va rimosso anche dalla stringa DATA_TO_SIGN (insieme al separatore \"|\")","title":"DATA_TO_SIGN"},{"location":"Old/operation/CryptoRequest/#creazione-logincryptorequest","text":"","title":"Creazione LoginCryptoRequest"},{"location":"Old/operation/CryptoRequest/#proprieta_1","text":"userID : di tipo String , identificativo esterno del utente; proofExpiration : di tipo long , istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida;","title":"Propriet\u00e0"},{"location":"Old/operation/CryptoRequest/#data_to_sign_1","text":"DATA_TO_SIGN=\"<userID>|LOGIN|<proofExpiration>\"","title":"DATA_TO_SIGN"},{"location":"Old/operation/CryptoRequest/#creazione-askcryptorequest","text":"","title":"Creazione AskCryptoRequest"},{"location":"Old/operation/CryptoRequest/#proprieta_2","text":"proofID : di tipo String , identificativo della Crypto Request; askID : di tipo String , identificativo della CreatedAsk che si vuole finalizzare; userID : di tipo String , identificativo esterno del utente; proofExpiration : di tipo long , istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida;","title":"Propriet\u00e0"},{"location":"Old/operation/CryptoRequest/#data_to_sign_2","text":"DATA_TO_SIGN=\"<proofID>|PAY_FOR_ASK|<askID>|<userID>|<proofExpiration>\"","title":"DATA_TO_SIGN"},{"location":"Old/operation/CryptoRequest/#creazione-bidcryptorequest","text":"","title":"Creazione BidCryptoRequest"},{"location":"Old/operation/CryptoRequest/#proprieta_3","text":"proofID : di tipo String , identificativo della Crypto Request; bidID : di tipo String , identificativo dell CreatedBid che si vuole finalizzare; userID : di tipo String , identificativo esterno del utente; proofExpiration : di tipo long , istante temporale dopo il quale la Crypto Request non \u00e8 pi\u00f9 considerata valida;","title":"Propriet\u00e0"},{"location":"Old/operation/CryptoRequest/#data_to_sign_3","text":"DATA_TO_SIGN=\"<proofID>|PAY_FOR_BID_WT|<bidID>|<userID>|<proofExpiration>\"","title":"DATA_TO_SIGN"},{"location":"Old/operation/Operation/","text":"Operazioni Introduzione Una volta inizializzato l'oggetto Conio , i servizi offerti dal SDK sono raggruppati in 3 categorie: Servizi dell'utente ( conio.userService.* ); Servizi del wallet ( conio.walletService.* ); Servizi di mercato ( conio.exchangeService.* ). Ogni servizio \u00e8 un metodo il cui valore di ritorno \u00e8 un implementazione dell'interfaccia ServiceConsumer<O> . ServiceConsumer L'interfaccia ServiceConsumer<O> (generica in O , il tipo che rappresenta il risultato del servizio stesso) dichiara le modalit\u00e0 con cui i risultati dei servizi possono essere fruiti, infatti espone i metodi: asCallbeck , che richiede come parametro una callback che verr\u00e0 invocata con il risultato del servizio; (Android) asFlow , che restituisce un oggetto di tipo Flow , pi\u00f9 adatto al paradigma di programmazione reattiva; (iOS) asPublisher , TODO. Code Android (Java) conio.walletService.currentBitcoinAddress().asCallback(result -> result.analysis( address -> { /* ... */ }, error -> { /* ... */ } )); Android (Kotlin) runBlocking { conio.walletService.currentBitcoinAddress().asFlow().first().analysis( { address -> /* ... */ }, { error -> /* ... */ } ) } Eccezioni possibili ConioError (iOS) Questo errore raggruppa tutte le possibili risposte di errore direttamente legate alle operazioni. // General operation error with name and/or description case onOperation(String) // Decoding data error case unableToDecodeData // Cryptographic operation error case onCryptography // Secure storage operation error case onStorage // OAuth flow error: unable to retrieve and/or refresh access token case unauthorized // TBD case appImprovementAcceptanceNotAccepted // TBD case clientSupportAcceptanceNotAccepted // Ask operation already paid case askAlreadyPaid // Bid operation already paid case bidAlreadyPaid // Bid operation is expired case bidExpired // TBD case bidIsInError // Bid operation is not yet paid case bidNotYetPaid case bithustlerServiceCouldNotCreateSeller // TBD case cardsLimitsExceeded case cardsServiceCouldNotCreatePayer case duplicateEmailAddress case dustAsk case dustTransaction // Fiat amount is under the minumum level limit case fiatAmountTooLow case inconsistentState case inconsistentTransaction case invalidIban case invalidMessageSignature // Used payment method is not valid case invalidPaymentMethod case invalidToken case invalidTokenPayload // Crypto proof used for operation is invalid case invalidCryptoProof case multipleSellMethods case noSuch3DSecure case noSuchSellMethod // TBD case noSuchSeller // TBD case noSuchWallet case noSuchWithdrawalFeesInfo case notEnoughBtcAmount case tradeExpired // Bid operation exceeded user purchase max limits case tradingLimitsExceeded case unavailableBtcSubsystem // Ask operation is in an error status case unrecoverableAsk // Bid operation is in an error status case unrecoverableBid // Payment method used in not supported case unsupportedPaymentMethod case walletAlreadyCreatedWithDifferentKeys case walletAlreadyOwnedByAnotherUser // Unknown error with description case unknown(String) // Conio SDK version is outdated case outdatedSdk // Server is under maintenance case underMaintenance ConioException (Android) Questo errore raggruppa (sia come namespace che come supertipo) tutte le possibili risposte di errore direttamente legate alle operazioni. sealed class ConioException : Exception { // General operation error with name and/or description class OnOperation : ConioException // Decoding data error class UnableToDecodeData : ConioException // Cryptographic operation error class OnCryptography : ConioException // Secure storage operation error class OnStorage : ConioException // OAuth flow error: unable to retrieve and/or refresh access token class Unauthorized : ConioException // Conio SDK version is outdated class OutdatedSdk : ConioException // Server is under maintenance class UnderMaintenance : ConioException class AppImprovementAcceptanceNotAccepted : ConioException class ClientSupportAcceptanceNotAccepted : ConioException // Ask operation already paid class AskAlreadyPaid : ConioException // Bid operation already paid class BidAlreadyPaid : ConioException // Bid operation is expired class BidExpired : ConioException class BidIsInError : ConioException // Bid operation is not yet paid class BidNotYetPaid : ConioException class BithustlerServiceCouldNotCreateSeller : ConioException class CardsLimitsExceeded : ConioException class CardsServiceCouldNotCreatePayer : ConioException class DuplicateEmailAddress : ConioException class DustAsk : ConioException class DustTransaction : ConioException // Fiat amount is under the minumum level limit class FiatAmountTooLow : ConioException class InconsistentState : ConioException class InconsistentTransaction : ConioException class InvalidIban : ConioException class InvalidMessageSignature : ConioException // Used payment method is not valid class InvalidPaymentMethod : ConioException class InvalidToken : ConioException class InvalidTokenPayload : ConioException // Crypto proof used for operation is invalid class InvalidCryptoProof : ConioException class MultipleSellMethods : ConioException class NoSuch3DSecure : ConioException class NoSuchSellMethod : ConioException class NoSuchSeller : ConioException class NoSuchWallet : ConioException class NoSuchWithdrawalFeesInfo : ConioException class NotEnoughBtcAmount : ConioException class TradeExpired : ConioException // Bid operation exceeded user purchase max limits class TradingLimitsExceeded : ConioException class UnavailableBtcSubsystem : ConioException // Ask operation is in an error status class UnrecoverableAsk : ConioException // Bid operation is in an error status class UnrecoverableBid : ConioException // Payment method used in not supported class UnsupportedPaymentMethod : ConioException class WalletAlreadyCreatedWithDifferentKeys : ConioException class WalletAlreadyOwnedByAnotherUser : ConioException // Unknown error with description class Unknown : ConioException } Ad esempio, prendiamo l'operazione conio.walletService.withdrawalFees : se un utente ha 1 bitcoin nel portafoglio e richiede le mining fees per un invio da 50 bitcoin, ricever\u00e0 un NO_SUCH_WITHDRAWAL_FEES_INFO . Code Android WithdrawalFeesParams params = new WithdrawalFeesParams( \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", 100000000, TransactionSpeedType.SPEED_FIVE ); conio.walletService.withdrawalFees(params).asCallback(result -> result.analysis( fees -> { /* ... */ }, error -> { ConioException conioException = (ConioException) error; if (conioException.getConioError() == ConioError.NO_SUCH_WITHDRAWAL_FEES_INFO) { /* Handle NO_SUCH_WITHDRAWAL_FEES_INFO error */ } } )); Non autorizzato Questo errore viene generato quando non si \u00e8 autorizzati a utilizzare un metodo per uno dei seguenti motivi: utilizzo di un metodo che richiede autenticazione senza una sessione valida; si sta provando ad effettura una login con credenziali errate. Assicurarsi di avere una sessione valida, autenticandosi nuovamente tramite una login o una sign-up . Codice Android UserLogin user = new UserLogin(\"username\", \"wrong_password\"); conio.userService.login(user).asCallback(result -> result.analysis( success -> { /* ... */ }, error -> { if (error instanceof ConioException.Unauthorized) { /* Handle the error */ } } )); SDK obsoleto Questo errore viene generato quando l'utente tenta di utilizzare una versione obsoleta dell'SDK. Consigliamo di gestire questo errore per notificare all'utente di aggiornare l'applicazione. Code Android LegalAcceptancesParams params = new LegalAcceptancesParams(Language.ITALIAN); conio.userService.getLegalAcceptances(params).asCallback(result -> result.analysis( acceptances -> { /* ... */ }, error -> { if (error instanceof ConioException.OutdatedSdk) { /* Handle the error */ } } )); iOS let params = LegalAcceptancesParams(language: .italian) conio.userService.getLegalAcceptances(params: params).asCallback { result in switch result { case .success: // success case .failure(let error): if case .outdatedSdk = error { print(\"Please update the SDK\") } } }","title":"Operazioni"},{"location":"Old/operation/Operation/#operazioni","text":"","title":"Operazioni"},{"location":"Old/operation/Operation/#introduzione","text":"Una volta inizializzato l'oggetto Conio , i servizi offerti dal SDK sono raggruppati in 3 categorie: Servizi dell'utente ( conio.userService.* ); Servizi del wallet ( conio.walletService.* ); Servizi di mercato ( conio.exchangeService.* ). Ogni servizio \u00e8 un metodo il cui valore di ritorno \u00e8 un implementazione dell'interfaccia ServiceConsumer<O> .","title":"Introduzione"},{"location":"Old/operation/Operation/#serviceconsumer","text":"L'interfaccia ServiceConsumer<O> (generica in O , il tipo che rappresenta il risultato del servizio stesso) dichiara le modalit\u00e0 con cui i risultati dei servizi possono essere fruiti, infatti espone i metodi: asCallbeck , che richiede come parametro una callback che verr\u00e0 invocata con il risultato del servizio; (Android) asFlow , che restituisce un oggetto di tipo Flow , pi\u00f9 adatto al paradigma di programmazione reattiva; (iOS) asPublisher , TODO.","title":"ServiceConsumer"},{"location":"Old/operation/Operation/#code","text":"","title":"Code"},{"location":"Old/operation/Operation/#android-java","text":"conio.walletService.currentBitcoinAddress().asCallback(result -> result.analysis( address -> { /* ... */ }, error -> { /* ... */ } ));","title":"Android (Java)"},{"location":"Old/operation/Operation/#android-kotlin","text":"runBlocking { conio.walletService.currentBitcoinAddress().asFlow().first().analysis( { address -> /* ... */ }, { error -> /* ... */ } ) }","title":"Android (Kotlin)"},{"location":"Old/operation/Operation/#eccezioni-possibili","text":"","title":"Eccezioni possibili"},{"location":"Old/operation/Operation/#conioerror-ios","text":"Questo errore raggruppa tutte le possibili risposte di errore direttamente legate alle operazioni. // General operation error with name and/or description case onOperation(String) // Decoding data error case unableToDecodeData // Cryptographic operation error case onCryptography // Secure storage operation error case onStorage // OAuth flow error: unable to retrieve and/or refresh access token case unauthorized // TBD case appImprovementAcceptanceNotAccepted // TBD case clientSupportAcceptanceNotAccepted // Ask operation already paid case askAlreadyPaid // Bid operation already paid case bidAlreadyPaid // Bid operation is expired case bidExpired // TBD case bidIsInError // Bid operation is not yet paid case bidNotYetPaid case bithustlerServiceCouldNotCreateSeller // TBD case cardsLimitsExceeded case cardsServiceCouldNotCreatePayer case duplicateEmailAddress case dustAsk case dustTransaction // Fiat amount is under the minumum level limit case fiatAmountTooLow case inconsistentState case inconsistentTransaction case invalidIban case invalidMessageSignature // Used payment method is not valid case invalidPaymentMethod case invalidToken case invalidTokenPayload // Crypto proof used for operation is invalid case invalidCryptoProof case multipleSellMethods case noSuch3DSecure case noSuchSellMethod // TBD case noSuchSeller // TBD case noSuchWallet case noSuchWithdrawalFeesInfo case notEnoughBtcAmount case tradeExpired // Bid operation exceeded user purchase max limits case tradingLimitsExceeded case unavailableBtcSubsystem // Ask operation is in an error status case unrecoverableAsk // Bid operation is in an error status case unrecoverableBid // Payment method used in not supported case unsupportedPaymentMethod case walletAlreadyCreatedWithDifferentKeys case walletAlreadyOwnedByAnotherUser // Unknown error with description case unknown(String) // Conio SDK version is outdated case outdatedSdk // Server is under maintenance case underMaintenance","title":"ConioError (iOS)"},{"location":"Old/operation/Operation/#conioexception-android","text":"Questo errore raggruppa (sia come namespace che come supertipo) tutte le possibili risposte di errore direttamente legate alle operazioni. sealed class ConioException : Exception { // General operation error with name and/or description class OnOperation : ConioException // Decoding data error class UnableToDecodeData : ConioException // Cryptographic operation error class OnCryptography : ConioException // Secure storage operation error class OnStorage : ConioException // OAuth flow error: unable to retrieve and/or refresh access token class Unauthorized : ConioException // Conio SDK version is outdated class OutdatedSdk : ConioException // Server is under maintenance class UnderMaintenance : ConioException class AppImprovementAcceptanceNotAccepted : ConioException class ClientSupportAcceptanceNotAccepted : ConioException // Ask operation already paid class AskAlreadyPaid : ConioException // Bid operation already paid class BidAlreadyPaid : ConioException // Bid operation is expired class BidExpired : ConioException class BidIsInError : ConioException // Bid operation is not yet paid class BidNotYetPaid : ConioException class BithustlerServiceCouldNotCreateSeller : ConioException class CardsLimitsExceeded : ConioException class CardsServiceCouldNotCreatePayer : ConioException class DuplicateEmailAddress : ConioException class DustAsk : ConioException class DustTransaction : ConioException // Fiat amount is under the minumum level limit class FiatAmountTooLow : ConioException class InconsistentState : ConioException class InconsistentTransaction : ConioException class InvalidIban : ConioException class InvalidMessageSignature : ConioException // Used payment method is not valid class InvalidPaymentMethod : ConioException class InvalidToken : ConioException class InvalidTokenPayload : ConioException // Crypto proof used for operation is invalid class InvalidCryptoProof : ConioException class MultipleSellMethods : ConioException class NoSuch3DSecure : ConioException class NoSuchSellMethod : ConioException class NoSuchSeller : ConioException class NoSuchWallet : ConioException class NoSuchWithdrawalFeesInfo : ConioException class NotEnoughBtcAmount : ConioException class TradeExpired : ConioException // Bid operation exceeded user purchase max limits class TradingLimitsExceeded : ConioException class UnavailableBtcSubsystem : ConioException // Ask operation is in an error status class UnrecoverableAsk : ConioException // Bid operation is in an error status class UnrecoverableBid : ConioException // Payment method used in not supported class UnsupportedPaymentMethod : ConioException class WalletAlreadyCreatedWithDifferentKeys : ConioException class WalletAlreadyOwnedByAnotherUser : ConioException // Unknown error with description class Unknown : ConioException } Ad esempio, prendiamo l'operazione conio.walletService.withdrawalFees : se un utente ha 1 bitcoin nel portafoglio e richiede le mining fees per un invio da 50 bitcoin, ricever\u00e0 un NO_SUCH_WITHDRAWAL_FEES_INFO .","title":"ConioException (Android)"},{"location":"Old/operation/Operation/#code_1","text":"","title":"Code"},{"location":"Old/operation/Operation/#android","text":"WithdrawalFeesParams params = new WithdrawalFeesParams( \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", 100000000, TransactionSpeedType.SPEED_FIVE ); conio.walletService.withdrawalFees(params).asCallback(result -> result.analysis( fees -> { /* ... */ }, error -> { ConioException conioException = (ConioException) error; if (conioException.getConioError() == ConioError.NO_SUCH_WITHDRAWAL_FEES_INFO) { /* Handle NO_SUCH_WITHDRAWAL_FEES_INFO error */ } } ));","title":"Android"},{"location":"Old/operation/Operation/#non-autorizzato","text":"Questo errore viene generato quando non si \u00e8 autorizzati a utilizzare un metodo per uno dei seguenti motivi: utilizzo di un metodo che richiede autenticazione senza una sessione valida; si sta provando ad effettura una login con credenziali errate. Assicurarsi di avere una sessione valida, autenticandosi nuovamente tramite una login o una sign-up .","title":"Non autorizzato"},{"location":"Old/operation/Operation/#codice","text":"","title":"Codice"},{"location":"Old/operation/Operation/#android_1","text":"UserLogin user = new UserLogin(\"username\", \"wrong_password\"); conio.userService.login(user).asCallback(result -> result.analysis( success -> { /* ... */ }, error -> { if (error instanceof ConioException.Unauthorized) { /* Handle the error */ } } ));","title":"Android"},{"location":"Old/operation/Operation/#sdk-obsoleto","text":"Questo errore viene generato quando l'utente tenta di utilizzare una versione obsoleta dell'SDK. Consigliamo di gestire questo errore per notificare all'utente di aggiornare l'applicazione.","title":"SDK obsoleto"},{"location":"Old/operation/Operation/#code_2","text":"","title":"Code"},{"location":"Old/operation/Operation/#android_2","text":"LegalAcceptancesParams params = new LegalAcceptancesParams(Language.ITALIAN); conio.userService.getLegalAcceptances(params).asCallback(result -> result.analysis( acceptances -> { /* ... */ }, error -> { if (error instanceof ConioException.OutdatedSdk) { /* Handle the error */ } } ));","title":"Android"},{"location":"Old/operation/Operation/#ios","text":"let params = LegalAcceptancesParams(language: .italian) conio.userService.getLegalAcceptances(params: params).asCallback { result in switch result { case .success: // success case .failure(let error): if case .outdatedSdk = error { print(\"Please update the SDK\") } } }","title":"iOS"},{"location":"Old/user/User.en/","text":"User operations Terms and conditions Using this operation you can retrieve the Acceptances (terms and conditions), T&C URL and Privacy Policy URL that the user has to accept during the signup. Parameters An object LegalAcceptancesParams with the language you want. Returns A LegalAcceptances object containing Acceptances , the URL Terms of service , the URL Privacy Policies and the pre-contractual info URL. Acceptances localization An Acceptance has 2 localization keys: one for the title and one for the content. Code Android LegalAcceptancesParams params = new LegalAcceptancesParams(Language.ITALIAN); conio.userService.getLegalAcceptances(params, result -> { result.analysis(acceptances -> { // LegalAcceptances }, error -> { // Exception }); }); iOS let params = LegalAcceptancesParams(language: .italian) conio.userService.getLegalAcceptances(params: params) { result in result.analysis(ifSuccess: { legalAcceptances in // LegalAcceptances }, ifFailure: { error in // ServiceError }) } Signup To use the wallet the user has to be authenticated. If it's the first time you can authenticate using the signup method, otherwise you have to use the login method. Parameters An Account struct containing: login : Login on iOS or UserLogin on Android: username and password of the user. acceptances : Acceptances containing booleans about the user consent to T&C cryptoRequest : create a CryptoRequest : Crypto Request Creation Crypto Request Creation To generate a Crypto Request , you have to sign the string: dataString (create one by following the example below), using the function sha256 and the private key. The following lines of code are just an example. The actual implementation of the signing algorithm to include in the CryptoRequest is up to the client. Java Example String proofId = UUID.randomUUID().toString(); long proofExpiration = new Date() .tenMinutesFromNow() .millis(); String userLevel = \"A smart level\"; // Es. \"Advanced\" to get adavanced limits String userId = login.username; String iban = \"IBAN\"; // It should be a real iban String email = \"user@email.com\"; String firstName = \"Mario\"; String lastName = \"Rossi\"; String[] data = { proofId, \"SIGNUP\", userId, userLevel, String.valueOf(proofExpiration), iban, email, firstName, lastName }; String dataString = join(\"|\", data); PrivateKey privateKey = new PrivateKey(\"key.pem\"); RsaSigner rsa = new RsaSigner(privateKey); String signature = rsa .sign(\"sha256\", dataString) .toLowercase(); byte[] cryptoProof = fromHexToBytes(signature); Swift Example let proofID = UUID().uuidString let proofExpiration: UInt64 = UInt64(Date()) let userLevel = \"A smart level\" // Es. \"Advanced\" to get adavanced limits let userID = login.username let iban = \"IBAN\" // It should be a real iban let email = \"user@email.com\" let firstName = \"Mario\" let lastName = \"Rossi\" let data = [ proofID, \"SIGNUP\", userID, userLevel, String(proofExpiration), iban, firstName, lastName ] let dataString = data.joined(separator: \"|\") let cryptoProof = Crypto.sign( privateKey: privateKey, digestType: .sha256 ) let cryptoRequest = CryptoRequest( proofID: proofID, cryptoProof: cryptoProof.data, proofExpiration: proofExpiration, userID: userID, userLevel: userLevel, iban: iban, email: email, firstName: firstName, lastName: lastName ) Returns An object Acceptances confirming which T&C the user approved during the signup. Errori INVALID_IBAN CRYPTO_PROOF_EXPIRED INVALID_CRYPTO_PROOF Crypto proof was signed incorrectly CARDS_SERVICE_COULD_NOT_CREATE_PAYER Internal error of the payment system DUPLICATE_EMAIL_ADDRESS WALLET_ALREADY_OWNED_BY_ANOTHER_USER CLIENT_SUPPORT_ACCEPTANCE_NOT_ACCEPTED Required acceptance APP_IMPROVEMENT_ACCEPTANCE_NOT_ACCEPTED Required acceptance Code Android UserLogin login = new UserLogin(\"lemonade\", \"secretword\"); // Build the acceptances list with the user choices result Acceptance appImprovement = new Acceptance(AcceptanceType.APP_IMPROVEMENT, true); Acceptance clientSupport = new Acceptance(AcceptanceType.CLIENT_SUPPORT, true); ArrayList<Acceptance> acceptanceList = new ArrayList<>(); acceptanceList.add(appImprovement); acceptanceList.add(clientSupport); Acceptances acceptances = new Acceptances(acceptanceList); // Your crypto request implementation CryptoRequest cryptoRequest = buildCryptoRequest(); Account account = new Account(login, acceptances, cryptoRequest); conio.userService.signup(account, result -> { result.analysis(acceptances -> { // Acceptances }, error -> { // Exception }); }); iOS let login = Login(username: \"lemonade\", password: \"secretword\") // Your crypto request implementation let cryptoRequest = buildCryptoRequest() // Build the acceptances list with the user choices result let appImprovement = Acceptance(type: .appImprovement, isAccepted: true) let clientSupport = Acceptance(type: .clientSupport, isAccepted: true) let acceptancesList = [appImprovement, clientSupport] let acceptances = Acceptances(acceptances: acceptancesList) let account = Account( login: login, acceptances: acceptances, cryptoRequest: cryptoRequest ) conio.userService.signup(with: account) { result in result.analysis(ifSuccess: { acceptances in // Acceptances }, ifFailure: { error in // ServiceError }) } Login Using the login operation you can authenticate to Conio. It is recommended to perform this operation every time the app is started. Parameters An object, called Login on iOS or UserLogin on Android, containing: username password Returns An Acceptances object with the T&C that the user accepted on signup. Code Android UserLogin login = new UserLogin(\"lemonade\", \"secretword\"); conio.userService.login(login, result -> { result.analysis(acceptances -> { // Acceptances }, error -> { // Exception }); }); iOS let login = Login(username: \"lemonade\",password: \"secretword\") conio.userService.login(with: login) { result in result.analysis(ifSuccess: { acceptances in // Acceptances }, ifFailure: { error in // ServiceError }) } Logout Disconnect from Conio. Returns A boolean with the result of the operation. Code Android conio.userService.logout(result -> { result.analysis(success -> { // Boolean }, error -> { // Exception }); }); iOS conio.userService.logout { result in result.analysis(ifSuccess: { success in // Boolean }, ifFailure: { error in // ServiceError }) } Change Email Using this operation you can update Conio user email. Method userService.changeEmail Parameters A ChangeEmailParams object type. newEmail : String type, it is the new value used to update actual user email. Returns Android A Success object type if the operation finish with success. iOS A Void object type if the operation finish with success. Code Android ChangeEmailParams params = new ChangeEmailParams(\"newEmail@conio.com\"); conio.userService.changeEmail(params).asCallback(result -> result.analysis( activityList -> { /* Success */ }, error -> { /* ... */ } )); iOS let params = ChangeEmailParams(newEmail: \"newEmail@conio.com\") conio.userService.changeEmail(with: params).asCallback { result in switch result { case .failure(let error): /* ... */ case .success: /* Success */ } }","title":"User operations"},{"location":"Old/user/User.en/#user-operations","text":"","title":"User operations"},{"location":"Old/user/User.en/#terms-and-conditions","text":"Using this operation you can retrieve the Acceptances (terms and conditions), T&C URL and Privacy Policy URL that the user has to accept during the signup.","title":"Terms and conditions"},{"location":"Old/user/User.en/#parameters","text":"An object LegalAcceptancesParams with the language you want.","title":"Parameters"},{"location":"Old/user/User.en/#returns","text":"A LegalAcceptances object containing Acceptances , the URL Terms of service , the URL Privacy Policies and the pre-contractual info URL.","title":"Returns"},{"location":"Old/user/User.en/#acceptances-localization","text":"An Acceptance has 2 localization keys: one for the title and one for the content.","title":"Acceptances localization"},{"location":"Old/user/User.en/#code","text":"","title":"Code"},{"location":"Old/user/User.en/#android","text":"LegalAcceptancesParams params = new LegalAcceptancesParams(Language.ITALIAN); conio.userService.getLegalAcceptances(params, result -> { result.analysis(acceptances -> { // LegalAcceptances }, error -> { // Exception }); });","title":"Android"},{"location":"Old/user/User.en/#ios","text":"let params = LegalAcceptancesParams(language: .italian) conio.userService.getLegalAcceptances(params: params) { result in result.analysis(ifSuccess: { legalAcceptances in // LegalAcceptances }, ifFailure: { error in // ServiceError }) }","title":"iOS"},{"location":"Old/user/User.en/#signup","text":"To use the wallet the user has to be authenticated. If it's the first time you can authenticate using the signup method, otherwise you have to use the login method.","title":"Signup"},{"location":"Old/user/User.en/#parameters_1","text":"An Account struct containing: login : Login on iOS or UserLogin on Android: username and password of the user. acceptances : Acceptances containing booleans about the user consent to T&C cryptoRequest : create a CryptoRequest : Crypto Request Creation","title":"Parameters"},{"location":"Old/user/User.en/#crypto-request-creation","text":"To generate a Crypto Request , you have to sign the string: dataString (create one by following the example below), using the function sha256 and the private key. The following lines of code are just an example. The actual implementation of the signing algorithm to include in the CryptoRequest is up to the client.","title":"Crypto Request Creation"},{"location":"Old/user/User.en/#java-example","text":"String proofId = UUID.randomUUID().toString(); long proofExpiration = new Date() .tenMinutesFromNow() .millis(); String userLevel = \"A smart level\"; // Es. \"Advanced\" to get adavanced limits String userId = login.username; String iban = \"IBAN\"; // It should be a real iban String email = \"user@email.com\"; String firstName = \"Mario\"; String lastName = \"Rossi\"; String[] data = { proofId, \"SIGNUP\", userId, userLevel, String.valueOf(proofExpiration), iban, email, firstName, lastName }; String dataString = join(\"|\", data); PrivateKey privateKey = new PrivateKey(\"key.pem\"); RsaSigner rsa = new RsaSigner(privateKey); String signature = rsa .sign(\"sha256\", dataString) .toLowercase(); byte[] cryptoProof = fromHexToBytes(signature);","title":"Java Example"},{"location":"Old/user/User.en/#swift-example","text":"let proofID = UUID().uuidString let proofExpiration: UInt64 = UInt64(Date()) let userLevel = \"A smart level\" // Es. \"Advanced\" to get adavanced limits let userID = login.username let iban = \"IBAN\" // It should be a real iban let email = \"user@email.com\" let firstName = \"Mario\" let lastName = \"Rossi\" let data = [ proofID, \"SIGNUP\", userID, userLevel, String(proofExpiration), iban, firstName, lastName ] let dataString = data.joined(separator: \"|\") let cryptoProof = Crypto.sign( privateKey: privateKey, digestType: .sha256 ) let cryptoRequest = CryptoRequest( proofID: proofID, cryptoProof: cryptoProof.data, proofExpiration: proofExpiration, userID: userID, userLevel: userLevel, iban: iban, email: email, firstName: firstName, lastName: lastName )","title":"Swift Example"},{"location":"Old/user/User.en/#returns_1","text":"An object Acceptances confirming which T&C the user approved during the signup.","title":"Returns"},{"location":"Old/user/User.en/#errori","text":"INVALID_IBAN CRYPTO_PROOF_EXPIRED INVALID_CRYPTO_PROOF Crypto proof was signed incorrectly CARDS_SERVICE_COULD_NOT_CREATE_PAYER Internal error of the payment system DUPLICATE_EMAIL_ADDRESS WALLET_ALREADY_OWNED_BY_ANOTHER_USER CLIENT_SUPPORT_ACCEPTANCE_NOT_ACCEPTED Required acceptance APP_IMPROVEMENT_ACCEPTANCE_NOT_ACCEPTED Required acceptance","title":"Errori"},{"location":"Old/user/User.en/#code_1","text":"","title":"Code"},{"location":"Old/user/User.en/#android_1","text":"UserLogin login = new UserLogin(\"lemonade\", \"secretword\"); // Build the acceptances list with the user choices result Acceptance appImprovement = new Acceptance(AcceptanceType.APP_IMPROVEMENT, true); Acceptance clientSupport = new Acceptance(AcceptanceType.CLIENT_SUPPORT, true); ArrayList<Acceptance> acceptanceList = new ArrayList<>(); acceptanceList.add(appImprovement); acceptanceList.add(clientSupport); Acceptances acceptances = new Acceptances(acceptanceList); // Your crypto request implementation CryptoRequest cryptoRequest = buildCryptoRequest(); Account account = new Account(login, acceptances, cryptoRequest); conio.userService.signup(account, result -> { result.analysis(acceptances -> { // Acceptances }, error -> { // Exception }); });","title":"Android"},{"location":"Old/user/User.en/#ios_1","text":"let login = Login(username: \"lemonade\", password: \"secretword\") // Your crypto request implementation let cryptoRequest = buildCryptoRequest() // Build the acceptances list with the user choices result let appImprovement = Acceptance(type: .appImprovement, isAccepted: true) let clientSupport = Acceptance(type: .clientSupport, isAccepted: true) let acceptancesList = [appImprovement, clientSupport] let acceptances = Acceptances(acceptances: acceptancesList) let account = Account( login: login, acceptances: acceptances, cryptoRequest: cryptoRequest ) conio.userService.signup(with: account) { result in result.analysis(ifSuccess: { acceptances in // Acceptances }, ifFailure: { error in // ServiceError }) }","title":"iOS"},{"location":"Old/user/User.en/#login","text":"Using the login operation you can authenticate to Conio. It is recommended to perform this operation every time the app is started.","title":"Login"},{"location":"Old/user/User.en/#parameters_2","text":"An object, called Login on iOS or UserLogin on Android, containing: username password","title":"Parameters"},{"location":"Old/user/User.en/#returns_2","text":"An Acceptances object with the T&C that the user accepted on signup.","title":"Returns"},{"location":"Old/user/User.en/#code_2","text":"","title":"Code"},{"location":"Old/user/User.en/#android_2","text":"UserLogin login = new UserLogin(\"lemonade\", \"secretword\"); conio.userService.login(login, result -> { result.analysis(acceptances -> { // Acceptances }, error -> { // Exception }); });","title":"Android"},{"location":"Old/user/User.en/#ios_2","text":"let login = Login(username: \"lemonade\",password: \"secretword\") conio.userService.login(with: login) { result in result.analysis(ifSuccess: { acceptances in // Acceptances }, ifFailure: { error in // ServiceError }) }","title":"iOS"},{"location":"Old/user/User.en/#logout","text":"Disconnect from Conio.","title":"Logout"},{"location":"Old/user/User.en/#returns_3","text":"A boolean with the result of the operation.","title":"Returns"},{"location":"Old/user/User.en/#code_3","text":"","title":"Code"},{"location":"Old/user/User.en/#android_3","text":"conio.userService.logout(result -> { result.analysis(success -> { // Boolean }, error -> { // Exception }); });","title":"Android"},{"location":"Old/user/User.en/#ios_3","text":"conio.userService.logout { result in result.analysis(ifSuccess: { success in // Boolean }, ifFailure: { error in // ServiceError }) }","title":"iOS"},{"location":"Old/user/User.en/#change-email","text":"Using this operation you can update Conio user email.","title":"Change Email"},{"location":"Old/user/User.en/#method","text":"userService.changeEmail","title":"Method"},{"location":"Old/user/User.en/#parameters_3","text":"A ChangeEmailParams object type. newEmail : String type, it is the new value used to update actual user email.","title":"Parameters"},{"location":"Old/user/User.en/#returns_4","text":"","title":"Returns"},{"location":"Old/user/User.en/#android_4","text":"A Success object type if the operation finish with success.","title":"Android"},{"location":"Old/user/User.en/#ios_4","text":"A Void object type if the operation finish with success.","title":"iOS"},{"location":"Old/user/User.en/#code_4","text":"","title":"Code"},{"location":"Old/user/User.en/#android_5","text":"ChangeEmailParams params = new ChangeEmailParams(\"newEmail@conio.com\"); conio.userService.changeEmail(params).asCallback(result -> result.analysis( activityList -> { /* Success */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/user/User.en/#ios_5","text":"let params = ChangeEmailParams(newEmail: \"newEmail@conio.com\") conio.userService.changeEmail(with: params).asCallback { result in switch result { case .failure(let error): /* ... */ case .success: /* Success */ } }","title":"iOS"},{"location":"Old/user/User/","text":"Operazioni sull'utente Recupero dei termini di servizio Questa operazione consente di recuperare le LegalAcceptances , ovvero le condizioni che l'utente potr\u00e0/dovr\u00e0 accettare in fase di signup (scelte che, durante l' operazione signup , dovranno essere descritte tramite la classe Acceptances ). L'oggetto LegalAcceptances recuperato conterr\u00e0 gli url per mostrare le pagine dei Termini di Servizio e Privacy Policies di Conio e il dettaglio delle acceptances ( AcceptanceDetail ) che l'utente dovr\u00e0 o meno accettare. Metodo userService.getLegalAcceptances Parametri Un oggetto di tipo LegalAcceptancesParams contenente la lingua di riferimento per ottenere le acceptances e gli url delle pagine web da mostrare all'utente. Risposta Un oggetto di tipo LegalAcceptances contenente la lista degli AcceptanceDetail , url dei Termini di Servizio , url relativo alle Privacy Policies e url relativo alle condizioni pre contrattuali. Codice Android LegalAcceptancesParams params = new LegalAcceptancesParams(Language.ITALIAN); conio.userService.getLegalAcceptances(params) .asCallback(result -> result.analysis( acceptances -> { /* Handle LegalAcceptances */ }, error -> { /* Handle error */ } )); iOS let params = LegalAcceptancesParams(language: .italian) conio.userService.signup(params: params).asCallback { result in switch result { case .success(let acceptances): // LegalAcceptances case .failure(let error): // Operation Error } } Autenticazione Per poter operare con il portafoglio Conio occorre essere autenticati. Se \u00e8 la prima volta che l'utente usa il servizio ci si pu\u00f2 autenticare con il metodo userService.signup , altrimenti con il metodo userService.login . Signup L'operazione di signup permette di creare un nuovo utente Conio. Metodo userService.signup Parametri Un oggetto di tipo SignupParams , costruito tramite il metodo SignupParams.createCryptoSignup con: acceptances : di tipo Acceptances con l'esito della conferma ai termini di servizio da parte dell'utente, recuperati tramite le LegalAcceptances ; credentials : di tipo ConioCredentials con username e password dell'utente; cryptoRequest : di tipo SignupCryptoRequest , che specifica ulteriori parametri comprovati da una firma, come descritto in creazione della SignupCryptoRequest . Risposta Un oggetto di tipo Success che indica che l'utente \u00e8 stato autenticato. Errori ConioError : APP_IMPROVEMENT_ACCEPTANCE_NOT_ACCEPTED Acceptance obbligatoria; CLIENT_SUPPORT_ACCEPTANCE_NOT_ACCEPTED Acceptance obbligatoria; CRYPTO_PROOF_EXPIRED La crypto proof \u00e8 scaduta; INVALID_CRYPTO_PROOF La crypto proof non \u00e8 correttamente firmata; DUPLICATE_EMAIL_ADDRESS Indirizzo email duplicato; INVALID_IBAN IBAN non valido; WALLET_ALREADY_OWNED_BY_ANOTHER_USER Il wallet \u00e8 gi\u00e0 utilizzato da un altro utente; CARDS_SERVICE_COULD_NOT_CREATE_PAYER Errore interno del sottosistema di pagamento. Codice Android // vedi \"Creazione SignupCryptoRequest\" SignupCryptoRequest cryptoRequest = new SignupCryptoRequest(...); ConioCredentials credentials = new ConioCredentials(\"username\", \"password\"); Acceptances acceptances = new Acceptances(Arrays.asList( new Acceptance(AcceptanceType.CLIENT_SUPPORT, true), new Acceptance(AcceptanceType.APP_IMPROVEMENT, true) )); SignupParams params = SignupParams.createCryptoSignup(acceptances, credentials, cryptoRequest); conio.userService.signup(params) .asCallback(result -> result.analysis( success -> { /* Handle success */ }, error -> { /* Handle error */ } )); iOS // vedi \"Creazione SignupCryptoRequest\" let credentials = ConioCredentials(username: \"username\", password: \"password\") var acceptancesList = [Acceptance]() acceptancesList.append(.init(type: .appImprovement, isAccepted: true)) acceptancesList.append(.init(type: .clientSupport, isAccepted: true)) let acceptances = Acceptances(acceptances: acceptancesList) let cryptoRequest = SignupCryptoRequest.init(proofID: \"\", cryptoProof: Data(), proofExpiration: 0, externalUserID: \"\", userLevel: \"\", iban: \"\", email: \"\", firstName: \"\", lastName: \"\") let signupParams = SignupParams.createCryptoSignup(credentials: credentials, acceptances: acceptances, cryptoRequest: cryptoRequest) conio.userService.signup(params: params).asCallback { result in switch result { case .success: // Handle Succes case .failure(let error): // Operation Error } } Login L'operazione di login permette di autenticarsi a Conio. \u00c8 raccomandabile eseguire questa operazione ad ogni avvio dell'applicazione, similmente a come avviene per altri servizi terzi. Metodo userService.login Parametri Un oggetto di tipo LoginParams , costruito tramite il metodo LoginParams.createCryptoLogin con: credentials : di tipo ConioCredentials con username e password dell'utente cryptoRequest : di tipo LoginCryptoRequest , che specifica ulteriori parametri comprovati da una firma, come descritto in creazione della LoginCryptoRequest . Risposta Un oggetto di tipo Success che indica che l'utente \u00e8 stato autenticato. Errori Non autorizzato Codice Android LoginCryptoRequest cryptoRequest = new LoginCryptoRequest(...); ConioCredentials credentials = new ConioCredentials(\"username\", \"password\"); LoginParams params = LoginParams.createCryptoLogin(credentials, cryptoRequest); conio.userService.login(params) .asCallback(result -> result.analysis( success -> { /* Handle success */ }, error -> { /* Handle error */ } )); iOS let params = LoginParams(username: \"lemonade\", password: \"secretword\", loginCryptoRequest: <LoginCryptoRequest>) conio.userService.login(params: params).asCallback { result in switch result { case .success: // success case .failure(let error): // Operation Error } } Logout Consente di disconnettere l'utenza Conio. Metodo userService.logout Risposta Un oggetto di tipo Success che indica che l'utente \u00e8 stato disconnesso. Codice Android conio.userService.logout() .asCallback(result -> result.analysis( success -> { /* Handle success */ }, error -> { /* Handle error */ } )); iOS conio.userService.logout().asCallback { result in switch result { case .success: // success case .failure(let error): // Operation Error } } Change Email Consente di modificare l'email associata all'utenza Conio. Metodo userService.changeEmail Parametri Un oggetto di tipo CryptoChangeEmailParams . newEmail : di tipo String , \u00e8 il nuovo valore utilizzato per modificare l'attuale email dell'utente. Risposta Android Un oggetto di tipo Success che indica se l'email dell'utente \u00e8 stata modificata correttamente. iOS Un oggetto di tipo Void che indica se l'email dell'utente \u00e8 stata modificata correttamente. Codice Android ChangeEmailParams params = new ChangeEmailParams(\"newEmail@conio.com\"); conio.userService.changeEmail(params).asCallback(result -> result.analysis( activityList -> { /* Success */ }, error -> { /* ... */ } )); iOS let params = ChangeEmailParams(newEmail: \"newEmail@conio.com\") conio.userService.changeEmail(with: params).asCallback { result in switch result { case .failure(let error): /* ... */ case .success: /* Success */ } }","title":"Operazioni sull'utente"},{"location":"Old/user/User/#operazioni-sullutente","text":"","title":"Operazioni sull'utente"},{"location":"Old/user/User/#recupero-dei-termini-di-servizio","text":"Questa operazione consente di recuperare le LegalAcceptances , ovvero le condizioni che l'utente potr\u00e0/dovr\u00e0 accettare in fase di signup (scelte che, durante l' operazione signup , dovranno essere descritte tramite la classe Acceptances ). L'oggetto LegalAcceptances recuperato conterr\u00e0 gli url per mostrare le pagine dei Termini di Servizio e Privacy Policies di Conio e il dettaglio delle acceptances ( AcceptanceDetail ) che l'utente dovr\u00e0 o meno accettare.","title":"Recupero dei termini di servizio"},{"location":"Old/user/User/#metodo","text":"userService.getLegalAcceptances","title":"Metodo"},{"location":"Old/user/User/#parametri","text":"Un oggetto di tipo LegalAcceptancesParams contenente la lingua di riferimento per ottenere le acceptances e gli url delle pagine web da mostrare all'utente.","title":"Parametri"},{"location":"Old/user/User/#risposta","text":"Un oggetto di tipo LegalAcceptances contenente la lista degli AcceptanceDetail , url dei Termini di Servizio , url relativo alle Privacy Policies e url relativo alle condizioni pre contrattuali.","title":"Risposta"},{"location":"Old/user/User/#codice","text":"","title":"Codice"},{"location":"Old/user/User/#android","text":"LegalAcceptancesParams params = new LegalAcceptancesParams(Language.ITALIAN); conio.userService.getLegalAcceptances(params) .asCallback(result -> result.analysis( acceptances -> { /* Handle LegalAcceptances */ }, error -> { /* Handle error */ } ));","title":"Android"},{"location":"Old/user/User/#ios","text":"let params = LegalAcceptancesParams(language: .italian) conio.userService.signup(params: params).asCallback { result in switch result { case .success(let acceptances): // LegalAcceptances case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/user/User/#autenticazione","text":"Per poter operare con il portafoglio Conio occorre essere autenticati. Se \u00e8 la prima volta che l'utente usa il servizio ci si pu\u00f2 autenticare con il metodo userService.signup , altrimenti con il metodo userService.login .","title":"Autenticazione"},{"location":"Old/user/User/#signup","text":"L'operazione di signup permette di creare un nuovo utente Conio.","title":"Signup"},{"location":"Old/user/User/#metodo_1","text":"userService.signup","title":"Metodo"},{"location":"Old/user/User/#parametri_1","text":"Un oggetto di tipo SignupParams , costruito tramite il metodo SignupParams.createCryptoSignup con: acceptances : di tipo Acceptances con l'esito della conferma ai termini di servizio da parte dell'utente, recuperati tramite le LegalAcceptances ; credentials : di tipo ConioCredentials con username e password dell'utente; cryptoRequest : di tipo SignupCryptoRequest , che specifica ulteriori parametri comprovati da una firma, come descritto in creazione della SignupCryptoRequest .","title":"Parametri"},{"location":"Old/user/User/#risposta_1","text":"Un oggetto di tipo Success che indica che l'utente \u00e8 stato autenticato.","title":"Risposta"},{"location":"Old/user/User/#errori","text":"ConioError : APP_IMPROVEMENT_ACCEPTANCE_NOT_ACCEPTED Acceptance obbligatoria; CLIENT_SUPPORT_ACCEPTANCE_NOT_ACCEPTED Acceptance obbligatoria; CRYPTO_PROOF_EXPIRED La crypto proof \u00e8 scaduta; INVALID_CRYPTO_PROOF La crypto proof non \u00e8 correttamente firmata; DUPLICATE_EMAIL_ADDRESS Indirizzo email duplicato; INVALID_IBAN IBAN non valido; WALLET_ALREADY_OWNED_BY_ANOTHER_USER Il wallet \u00e8 gi\u00e0 utilizzato da un altro utente; CARDS_SERVICE_COULD_NOT_CREATE_PAYER Errore interno del sottosistema di pagamento.","title":"Errori"},{"location":"Old/user/User/#codice_1","text":"","title":"Codice"},{"location":"Old/user/User/#android_1","text":"// vedi \"Creazione SignupCryptoRequest\" SignupCryptoRequest cryptoRequest = new SignupCryptoRequest(...); ConioCredentials credentials = new ConioCredentials(\"username\", \"password\"); Acceptances acceptances = new Acceptances(Arrays.asList( new Acceptance(AcceptanceType.CLIENT_SUPPORT, true), new Acceptance(AcceptanceType.APP_IMPROVEMENT, true) )); SignupParams params = SignupParams.createCryptoSignup(acceptances, credentials, cryptoRequest); conio.userService.signup(params) .asCallback(result -> result.analysis( success -> { /* Handle success */ }, error -> { /* Handle error */ } ));","title":"Android"},{"location":"Old/user/User/#ios_1","text":"// vedi \"Creazione SignupCryptoRequest\" let credentials = ConioCredentials(username: \"username\", password: \"password\") var acceptancesList = [Acceptance]() acceptancesList.append(.init(type: .appImprovement, isAccepted: true)) acceptancesList.append(.init(type: .clientSupport, isAccepted: true)) let acceptances = Acceptances(acceptances: acceptancesList) let cryptoRequest = SignupCryptoRequest.init(proofID: \"\", cryptoProof: Data(), proofExpiration: 0, externalUserID: \"\", userLevel: \"\", iban: \"\", email: \"\", firstName: \"\", lastName: \"\") let signupParams = SignupParams.createCryptoSignup(credentials: credentials, acceptances: acceptances, cryptoRequest: cryptoRequest) conio.userService.signup(params: params).asCallback { result in switch result { case .success: // Handle Succes case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/user/User/#login","text":"L'operazione di login permette di autenticarsi a Conio. \u00c8 raccomandabile eseguire questa operazione ad ogni avvio dell'applicazione, similmente a come avviene per altri servizi terzi.","title":"Login"},{"location":"Old/user/User/#metodo_2","text":"userService.login","title":"Metodo"},{"location":"Old/user/User/#parametri_2","text":"Un oggetto di tipo LoginParams , costruito tramite il metodo LoginParams.createCryptoLogin con: credentials : di tipo ConioCredentials con username e password dell'utente cryptoRequest : di tipo LoginCryptoRequest , che specifica ulteriori parametri comprovati da una firma, come descritto in creazione della LoginCryptoRequest .","title":"Parametri"},{"location":"Old/user/User/#risposta_2","text":"Un oggetto di tipo Success che indica che l'utente \u00e8 stato autenticato.","title":"Risposta"},{"location":"Old/user/User/#errori_1","text":"Non autorizzato","title":"Errori"},{"location":"Old/user/User/#codice_2","text":"","title":"Codice"},{"location":"Old/user/User/#android_2","text":"LoginCryptoRequest cryptoRequest = new LoginCryptoRequest(...); ConioCredentials credentials = new ConioCredentials(\"username\", \"password\"); LoginParams params = LoginParams.createCryptoLogin(credentials, cryptoRequest); conio.userService.login(params) .asCallback(result -> result.analysis( success -> { /* Handle success */ }, error -> { /* Handle error */ } ));","title":"Android"},{"location":"Old/user/User/#ios_2","text":"let params = LoginParams(username: \"lemonade\", password: \"secretword\", loginCryptoRequest: <LoginCryptoRequest>) conio.userService.login(params: params).asCallback { result in switch result { case .success: // success case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/user/User/#logout","text":"Consente di disconnettere l'utenza Conio.","title":"Logout"},{"location":"Old/user/User/#metodo_3","text":"userService.logout","title":"Metodo"},{"location":"Old/user/User/#risposta_3","text":"Un oggetto di tipo Success che indica che l'utente \u00e8 stato disconnesso.","title":"Risposta"},{"location":"Old/user/User/#codice_3","text":"","title":"Codice"},{"location":"Old/user/User/#android_3","text":"conio.userService.logout() .asCallback(result -> result.analysis( success -> { /* Handle success */ }, error -> { /* Handle error */ } ));","title":"Android"},{"location":"Old/user/User/#ios_3","text":"conio.userService.logout().asCallback { result in switch result { case .success: // success case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/user/User/#change-email","text":"Consente di modificare l'email associata all'utenza Conio.","title":"Change Email"},{"location":"Old/user/User/#metodo_4","text":"userService.changeEmail","title":"Metodo"},{"location":"Old/user/User/#parametri_3","text":"Un oggetto di tipo CryptoChangeEmailParams . newEmail : di tipo String , \u00e8 il nuovo valore utilizzato per modificare l'attuale email dell'utente.","title":"Parametri"},{"location":"Old/user/User/#risposta_4","text":"","title":"Risposta"},{"location":"Old/user/User/#android_4","text":"Un oggetto di tipo Success che indica se l'email dell'utente \u00e8 stata modificata correttamente.","title":"Android"},{"location":"Old/user/User/#ios_4","text":"Un oggetto di tipo Void che indica se l'email dell'utente \u00e8 stata modificata correttamente.","title":"iOS"},{"location":"Old/user/User/#codice_4","text":"","title":"Codice"},{"location":"Old/user/User/#android_5","text":"ChangeEmailParams params = new ChangeEmailParams(\"newEmail@conio.com\"); conio.userService.changeEmail(params).asCallback(result -> result.analysis( activityList -> { /* Success */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/user/User/#ios_5","text":"let params = ChangeEmailParams(newEmail: \"newEmail@conio.com\") conio.userService.changeEmail(with: params).asCallback { result in switch result { case .failure(let error): /* ... */ case .success: /* Success */ } }","title":"iOS"},{"location":"Old/wallet/Wallet.en/","text":"Wallet operations Bitcoin address Show one of the unused Bitcoin addresses of the wallet, that you can use to receive bitcoins. Returns A string containing the Bitcoin address. Code Android conio.walletService.currentBitcoinAddress(result->{ result.analysis(address-> { // String }, error-> { // Exception }); }); iOS conio.walletService.currentBitcoinAddress { result in result.analysis(ifSuccess: { address in // String }, ifFailure: { error in // ServiceError }) } Bitcoin Movement List Each transaction (send, receive, buy, sell) is represented by an Activity . You can get a list of these activites using the following method: Parameters An ActivitiesParams struct containing: index : You can get 6 activities at a time. The index is the starting point of the list you want. For example using an index = 0 means you will get the last 6 activities. Then you can repeat this with index 6 which will get you the activities right before. important : To get all the activities you just have to repeat this call until you get less than 6 activities. types : you can use types if you want to filter the activities. For example you want to get only the buy activities. currency : the fiat currency your activities will be priced in. Returns A WalletActivities struct containing: - activities : an array of Activity . Each activity has its own ID , a Type (send, buy, sell, receive), an amount in Satoshi , and a confirmationStatus which will let you know if a bitcoin transaction is included in the blockchain. Code Android // To retrieve all the activities ActivityType[] types = ActivityType.all() ActivitiesParams params = new ActivitiesParams(0, types, Currency.EUR); // To retrieve purchases and sells ActivityType[] types = new ActivityType[] { ActivityType.BUY, ActivityType.SELL }; ActivitiesParams params = new ActivitiesParams(0, types, Currency.EUR); conio.walletService.walletActivities(params, result->{ result.analysis(activities-> { // WalletActivities }, error-> { // Exception }); }); iOS // To retrieve all the activities let params = ActivitiesParams( index: 0, types: ActivityType.all currency: .eur ) // To retrieve only purchases and sells let params = ActivitiesParams( index: 0, types: [.buy, .sell] currency: .eur ) conio.walletService.walletActivities(params: activitiesParams) { result in result.analysis(ifSuccess: { activities in // WalletActivities }, ifFailure: { error in // ServiceError }) } Bitcoin Movement List as PDF Each transaction (send, receive, buy, sell) is represented by an Activity . You can get a list of these activites in PDF format using the dedicated method. Method Android walletService.activityListPdf iOS walletService.walletPDFActivities Parameters Android An ActivityListPdfParams struct containing: types : List<ActivityType> object type, an enum list which can be used to filter the activities. ActivityType.all() will return a list of all Activity types; currency : Currency object type, the fiat currency activities will be priced in (only in Euros at the moment); @Optional @Default(6) limit : int? nullable object type, the max transactions number that will be received. If null there will be no max transaction number on activities received. @Optional timeFrame : TimeFrame? object type, the temporary window that limit the time interval between Activity objects will be included in the response. iOS Un oggetto di tipo PDFActivitiesParams contenente: types : Array<WalletActivityType> , object type, an enum list which can be used to filter the activities. WalletActivityType.allCases will return a list of all Activity types; currency : Currency object type, the fiat currency activities will be priced in (only in Euros at the moment); limit : Int? optional object type (default value 6), the max transactions number that will be received. If nil there will be no max transaction number on activities received. timeFrame : TimeFrame? object type, the temporary window that limit the time interval between Activity objects will be included in the response. Returns Android A InputStream object with PDF bytes stream. iOS A Data object with PDF byte buffer. Code Android // Example 1: retrieve 6 activities of all type List<ActivityType> types = ActivityType.all; ActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR); // Example 2: retrieve 10 sell activities List<ActivityType> types = Collections.singletonList(ActivityType.SELL); ActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR, 10); // Example 3: retrieve 6 buy and receive activities of the last month List<ActivityType> types = Arrays.asList(ActivityType.BUY, ActivityType.RECEIVE); ActivityListPdfParams params = new ActivityListPdfParams( types, // types Currency.EUR, // currency 6, // limit TimeFrame.lastMonth() // timeFrame ); conio.walletService.activityListPdf(params) .asCallback(result -> result.analysis( stream -> { /* Handle InputStream */ }, error -> { /* ... */ } )); iOS let types = WalletActivityType.allCases let params = PDFActivitiesParams(types: types, currency: .EUR) conio.walletService.walletPDFActivities(with: params).asCallback { result in switch result { case .success(let data): // PDF WalletActivities case .failure(let error): // Operation Error } } Activity detail You can get all the info about a single activity by using this method. Parameters An ActivityDetailsParams containing: activityId : the identifier of the activity you want to get the details of. currency : the fiat currency your activity will be priced in. Returns An ActivityDetails containing: id : identifier of the activity type : activity type timestamp : timestamp when the activity was created @Optional transaction : the info about the Bitcoin transaction related to that activity. Contains info like the hash of the transaction, number of confirmations, the Bitcoin address that is receiving the Bitcoin, the fiat currency equivalent, the fees payed and more. @Optional bid : info about the bid. Contains all the info about the purchase. @Optional payment : info about the payment, including the id of the payment method, the value of the payment and its status. @Optional ask : info about the ask. Contains all the info about the sell. @Optional sell : info about the wire transfer, the identifier , cro Code Android ActivityDetailsParams params = new ActivityDetailsParams(\"id\", Currency.EUR); conio.walletService.activityDetails(params, result->{ result.analysis(details-> { // ActivityDetails }, error-> { // Exception }); }); iOS let params = ActivityDetailsParams(activityId: \"activityId\", currency: .eur) conio.walletService.activityDetails(params: params) { result in result.analysis(ifSuccess: { details in // ActivityDetails }, ifFailure: { error in // ServiceError }) } Wallet balance You can get the balance of the wallet. Returns A WalletDetails containing the amount of Bitcoin in the wallet (the amount is expressed in satoshi, the smallest unit of Bitcoin) (1 bitcoin = 100.000.000) confirmedBalance : bitcoins that have at least 3 confirmations on the blockchain and that the user can send/sell unconfirmedBalance : bitcoins with less than 3 confirmations, that the user can't spend yet Code Android conio.walletService.walletdetails(result->{ result.analysis(details-> { // WalletDetails }, error-> { // Exception }); }); iOS conio.walletService.walletDetails { result in result.analysis(ifSuccess: { details in // WalletDetails }, ifFailure: { error in // ServiceError }) } Send Bitcoin With this SDK you can send bitcoins to any other Bitcoin wallet. There is also a second factor to protect the operation. Get sendable Max Amount First of all you will need to fetch the maximum amount the user can send, which is equal to the amount in their wallet minus the mining fees. Conio will give you exactly the maximum amount in Satoshis that the user can send if you make a WithdrawalFees request if you simply pass the destAddress Get mining fees If the user inputs an amount lower or equal to the Max Amount you can then request the available mining-fees speeds. Conio has an algorithm that you can use. Parameters A WithdrawalFeesParams struct: destAddress : the address that will receive the bitcoins amount : the bitcoin amount, in Satoshi. If you input 0 you will get the fees as if you were sending the maximum amount in the wallet speed : a specific speed (1 faster, 5 slower), if you don't specify a speed (priority) you will get an array with all the available speeds. Which params should you use? To get the Max amount : you just have to pass the destAddress To get the Available Fees : You have to use destAddress and amount . The resulting array cointains all the available speeds. Return An AvailableWithdrawalFees struct containing: absoluteFees : total amount of the mining fees expressed in satoshi amount : the amount, expressed in satoshi, that the user can send at the requested speed feePerByte : transaction size (bytes)/ absoluteFees = feePerByte transactionSpeed : transaction priority availableFees : an array contaning all the possible speeds Errors NOT_ENOUGH_BTC_AMOUNT DUST_TRANSACTION the amount you are trying to send is too small NO_SUCH_WITHDRAWAL_FEES_INFO: Can't calculate the mining fees iOS example // maximum amount you can send (speed 5) let params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\") // all the available speeds for a set amount: 10000 satoshi let params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: 10_000) // send everything with the fastest speed (speed 1) let params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: 0, speed: .transactionSpeedType1) conio.walletService.withdrawalFees { result in result.analysis(ifSuccess: { availableFees in // availableFees }, ifFailure: { error in // ServiceError }) } Android example // maximum amount you can send (speed 5) let params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\") // all the available speeds for a set amount: 10000 satoshi let params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: 10_000) // send everything with the fastest speed (speed 1) WithdrawalFeesParams params = new WithdrawalFeesParams(\"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", 0L, TransactionSpeedType.SPEED_ONE); conio.walletService.withdrawalFees(params, response -> { response.analysis(availableFees -> { // availableFees }, error -> { // ServiceError }); }); Finalize Send - second factor Now that you have the feePerByte you can finally send the bitcoins using the following method. After the first attempt you will receive an error asking for a 2fa code. The user will receive an email with the code that can be used for 5 minutes . You will pass this code to the SDK in the parameters of the same method. Parameters for the first attempt Use a TransactionParams struct: address : Bitcoin address amount : satoshi amount of the transaction fee : mining fee Satoshi per byte iOS let params = TransactionParams( address: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: UInt64(1000), feePerByte: UInt64(10) ) conio.walletService.sendTransaction(params) { result in result.analysis(ifSuccess: { sentTransaction in // ... }, ifFailure: { error in // Get the mfa token if case let .mfaRequired(token: token) = error { let mfaToken = token } }) } Android // Chiamata senza Codice MFA ed MFA Token TransactionParams params = new TransactionParams( \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", 1000L, 10L ); conio.walletService.sendTransaction(params, result -> { result.analysis(sentTransaction -> { // ... }, error -> { // Get the mfa token if (error instanceof MfaRequiredException) { MfaRequiredException mfaRequiredException = (MfaRequiredException) error; String mfaToken = mfaRequiredException.getMfaToken(); } } }); }); Optional deep link The user can click on a deep link found in their email like this one: conio-internal://request_btc_withdrawal?code=<MFACode> To avoid losing data when the user puts the app in background and then clicks on the deep link, you can save the info about the send (amount, address and fees) in the memory of the device. Parameters for the second attempt To send Bitcoin you can use a TransactionParams struct: address : Bitcoin address amount : satoshi amount of the transaction fee : mining fee Satoshi per byte mfaCode : the code that the user received in their email after the first attempt Returns A SentTransaction containing: transactionId : transaction identifier fee : payed mining fees Errors [iOS] ServiceError.mfaRequired : No mfaCode used or the code is incorrect. The user will receive a new code. [Android] ConioError.MFA_REQUIRED : No mfaCode used or the code is incorrect. The user will receive a new code. NOT_ENOUGH_BTC_AMOUNT DUST_TRANSACTION the amount you are trying to send is too small INVALID_MESSAGE_SIGNATURE iOS example let params = TransactionParams( address: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: UInt64(1000), feePerByte: UInt64(10), mfaToken: \"OciqYgdjxJV413iHkFqgUYGk\", mfaCode: \"806157\" ) conio.walletService.sendTransaction(params) { result in result.analysis(ifSuccess: { sentTransaction in // SentTransaction }, ifFailure: { error in // ServiceError }) } Android example // MFA e MFA Token TransactionParams params = new TransactionParams( \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", 1000L, 10L, \"OciqYgdjxJV413iHkFqgUYGk\", \"806157\" ); conio.walletService.sendTransaction(params, result -> { result.analysis(sentTransaction -> { // SentTransaction }, error -> { // Exception }); }); Wallet backup code Show the wallet backup code: a list of 12 words. Returns A MnemonicWords containing an array with 12 strings in it. Errors missingMnemonic : failed to retrieve the backup code Android conio.walletService.readMnemonic(result->{ result.analysis(mnemonicWords-> { // MnemonicWords }, error-> { // Exception }); }); iOS conio.walletService.readMnemonic { result in result.analysis(ifSuccess: { mnemonicWords in // MnemonicWords }, ifFailure: { error in // ServiceError }) }","title":"Wallet operations"},{"location":"Old/wallet/Wallet.en/#wallet-operations","text":"","title":"Wallet operations"},{"location":"Old/wallet/Wallet.en/#bitcoin-address","text":"Show one of the unused Bitcoin addresses of the wallet, that you can use to receive bitcoins.","title":"Bitcoin address"},{"location":"Old/wallet/Wallet.en/#returns","text":"A string containing the Bitcoin address.","title":"Returns"},{"location":"Old/wallet/Wallet.en/#code","text":"","title":"Code"},{"location":"Old/wallet/Wallet.en/#android","text":"conio.walletService.currentBitcoinAddress(result->{ result.analysis(address-> { // String }, error-> { // Exception }); });","title":"Android"},{"location":"Old/wallet/Wallet.en/#ios","text":"conio.walletService.currentBitcoinAddress { result in result.analysis(ifSuccess: { address in // String }, ifFailure: { error in // ServiceError }) }","title":"iOS"},{"location":"Old/wallet/Wallet.en/#bitcoin-movement-list","text":"Each transaction (send, receive, buy, sell) is represented by an Activity . You can get a list of these activites using the following method:","title":"Bitcoin Movement List"},{"location":"Old/wallet/Wallet.en/#parameters","text":"An ActivitiesParams struct containing: index : You can get 6 activities at a time. The index is the starting point of the list you want. For example using an index = 0 means you will get the last 6 activities. Then you can repeat this with index 6 which will get you the activities right before. important : To get all the activities you just have to repeat this call until you get less than 6 activities. types : you can use types if you want to filter the activities. For example you want to get only the buy activities. currency : the fiat currency your activities will be priced in.","title":"Parameters"},{"location":"Old/wallet/Wallet.en/#returns_1","text":"A WalletActivities struct containing: - activities : an array of Activity . Each activity has its own ID , a Type (send, buy, sell, receive), an amount in Satoshi , and a confirmationStatus which will let you know if a bitcoin transaction is included in the blockchain.","title":"Returns"},{"location":"Old/wallet/Wallet.en/#code_1","text":"","title":"Code"},{"location":"Old/wallet/Wallet.en/#android_1","text":"// To retrieve all the activities ActivityType[] types = ActivityType.all() ActivitiesParams params = new ActivitiesParams(0, types, Currency.EUR); // To retrieve purchases and sells ActivityType[] types = new ActivityType[] { ActivityType.BUY, ActivityType.SELL }; ActivitiesParams params = new ActivitiesParams(0, types, Currency.EUR); conio.walletService.walletActivities(params, result->{ result.analysis(activities-> { // WalletActivities }, error-> { // Exception }); });","title":"Android"},{"location":"Old/wallet/Wallet.en/#ios_1","text":"// To retrieve all the activities let params = ActivitiesParams( index: 0, types: ActivityType.all currency: .eur ) // To retrieve only purchases and sells let params = ActivitiesParams( index: 0, types: [.buy, .sell] currency: .eur ) conio.walletService.walletActivities(params: activitiesParams) { result in result.analysis(ifSuccess: { activities in // WalletActivities }, ifFailure: { error in // ServiceError }) }","title":"iOS"},{"location":"Old/wallet/Wallet.en/#bitcoin-movement-list-as-pdf","text":"Each transaction (send, receive, buy, sell) is represented by an Activity . You can get a list of these activites in PDF format using the dedicated method.","title":"Bitcoin Movement List as PDF"},{"location":"Old/wallet/Wallet.en/#method","text":"","title":"Method"},{"location":"Old/wallet/Wallet.en/#android_2","text":"walletService.activityListPdf","title":"Android"},{"location":"Old/wallet/Wallet.en/#ios_2","text":"walletService.walletPDFActivities","title":"iOS"},{"location":"Old/wallet/Wallet.en/#parameters_1","text":"","title":"Parameters"},{"location":"Old/wallet/Wallet.en/#android_3","text":"An ActivityListPdfParams struct containing: types : List<ActivityType> object type, an enum list which can be used to filter the activities. ActivityType.all() will return a list of all Activity types; currency : Currency object type, the fiat currency activities will be priced in (only in Euros at the moment); @Optional @Default(6) limit : int? nullable object type, the max transactions number that will be received. If null there will be no max transaction number on activities received. @Optional timeFrame : TimeFrame? object type, the temporary window that limit the time interval between Activity objects will be included in the response.","title":"Android"},{"location":"Old/wallet/Wallet.en/#ios_3","text":"Un oggetto di tipo PDFActivitiesParams contenente: types : Array<WalletActivityType> , object type, an enum list which can be used to filter the activities. WalletActivityType.allCases will return a list of all Activity types; currency : Currency object type, the fiat currency activities will be priced in (only in Euros at the moment); limit : Int? optional object type (default value 6), the max transactions number that will be received. If nil there will be no max transaction number on activities received. timeFrame : TimeFrame? object type, the temporary window that limit the time interval between Activity objects will be included in the response.","title":"iOS"},{"location":"Old/wallet/Wallet.en/#returns_2","text":"","title":"Returns"},{"location":"Old/wallet/Wallet.en/#android_4","text":"A InputStream object with PDF bytes stream.","title":"Android"},{"location":"Old/wallet/Wallet.en/#ios_4","text":"A Data object with PDF byte buffer.","title":"iOS"},{"location":"Old/wallet/Wallet.en/#code_2","text":"","title":"Code"},{"location":"Old/wallet/Wallet.en/#android_5","text":"// Example 1: retrieve 6 activities of all type List<ActivityType> types = ActivityType.all; ActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR); // Example 2: retrieve 10 sell activities List<ActivityType> types = Collections.singletonList(ActivityType.SELL); ActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR, 10); // Example 3: retrieve 6 buy and receive activities of the last month List<ActivityType> types = Arrays.asList(ActivityType.BUY, ActivityType.RECEIVE); ActivityListPdfParams params = new ActivityListPdfParams( types, // types Currency.EUR, // currency 6, // limit TimeFrame.lastMonth() // timeFrame ); conio.walletService.activityListPdf(params) .asCallback(result -> result.analysis( stream -> { /* Handle InputStream */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/wallet/Wallet.en/#ios_5","text":"let types = WalletActivityType.allCases let params = PDFActivitiesParams(types: types, currency: .EUR) conio.walletService.walletPDFActivities(with: params).asCallback { result in switch result { case .success(let data): // PDF WalletActivities case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/wallet/Wallet.en/#activity-detail","text":"You can get all the info about a single activity by using this method.","title":"Activity detail"},{"location":"Old/wallet/Wallet.en/#parameters_2","text":"An ActivityDetailsParams containing: activityId : the identifier of the activity you want to get the details of. currency : the fiat currency your activity will be priced in.","title":"Parameters"},{"location":"Old/wallet/Wallet.en/#returns_3","text":"An ActivityDetails containing: id : identifier of the activity type : activity type timestamp : timestamp when the activity was created @Optional transaction : the info about the Bitcoin transaction related to that activity. Contains info like the hash of the transaction, number of confirmations, the Bitcoin address that is receiving the Bitcoin, the fiat currency equivalent, the fees payed and more. @Optional bid : info about the bid. Contains all the info about the purchase. @Optional payment : info about the payment, including the id of the payment method, the value of the payment and its status. @Optional ask : info about the ask. Contains all the info about the sell. @Optional sell : info about the wire transfer, the identifier , cro","title":"Returns"},{"location":"Old/wallet/Wallet.en/#code_3","text":"","title":"Code"},{"location":"Old/wallet/Wallet.en/#android_6","text":"ActivityDetailsParams params = new ActivityDetailsParams(\"id\", Currency.EUR); conio.walletService.activityDetails(params, result->{ result.analysis(details-> { // ActivityDetails }, error-> { // Exception }); });","title":"Android"},{"location":"Old/wallet/Wallet.en/#ios_6","text":"let params = ActivityDetailsParams(activityId: \"activityId\", currency: .eur) conio.walletService.activityDetails(params: params) { result in result.analysis(ifSuccess: { details in // ActivityDetails }, ifFailure: { error in // ServiceError }) }","title":"iOS"},{"location":"Old/wallet/Wallet.en/#wallet-balance","text":"You can get the balance of the wallet.","title":"Wallet balance"},{"location":"Old/wallet/Wallet.en/#returns_4","text":"A WalletDetails containing the amount of Bitcoin in the wallet (the amount is expressed in satoshi, the smallest unit of Bitcoin) (1 bitcoin = 100.000.000) confirmedBalance : bitcoins that have at least 3 confirmations on the blockchain and that the user can send/sell unconfirmedBalance : bitcoins with less than 3 confirmations, that the user can't spend yet","title":"Returns"},{"location":"Old/wallet/Wallet.en/#code_4","text":"","title":"Code"},{"location":"Old/wallet/Wallet.en/#android_7","text":"conio.walletService.walletdetails(result->{ result.analysis(details-> { // WalletDetails }, error-> { // Exception }); });","title":"Android"},{"location":"Old/wallet/Wallet.en/#ios_7","text":"conio.walletService.walletDetails { result in result.analysis(ifSuccess: { details in // WalletDetails }, ifFailure: { error in // ServiceError }) }","title":"iOS"},{"location":"Old/wallet/Wallet.en/#send-bitcoin","text":"With this SDK you can send bitcoins to any other Bitcoin wallet. There is also a second factor to protect the operation.","title":"Send Bitcoin"},{"location":"Old/wallet/Wallet.en/#get-sendable-max-amount","text":"First of all you will need to fetch the maximum amount the user can send, which is equal to the amount in their wallet minus the mining fees. Conio will give you exactly the maximum amount in Satoshis that the user can send if you make a WithdrawalFees request if you simply pass the destAddress","title":"Get sendable Max Amount"},{"location":"Old/wallet/Wallet.en/#get-mining-fees","text":"If the user inputs an amount lower or equal to the Max Amount you can then request the available mining-fees speeds. Conio has an algorithm that you can use.","title":"Get mining fees"},{"location":"Old/wallet/Wallet.en/#parameters_3","text":"A WithdrawalFeesParams struct: destAddress : the address that will receive the bitcoins amount : the bitcoin amount, in Satoshi. If you input 0 you will get the fees as if you were sending the maximum amount in the wallet speed : a specific speed (1 faster, 5 slower), if you don't specify a speed (priority) you will get an array with all the available speeds.","title":"Parameters"},{"location":"Old/wallet/Wallet.en/#which-params-should-you-use","text":"To get the Max amount : you just have to pass the destAddress To get the Available Fees : You have to use destAddress and amount . The resulting array cointains all the available speeds.","title":"Which params should you use?"},{"location":"Old/wallet/Wallet.en/#return","text":"An AvailableWithdrawalFees struct containing: absoluteFees : total amount of the mining fees expressed in satoshi amount : the amount, expressed in satoshi, that the user can send at the requested speed feePerByte : transaction size (bytes)/ absoluteFees = feePerByte transactionSpeed : transaction priority availableFees : an array contaning all the possible speeds","title":"Return"},{"location":"Old/wallet/Wallet.en/#errors","text":"NOT_ENOUGH_BTC_AMOUNT DUST_TRANSACTION the amount you are trying to send is too small NO_SUCH_WITHDRAWAL_FEES_INFO: Can't calculate the mining fees","title":"Errors"},{"location":"Old/wallet/Wallet.en/#ios-example","text":"// maximum amount you can send (speed 5) let params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\") // all the available speeds for a set amount: 10000 satoshi let params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: 10_000) // send everything with the fastest speed (speed 1) let params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: 0, speed: .transactionSpeedType1) conio.walletService.withdrawalFees { result in result.analysis(ifSuccess: { availableFees in // availableFees }, ifFailure: { error in // ServiceError }) }","title":"iOS example"},{"location":"Old/wallet/Wallet.en/#android-example","text":"// maximum amount you can send (speed 5) let params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\") // all the available speeds for a set amount: 10000 satoshi let params = WithdrawalFeesParams(destAddress: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: 10_000) // send everything with the fastest speed (speed 1) WithdrawalFeesParams params = new WithdrawalFeesParams(\"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", 0L, TransactionSpeedType.SPEED_ONE); conio.walletService.withdrawalFees(params, response -> { response.analysis(availableFees -> { // availableFees }, error -> { // ServiceError }); });","title":"Android example"},{"location":"Old/wallet/Wallet.en/#finalize-send-second-factor","text":"Now that you have the feePerByte you can finally send the bitcoins using the following method. After the first attempt you will receive an error asking for a 2fa code. The user will receive an email with the code that can be used for 5 minutes . You will pass this code to the SDK in the parameters of the same method.","title":"Finalize Send - second factor"},{"location":"Old/wallet/Wallet.en/#parameters-for-the-first-attempt","text":"Use a TransactionParams struct: address : Bitcoin address amount : satoshi amount of the transaction fee : mining fee Satoshi per byte","title":"Parameters for the first attempt"},{"location":"Old/wallet/Wallet.en/#ios_8","text":"let params = TransactionParams( address: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: UInt64(1000), feePerByte: UInt64(10) ) conio.walletService.sendTransaction(params) { result in result.analysis(ifSuccess: { sentTransaction in // ... }, ifFailure: { error in // Get the mfa token if case let .mfaRequired(token: token) = error { let mfaToken = token } }) }","title":"iOS"},{"location":"Old/wallet/Wallet.en/#android_8","text":"// Chiamata senza Codice MFA ed MFA Token TransactionParams params = new TransactionParams( \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", 1000L, 10L ); conio.walletService.sendTransaction(params, result -> { result.analysis(sentTransaction -> { // ... }, error -> { // Get the mfa token if (error instanceof MfaRequiredException) { MfaRequiredException mfaRequiredException = (MfaRequiredException) error; String mfaToken = mfaRequiredException.getMfaToken(); } } }); });","title":"Android"},{"location":"Old/wallet/Wallet.en/#optional-deep-link","text":"The user can click on a deep link found in their email like this one: conio-internal://request_btc_withdrawal?code=<MFACode> To avoid losing data when the user puts the app in background and then clicks on the deep link, you can save the info about the send (amount, address and fees) in the memory of the device.","title":"Optional deep link"},{"location":"Old/wallet/Wallet.en/#parameters-for-the-second-attempt","text":"To send Bitcoin you can use a TransactionParams struct: address : Bitcoin address amount : satoshi amount of the transaction fee : mining fee Satoshi per byte mfaCode : the code that the user received in their email after the first attempt","title":"Parameters for the second attempt"},{"location":"Old/wallet/Wallet.en/#returns_5","text":"A SentTransaction containing: transactionId : transaction identifier fee : payed mining fees","title":"Returns"},{"location":"Old/wallet/Wallet.en/#errors_1","text":"[iOS] ServiceError.mfaRequired : No mfaCode used or the code is incorrect. The user will receive a new code. [Android] ConioError.MFA_REQUIRED : No mfaCode used or the code is incorrect. The user will receive a new code. NOT_ENOUGH_BTC_AMOUNT DUST_TRANSACTION the amount you are trying to send is too small INVALID_MESSAGE_SIGNATURE","title":"Errors"},{"location":"Old/wallet/Wallet.en/#ios-example_1","text":"let params = TransactionParams( address: \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", amount: UInt64(1000), feePerByte: UInt64(10), mfaToken: \"OciqYgdjxJV413iHkFqgUYGk\", mfaCode: \"806157\" ) conio.walletService.sendTransaction(params) { result in result.analysis(ifSuccess: { sentTransaction in // SentTransaction }, ifFailure: { error in // ServiceError }) }","title":"iOS example"},{"location":"Old/wallet/Wallet.en/#android-example_1","text":"// MFA e MFA Token TransactionParams params = new TransactionParams( \"mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt\", 1000L, 10L, \"OciqYgdjxJV413iHkFqgUYGk\", \"806157\" ); conio.walletService.sendTransaction(params, result -> { result.analysis(sentTransaction -> { // SentTransaction }, error -> { // Exception }); });","title":"Android example"},{"location":"Old/wallet/Wallet.en/#wallet-backup-code","text":"Show the wallet backup code: a list of 12 words.","title":"Wallet backup code"},{"location":"Old/wallet/Wallet.en/#returns_6","text":"A MnemonicWords containing an array with 12 strings in it.","title":"Returns"},{"location":"Old/wallet/Wallet.en/#errors_2","text":"missingMnemonic : failed to retrieve the backup code","title":"Errors"},{"location":"Old/wallet/Wallet.en/#android_9","text":"conio.walletService.readMnemonic(result->{ result.analysis(mnemonicWords-> { // MnemonicWords }, error-> { // Exception }); });","title":"Android"},{"location":"Old/wallet/Wallet.en/#ios_9","text":"conio.walletService.readMnemonic { result in result.analysis(ifSuccess: { mnemonicWords in // MnemonicWords }, ifFailure: { error in // ServiceError }) }","title":"iOS"},{"location":"Old/wallet/Wallet/","text":"Operazioni sul portafoglio Indirizzo Bitcoin attuale Permette di recuperare l'indirizzo corrente del portafoglio su cui sar\u00e0 possibile ricevere delle transazioni. Metodo walletService.currentBitcoinAddress Risposta Una string contenente l'indirizzo Bitcoin attuale. Errori Non autorizzato Codice Android conio.walletService.currentBitcoinAddress() .asCallback(result -> result.analysis( address -> {/* Handle string wallet address */ }, error -> { /* ... */ } )); iOS conio.walletService.currentBitcoinAddress().asCallback { result in switch result { case .success(let address): // Handle string wallet address case .failure(let error): // Operation Error } } Lista movimenti bitcoin Ciascuna operazione di invio, ricezione, acquisto e vendita di Bitcoin \u00e8 rappresentata da un' Activity . La lista delle attivit\u00e0 svolte dall'utente pu\u00f2 essere recuperata tramite l'apposito metodo. Metodo walletService.activityList Parametri Un oggetto di tipo ActivityListParams contenente: types : di tipo List<ActivityType> , una lista di enumerati ActivityType che ci permette di specificare le tipologie di activities da recuperare. Tramite ActivityType.all() \u00e8 possibile ottenere una lista di tutte le tipologie di Activity ; currency : di tipo Currency , la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro); @Default(6) limit : di tipo intero , il numero massimo di transazioni da ricevere nella risposta; @Opzionale nextPage : di tipo String , token per la paginazione delle activities, ottenibile tramite il risultato di una prima richiesta di lista movimenti con questo valore nullo. Inserendo tale valore \u00e8 possibile ottenere le successive n Activity (con n = valore inserito come limit ); @Opzionale timeFrame : di tipo TimeFrame , la finestra temporale che definisce quali Activity includere nella risposta. Risposta Un oggetto di tipo ActivityList contenente: activities : di tipo List<SimpleActivity> , ovvero la lista delle Activity dell'utente richieste; @Opzionale nextPage : di tipo String , token per la paginazione delle activity, che pu\u00f2 essere inserito in una successiva richiesta di lista movimenti . Quando questo campo \u00e8 nullo, significa che non esistono ulteriori Activity tra quelle che rispettano i filtri inseriti. Ogni Activity resituita (di tipo SimpleActivity ) contiene: activityId : di tipo String , l'identificativo univoco della Activity ; type : di tipo ActivityType , la tipologia di Activity ( SEND , BUY , SELL , RECEIVE ); status : di tipo TransactionStatus , lo stato di conferma della transazione Bitcoin legata all' Activity ( UNCONFIRMED , PARTIALLY_CONFIRMED , CONFIRMED ); createdAt : di tipo long , l'istante temporale in cui \u00e8 stata creata l' Activity , espresso come Unix Timestamp in millisecondi. cryptoAmount : di tipo long , l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi), movimentato dall' Activity ; fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il corrispettivo ammontare di cryptoAmount , calcolato nella valuta indicata tramite il campo currency ; Errori Non autorizzato Codice Android // Example 1: retrieve 6 activities of all type List<ActivityType> types = ActivityType.all; ActivityListParams params = new ActivityListParams(types, Currency.EUR); // Example 2: retrieve 10 sell activities List<ActivityType> types = Collections.singletonList(ActivityType.SELL); ActivityListParams params = new ActivityListParams(types, Currency.EUR, 10); // Example 3: retrieve 6 buy and receive activities of the last month List<ActivityType> types = Arrays.asList(ActivityType.BUY, ActivityType.RECEIVE); ActivityListParams params = new ActivityListParams( types, // types Currency.EUR, // currency 6, // limit null, // nextPage TimeFrame.lastMonth() // timeFrame ); conio.walletService.activityList(params) .asCallback(result -> result.analysis( activityList -> { /* Handle ActivityList */ }, error -> { /* ... */ } )); iOS let types = WalletActivityType.allCases let params = ActivitiesParams(nextPage: \"string\", types: types) conio.walletService.walletActivities(params: params).asCallback { result in switch result { case .success(let activities): // WalletActivities case .failure(let error): // Operation Error } } Lista movimenti bitcoin in formato PDF Ciascuna operazione di invio, ricezione, acquisto e vendita di Bitcoin \u00e8 rappresentata da un' Activity . La lista delle attivit\u00e0 svolte dall'utente, in formato PDF, pu\u00f2 essere recuperata tramite l'apposito metodo. Metodo Android walletService.activityListPdf iOS walletService.walletPDFActivities Parametri Android Un oggetto di tipo ActivityListPdfParams contenente: types : di tipo List<ActivityType> , una lista di enumerati ActivityType che ci permette di specificare le tipologie di activities da recuperare. Tramite ActivityType.all() \u00e8 possibile ottenere una lista di tutte le tipologie di Activity ; currency : di tipo Currency , la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro); @Default(6) limit : di tipo intero , il numero massimo di transazioni da ricevere nella risposta; @Opzionale timeFrame : di tipo TimeFrame , la finestra temporale che definisce quali Activity includere nella risposta. iOS Un oggetto di tipo PDFActivitiesParams contenente: types : di tipo Array<WalletActivityType> , una lista di enumerati WalletActivityType che ci permette di specificare le tipologie di activities da recuperare. Tramite WalletActivityType.allCases \u00e8 possibile ottenere una lista di tutte le tipologie di Activity ; currency : di tipo Currency , la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro); limit : di tipo Int (default value 6), il numero massimo di transazioni da ricevere nella risposta; timeFrame : di tipo TimeFrame? , la finestra temporale che definisce quali Activity includere nella risposta. Risposta Android Un oggetto di tipo InputStream contenente il bytes stream del PDF. iOS Un oggetto di tipo Data contenente il byte buffer del PDF. Errori Non autorizzato Codice Android // Example 1: retrieve 6 activities of all type List<ActivityType> types = ActivityType.all; ActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR); // Example 2: retrieve 10 sell activities List<ActivityType> types = Collections.singletonList(ActivityType.SELL); ActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR, 10); // Example 3: retrieve 6 buy and receive activities of the last month List<ActivityType> types = Arrays.asList(ActivityType.BUY, ActivityType.RECEIVE); ActivityListPdfParams params = new ActivityListPdfParams( types, // types Currency.EUR, // currency 6, // limit TimeFrame.lastMonth() // timeFrame ); conio.walletService.activityListPdf(params) .asCallback(result -> result.analysis( stream -> { /* Handle InputStream */ }, error -> { /* ... */ } )); iOS let types = WalletActivityType.allCases let params = PDFActivitiesParams(types: types, currency: .EUR) conio.walletService.walletPDFActivities(with: params).asCallback { result in switch result { case .success(let data): // PDF WalletActivities case .failure(let error): // Operation Error } } Dettaglio di un movimento Recuperata la lista delle attivit\u00e0 \u00e8 possibile ottenere ulteriori informazioni su un Activity specifica richiedendone il dettaglio. Metodo walletService.activityDetails Parametri Un oggetto di tipo ActivityDetailsParams contenente: activityId : di tipo String , l'id dell' Activity della quale si vuole leggere il dettaglio; currency : di tipo Currency , la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro); Risposta Un oggetto di tipo ActivityDetails contenente: activityId : di tipo String , l'id dell'attivit\u00e0; type : di tipo ActivityType , la tipologia di Activity ( SEND , BUY , SELL , RECEIVE ); createdAt : di tipo Long , l'istante temporale in cui \u00e8 stata creata l' Activity , espresso come Unix Timestamp in millisecondi. @Opzionale transaction : di tipo Transaction , la transazione annessa. Popolato nel caso in cui sia stata effettuata una transazione. Contiene informazioni sulla transazione Bitcoin associata all' Activity , quali: hash : di tipo String , l'hash della transazione Bitcoin; status : di tipo TransactionStatus , lo stato di conferma della transazione Bitcoin legata all' Activity ( UNCONFIRMED , PARTIALLY_CONFIRMED , CONFIRMED ); type : di tipo TransactionType , il tipo di transazione Bitcoin ( GENERIC o REDEPOSIT , ovvero una transazione verso se stessi); addresses : di tipo List<String> , gli indirizzi Bitcoin dei dei mittenti (per le transazioni in entrata) o dei destinatari (per le transazioni in uscita); cryptoAmount : di tipo long miningFees : di tipo long , le commissioni pagate alle rete Bitcoin per processare la transazione; isIncoming : di tipo booleano , flag indicante se la transazione \u00e8 in entrata o in uscita rispetto al portafoglio dell'utente; isLocal : di tipo booleano , flag indicante se la transazione \u00e8 stata ricevuta/inviata da/a un portafoglio Conio. @Opzionale associatedBid : l'offerta di acquisto annessa. Popolato in caso di attivit\u00e0 di acquisto. Contiene le informazioni sulla richiesta di acquisto, quali: status : di tipo BidStatus , lo stato del pagamento della richiesta di acquisto ( PAID , CHARGED ); cryptoAmount : di tipo long , l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi) acquistato; fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il controvalore (rispetto al cryptoAmount ) accordato per l'acquisto dei bitcoin, calcolato nella valuta indicata dal campo currency ; serviceFee : di tipo Decimal (iOS) / BigDecimal (Android), le commissioni pagate per la fruizione del servizio, calcolato nella valuta indicata dal campo currency ; currency : di tipo Currency , la valuta usata per l'acquisto dei bitcoin; paymentMethodId : di tipo String , l'identificativo del metodo di pagamento; createdAt : di tipo long , l'istante temporale in cui \u00e8 stata creata l' Activity , espresso come Unix Timestamp in millisecondi; paidAt : di tipo long , l'istante temporale in cui \u00e8 stato effettuato il pagamento per l'acquisto dei bitcoin, espresso come Unix Timestamp in millisecondi; @Opzionale chargedAt : di tipo long , l'istante temporale in cui \u00e8 stata invaita la transazione bitcoin, espresso come Unix Timestamp in millisecondi. Nullo nel caso in cui la transazione non sia ancora stata effettuata. @Opzionale associatedAsk : l'offerta di vendita annessa. Popolato in caso di attivit\u00e0 di vendita, Contiene le informazioni sulla richeista di vendita, quali: status : di tipo AskStatus , lo stato del pagamento della richiesta di vendita ( CHARGED , PAID ) cryptoAmount : di tipo long , l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi) venduto; fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il controvalore (rispetto al cryptoAmount ) accordato per la vendita dei bitcoin, calcolato nella valuta indicata dal campo currency ; serviceFee : di tipo Decimal (iOS) / BigDecimal (Android), le commissioni pagate per la fruizione del servizio, calcolato nella valuta indicata dal campo currency ; currency : di tipo Currency , la valuta usata per la vendita dei bitcoin; sellMethodId : di tipo String , l'identificativo del metodo di riscossione della vendita; @Opzionale cro : di tipo String , il Codice Riferimento Operazione della transazione bancaria; @Opzionale iban : di tipo String , l'IBAN del richiedente del bonifico bancario; createdAt : di tipo long , l'istante temporale in cui \u00e8 stata creata l' Activity , espresso come Unix Timestamp in millisecondi; @Opzionale chargedAt : di tipo long , l'istante temporale in cui \u00e8 stato effettuato il pagamento per la vendita dei bitcoin, espresso come Unix Timestamp in millisecondi. Nullo nel caso in cui la transazione non sia ancora stata effettuata; paidAt : di tipo long , l'istante temporale in cui \u00e8 stata invaita la transazione bitcoin, espresso come Unix Timestamp in millisecondi. Errori Non autorizzato Codice Android ActivityDetailsParams params = new ActivityDetailsParams(\"activityId\", Currency.EUR); conio.walletService.activityDetails(params) .asCallback(result -> result.analysis( details -> { /* Handle ActivityDetails */ }, error -> { /* ... */ } )); iOS let params = ActivityDetailsParams(activityId: \"activityId\", currency: .eur) conio.walletService.activityDetails(params: params).asCallback { result in switch result { case .success(let details): // ActivityDetails case .failure(let error): // Operation Error } } Bilancio del portafoglio Permette di recuperare il bilancio del portafoglio Bitcoin dell'utente. Metodo walletService.walletBalances Risposta Un oggetto di tipo WalletBalances contenente il valore di bitcoin presente nel wallet espresso in satoshi (1 bitcoin = 100.000.000 satoshi). Il valore si divide in: confirmedBalance : di tipo long , valore con almeno 3 conferme sulla blockchain Bitcoin e quindi disponibile per l'utente; unconfirmedBalance : di tipo long , valore con meno di 3 conferme e quindi non ancora disponibile. Errori Non autorizzato Codice Android conio.walletService.walletBalances() .asCallback(result -> result.analysis( balances -> { /* Handle WalletBalances */ }, error -> { /* ... */ } )); iOS conio.walletService.walletBalances().asCallback { result in switch result { case .success(let balances): // WalletBalances case .failure(let error): // Operation Error } } Codice di recupero Bitcoin Permette di recuperare dalla memoria del dispositivo il \"Codie di recupero Bitcoin\": 12 parole di backup del portafoglio Bitcoin. Risposta Un oggetto di tipo MnemonicWords contenente un array di 12 stringhe. Errori Non autorizzato Codice Android conio.walletService.readMnemonic() .asCallback(result -> result.analysis( mnemonic -> { /* Handle MnemonicWords */ }, error -> { /* ... */ } )); iOS conio.walletService.readMnemonic().asCallback { result in switch result { case .success(let mnemonic): // MnemonicWords case .failure(let error): // Operation Error } }","title":"Operazioni sul portafoglio"},{"location":"Old/wallet/Wallet/#operazioni-sul-portafoglio","text":"","title":"Operazioni sul portafoglio"},{"location":"Old/wallet/Wallet/#indirizzo-bitcoin-attuale","text":"Permette di recuperare l'indirizzo corrente del portafoglio su cui sar\u00e0 possibile ricevere delle transazioni.","title":"Indirizzo Bitcoin attuale"},{"location":"Old/wallet/Wallet/#metodo","text":"walletService.currentBitcoinAddress","title":"Metodo"},{"location":"Old/wallet/Wallet/#risposta","text":"Una string contenente l'indirizzo Bitcoin attuale.","title":"Risposta"},{"location":"Old/wallet/Wallet/#errori","text":"Non autorizzato","title":"Errori"},{"location":"Old/wallet/Wallet/#codice","text":"","title":"Codice"},{"location":"Old/wallet/Wallet/#android","text":"conio.walletService.currentBitcoinAddress() .asCallback(result -> result.analysis( address -> {/* Handle string wallet address */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/wallet/Wallet/#ios","text":"conio.walletService.currentBitcoinAddress().asCallback { result in switch result { case .success(let address): // Handle string wallet address case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/wallet/Wallet/#lista-movimenti-bitcoin","text":"Ciascuna operazione di invio, ricezione, acquisto e vendita di Bitcoin \u00e8 rappresentata da un' Activity . La lista delle attivit\u00e0 svolte dall'utente pu\u00f2 essere recuperata tramite l'apposito metodo.","title":"Lista movimenti bitcoin"},{"location":"Old/wallet/Wallet/#metodo_1","text":"walletService.activityList","title":"Metodo"},{"location":"Old/wallet/Wallet/#parametri","text":"Un oggetto di tipo ActivityListParams contenente: types : di tipo List<ActivityType> , una lista di enumerati ActivityType che ci permette di specificare le tipologie di activities da recuperare. Tramite ActivityType.all() \u00e8 possibile ottenere una lista di tutte le tipologie di Activity ; currency : di tipo Currency , la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro); @Default(6) limit : di tipo intero , il numero massimo di transazioni da ricevere nella risposta; @Opzionale nextPage : di tipo String , token per la paginazione delle activities, ottenibile tramite il risultato di una prima richiesta di lista movimenti con questo valore nullo. Inserendo tale valore \u00e8 possibile ottenere le successive n Activity (con n = valore inserito come limit ); @Opzionale timeFrame : di tipo TimeFrame , la finestra temporale che definisce quali Activity includere nella risposta.","title":"Parametri"},{"location":"Old/wallet/Wallet/#risposta_1","text":"Un oggetto di tipo ActivityList contenente: activities : di tipo List<SimpleActivity> , ovvero la lista delle Activity dell'utente richieste; @Opzionale nextPage : di tipo String , token per la paginazione delle activity, che pu\u00f2 essere inserito in una successiva richiesta di lista movimenti . Quando questo campo \u00e8 nullo, significa che non esistono ulteriori Activity tra quelle che rispettano i filtri inseriti. Ogni Activity resituita (di tipo SimpleActivity ) contiene: activityId : di tipo String , l'identificativo univoco della Activity ; type : di tipo ActivityType , la tipologia di Activity ( SEND , BUY , SELL , RECEIVE ); status : di tipo TransactionStatus , lo stato di conferma della transazione Bitcoin legata all' Activity ( UNCONFIRMED , PARTIALLY_CONFIRMED , CONFIRMED ); createdAt : di tipo long , l'istante temporale in cui \u00e8 stata creata l' Activity , espresso come Unix Timestamp in millisecondi. cryptoAmount : di tipo long , l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi), movimentato dall' Activity ; fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il corrispettivo ammontare di cryptoAmount , calcolato nella valuta indicata tramite il campo currency ;","title":"Risposta"},{"location":"Old/wallet/Wallet/#errori_1","text":"Non autorizzato","title":"Errori"},{"location":"Old/wallet/Wallet/#codice_1","text":"","title":"Codice"},{"location":"Old/wallet/Wallet/#android_1","text":"// Example 1: retrieve 6 activities of all type List<ActivityType> types = ActivityType.all; ActivityListParams params = new ActivityListParams(types, Currency.EUR); // Example 2: retrieve 10 sell activities List<ActivityType> types = Collections.singletonList(ActivityType.SELL); ActivityListParams params = new ActivityListParams(types, Currency.EUR, 10); // Example 3: retrieve 6 buy and receive activities of the last month List<ActivityType> types = Arrays.asList(ActivityType.BUY, ActivityType.RECEIVE); ActivityListParams params = new ActivityListParams( types, // types Currency.EUR, // currency 6, // limit null, // nextPage TimeFrame.lastMonth() // timeFrame ); conio.walletService.activityList(params) .asCallback(result -> result.analysis( activityList -> { /* Handle ActivityList */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/wallet/Wallet/#ios_1","text":"let types = WalletActivityType.allCases let params = ActivitiesParams(nextPage: \"string\", types: types) conio.walletService.walletActivities(params: params).asCallback { result in switch result { case .success(let activities): // WalletActivities case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/wallet/Wallet/#lista-movimenti-bitcoin-in-formato-pdf","text":"Ciascuna operazione di invio, ricezione, acquisto e vendita di Bitcoin \u00e8 rappresentata da un' Activity . La lista delle attivit\u00e0 svolte dall'utente, in formato PDF, pu\u00f2 essere recuperata tramite l'apposito metodo.","title":"Lista movimenti bitcoin in formato PDF"},{"location":"Old/wallet/Wallet/#metodo_2","text":"","title":"Metodo"},{"location":"Old/wallet/Wallet/#android_2","text":"walletService.activityListPdf","title":"Android"},{"location":"Old/wallet/Wallet/#ios_2","text":"walletService.walletPDFActivities","title":"iOS"},{"location":"Old/wallet/Wallet/#parametri_1","text":"","title":"Parametri"},{"location":"Old/wallet/Wallet/#android_3","text":"Un oggetto di tipo ActivityListPdfParams contenente: types : di tipo List<ActivityType> , una lista di enumerati ActivityType che ci permette di specificare le tipologie di activities da recuperare. Tramite ActivityType.all() \u00e8 possibile ottenere una lista di tutte le tipologie di Activity ; currency : di tipo Currency , la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro); @Default(6) limit : di tipo intero , il numero massimo di transazioni da ricevere nella risposta; @Opzionale timeFrame : di tipo TimeFrame , la finestra temporale che definisce quali Activity includere nella risposta.","title":"Android"},{"location":"Old/wallet/Wallet/#ios_3","text":"Un oggetto di tipo PDFActivitiesParams contenente: types : di tipo Array<WalletActivityType> , una lista di enumerati WalletActivityType che ci permette di specificare le tipologie di activities da recuperare. Tramite WalletActivityType.allCases \u00e8 possibile ottenere una lista di tutte le tipologie di Activity ; currency : di tipo Currency , la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro); limit : di tipo Int (default value 6), il numero massimo di transazioni da ricevere nella risposta; timeFrame : di tipo TimeFrame? , la finestra temporale che definisce quali Activity includere nella risposta.","title":"iOS"},{"location":"Old/wallet/Wallet/#risposta_2","text":"","title":"Risposta"},{"location":"Old/wallet/Wallet/#android_4","text":"Un oggetto di tipo InputStream contenente il bytes stream del PDF.","title":"Android"},{"location":"Old/wallet/Wallet/#ios_4","text":"Un oggetto di tipo Data contenente il byte buffer del PDF.","title":"iOS"},{"location":"Old/wallet/Wallet/#errori_2","text":"Non autorizzato","title":"Errori"},{"location":"Old/wallet/Wallet/#codice_2","text":"","title":"Codice"},{"location":"Old/wallet/Wallet/#android_5","text":"// Example 1: retrieve 6 activities of all type List<ActivityType> types = ActivityType.all; ActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR); // Example 2: retrieve 10 sell activities List<ActivityType> types = Collections.singletonList(ActivityType.SELL); ActivityListPdfParams params = new ActivityListPdfParams(types, Currency.EUR, 10); // Example 3: retrieve 6 buy and receive activities of the last month List<ActivityType> types = Arrays.asList(ActivityType.BUY, ActivityType.RECEIVE); ActivityListPdfParams params = new ActivityListPdfParams( types, // types Currency.EUR, // currency 6, // limit TimeFrame.lastMonth() // timeFrame ); conio.walletService.activityListPdf(params) .asCallback(result -> result.analysis( stream -> { /* Handle InputStream */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/wallet/Wallet/#ios_5","text":"let types = WalletActivityType.allCases let params = PDFActivitiesParams(types: types, currency: .EUR) conio.walletService.walletPDFActivities(with: params).asCallback { result in switch result { case .success(let data): // PDF WalletActivities case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/wallet/Wallet/#dettaglio-di-un-movimento","text":"Recuperata la lista delle attivit\u00e0 \u00e8 possibile ottenere ulteriori informazioni su un Activity specifica richiedendone il dettaglio.","title":"Dettaglio di un movimento"},{"location":"Old/wallet/Wallet/#metodo_3","text":"walletService.activityDetails","title":"Metodo"},{"location":"Old/wallet/Wallet/#parametri_2","text":"Un oggetto di tipo ActivityDetailsParams contenente: activityId : di tipo String , l'id dell' Activity della quale si vuole leggere il dettaglio; currency : di tipo Currency , la valuta nella quale si vuole conoscere il valore della transazioni di acquisto e vendita (attualmente solo Euro);","title":"Parametri"},{"location":"Old/wallet/Wallet/#risposta_3","text":"Un oggetto di tipo ActivityDetails contenente: activityId : di tipo String , l'id dell'attivit\u00e0; type : di tipo ActivityType , la tipologia di Activity ( SEND , BUY , SELL , RECEIVE ); createdAt : di tipo Long , l'istante temporale in cui \u00e8 stata creata l' Activity , espresso come Unix Timestamp in millisecondi. @Opzionale transaction : di tipo Transaction , la transazione annessa. Popolato nel caso in cui sia stata effettuata una transazione. Contiene informazioni sulla transazione Bitcoin associata all' Activity , quali: hash : di tipo String , l'hash della transazione Bitcoin; status : di tipo TransactionStatus , lo stato di conferma della transazione Bitcoin legata all' Activity ( UNCONFIRMED , PARTIALLY_CONFIRMED , CONFIRMED ); type : di tipo TransactionType , il tipo di transazione Bitcoin ( GENERIC o REDEPOSIT , ovvero una transazione verso se stessi); addresses : di tipo List<String> , gli indirizzi Bitcoin dei dei mittenti (per le transazioni in entrata) o dei destinatari (per le transazioni in uscita); cryptoAmount : di tipo long miningFees : di tipo long , le commissioni pagate alle rete Bitcoin per processare la transazione; isIncoming : di tipo booleano , flag indicante se la transazione \u00e8 in entrata o in uscita rispetto al portafoglio dell'utente; isLocal : di tipo booleano , flag indicante se la transazione \u00e8 stata ricevuta/inviata da/a un portafoglio Conio. @Opzionale associatedBid : l'offerta di acquisto annessa. Popolato in caso di attivit\u00e0 di acquisto. Contiene le informazioni sulla richiesta di acquisto, quali: status : di tipo BidStatus , lo stato del pagamento della richiesta di acquisto ( PAID , CHARGED ); cryptoAmount : di tipo long , l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi) acquistato; fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il controvalore (rispetto al cryptoAmount ) accordato per l'acquisto dei bitcoin, calcolato nella valuta indicata dal campo currency ; serviceFee : di tipo Decimal (iOS) / BigDecimal (Android), le commissioni pagate per la fruizione del servizio, calcolato nella valuta indicata dal campo currency ; currency : di tipo Currency , la valuta usata per l'acquisto dei bitcoin; paymentMethodId : di tipo String , l'identificativo del metodo di pagamento; createdAt : di tipo long , l'istante temporale in cui \u00e8 stata creata l' Activity , espresso come Unix Timestamp in millisecondi; paidAt : di tipo long , l'istante temporale in cui \u00e8 stato effettuato il pagamento per l'acquisto dei bitcoin, espresso come Unix Timestamp in millisecondi; @Opzionale chargedAt : di tipo long , l'istante temporale in cui \u00e8 stata invaita la transazione bitcoin, espresso come Unix Timestamp in millisecondi. Nullo nel caso in cui la transazione non sia ancora stata effettuata. @Opzionale associatedAsk : l'offerta di vendita annessa. Popolato in caso di attivit\u00e0 di vendita, Contiene le informazioni sulla richeista di vendita, quali: status : di tipo AskStatus , lo stato del pagamento della richiesta di vendita ( CHARGED , PAID ) cryptoAmount : di tipo long , l'ammontare in satoshi (1 bitcoin = 100.000.000 satoshi) venduto; fiatAmount : di tipo Decimal (iOS) / BigDecimal (Android), il controvalore (rispetto al cryptoAmount ) accordato per la vendita dei bitcoin, calcolato nella valuta indicata dal campo currency ; serviceFee : di tipo Decimal (iOS) / BigDecimal (Android), le commissioni pagate per la fruizione del servizio, calcolato nella valuta indicata dal campo currency ; currency : di tipo Currency , la valuta usata per la vendita dei bitcoin; sellMethodId : di tipo String , l'identificativo del metodo di riscossione della vendita; @Opzionale cro : di tipo String , il Codice Riferimento Operazione della transazione bancaria; @Opzionale iban : di tipo String , l'IBAN del richiedente del bonifico bancario; createdAt : di tipo long , l'istante temporale in cui \u00e8 stata creata l' Activity , espresso come Unix Timestamp in millisecondi; @Opzionale chargedAt : di tipo long , l'istante temporale in cui \u00e8 stato effettuato il pagamento per la vendita dei bitcoin, espresso come Unix Timestamp in millisecondi. Nullo nel caso in cui la transazione non sia ancora stata effettuata; paidAt : di tipo long , l'istante temporale in cui \u00e8 stata invaita la transazione bitcoin, espresso come Unix Timestamp in millisecondi.","title":"Risposta"},{"location":"Old/wallet/Wallet/#errori_3","text":"Non autorizzato","title":"Errori"},{"location":"Old/wallet/Wallet/#codice_3","text":"","title":"Codice"},{"location":"Old/wallet/Wallet/#android_6","text":"ActivityDetailsParams params = new ActivityDetailsParams(\"activityId\", Currency.EUR); conio.walletService.activityDetails(params) .asCallback(result -> result.analysis( details -> { /* Handle ActivityDetails */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/wallet/Wallet/#ios_6","text":"let params = ActivityDetailsParams(activityId: \"activityId\", currency: .eur) conio.walletService.activityDetails(params: params).asCallback { result in switch result { case .success(let details): // ActivityDetails case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/wallet/Wallet/#bilancio-del-portafoglio","text":"Permette di recuperare il bilancio del portafoglio Bitcoin dell'utente.","title":"Bilancio del portafoglio"},{"location":"Old/wallet/Wallet/#metodo_4","text":"walletService.walletBalances","title":"Metodo"},{"location":"Old/wallet/Wallet/#risposta_4","text":"Un oggetto di tipo WalletBalances contenente il valore di bitcoin presente nel wallet espresso in satoshi (1 bitcoin = 100.000.000 satoshi). Il valore si divide in: confirmedBalance : di tipo long , valore con almeno 3 conferme sulla blockchain Bitcoin e quindi disponibile per l'utente; unconfirmedBalance : di tipo long , valore con meno di 3 conferme e quindi non ancora disponibile.","title":"Risposta"},{"location":"Old/wallet/Wallet/#errori_4","text":"Non autorizzato","title":"Errori"},{"location":"Old/wallet/Wallet/#codice_4","text":"","title":"Codice"},{"location":"Old/wallet/Wallet/#android_7","text":"conio.walletService.walletBalances() .asCallback(result -> result.analysis( balances -> { /* Handle WalletBalances */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/wallet/Wallet/#ios_7","text":"conio.walletService.walletBalances().asCallback { result in switch result { case .success(let balances): // WalletBalances case .failure(let error): // Operation Error } }","title":"iOS"},{"location":"Old/wallet/Wallet/#codice-di-recupero-bitcoin","text":"Permette di recuperare dalla memoria del dispositivo il \"Codie di recupero Bitcoin\": 12 parole di backup del portafoglio Bitcoin.","title":"Codice di recupero Bitcoin"},{"location":"Old/wallet/Wallet/#risposta_5","text":"Un oggetto di tipo MnemonicWords contenente un array di 12 stringhe.","title":"Risposta"},{"location":"Old/wallet/Wallet/#errori_5","text":"Non autorizzato","title":"Errori"},{"location":"Old/wallet/Wallet/#codice_5","text":"","title":"Codice"},{"location":"Old/wallet/Wallet/#android_8","text":"conio.walletService.readMnemonic() .asCallback(result -> result.analysis( mnemonic -> { /* Handle MnemonicWords */ }, error -> { /* ... */ } ));","title":"Android"},{"location":"Old/wallet/Wallet/#ios_8","text":"conio.walletService.readMnemonic().asCallback { result in switch result { case .success(let mnemonic): // MnemonicWords case .failure(let error): // Operation Error } }","title":"iOS"}]}